REFERENCE FILE


-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.accounts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  type text NOT NULL,
  provider text NOT NULL,
  provider_account_id text NOT NULL,
  refresh_token text,
  access_token text,
  expires_at bigint,
  token_type text,
  scope text,
  id_token text,
  session_state text,
  refresh_token_expires_in bigint,
  CONSTRAINT accounts_pkey PRIMARY KEY (id),
  CONSTRAINT accounts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.announcements (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  title text NOT NULL,
  body text,
  tldr text,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT announcements_pkey PRIMARY KEY (id),
  CONSTRAINT announcements_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT announcements_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.anomaly_flags (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  entity_type text NOT NULL,
  entity_id uuid NOT NULL,
  anomaly_type text NOT NULL,
  severity text NOT NULL CHECK (severity = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  details jsonb,
  flagged_at timestamp with time zone NOT NULL DEFAULT now(),
  resolved_at timestamp with time zone,
  CONSTRAINT anomaly_flags_pkey PRIMARY KEY (id),
  CONSTRAINT anomaly_flags_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id)
);
CREATE TABLE public.audit_log (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  user_id uuid,
  action_type text NOT NULL,
  entity_type text NOT NULL,
  entity_id uuid,
  details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT audit_log_pkey PRIMARY KEY (id),
  CONSTRAINT audit_log_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT audit_log_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.chat_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_id uuid NOT NULL,
  role text NOT NULL CHECK (role = ANY (ARRAY['user'::text, 'assistant'::text])),
  content text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT chat_messages_pkey PRIMARY KEY (id),
  CONSTRAINT chat_messages_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.chat_sessions(id)
);
CREATE TABLE public.chat_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  session_token text NOT NULL UNIQUE,
  community_id uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  last_activity timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT chat_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT chat_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT chat_sessions_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id)
);
CREATE TABLE public.communities (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  code text NOT NULL UNIQUE,
  logo_url text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT communities_pkey PRIMARY KEY (id)
);
CREATE TABLE public.community_invites (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  email text NOT NULL,
  role USER-DEFINED NOT NULL DEFAULT 'Resident'::member_role,
  code text NOT NULL UNIQUE,
  expires_at timestamp with time zone NOT NULL,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT community_invites_pkey PRIMARY KEY (id),
  CONSTRAINT community_invites_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT community_invites_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.community_members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role USER-DEFINED NOT NULL DEFAULT 'Resident'::member_role,
  joined_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT community_members_pkey PRIMARY KEY (id),
  CONSTRAINT community_members_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT community_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.complaints (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  user_id uuid NOT NULL,
  title text NOT NULL,
  description text,
  category USER-DEFINED NOT NULL DEFAULT 'other'::complaint_category,
  status USER-DEFINED NOT NULL DEFAULT 'pending'::complaint_status,
  priority integer NOT NULL DEFAULT 0,
  sentiment numeric,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT complaints_pkey PRIMARY KEY (id),
  CONSTRAINT complaints_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT complaints_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.email_verifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL UNIQUE,
  otp text NOT NULL,
  expires_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT email_verifications_pkey PRIMARY KEY (id)
);
CREATE TABLE public.event_rsvps (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_id uuid NOT NULL,
  user_id uuid NOT NULL,
  status text NOT NULL CHECK (status = ANY (ARRAY['yes'::text, 'no'::text, 'maybe'::text])),
  responded_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT event_rsvps_pkey PRIMARY KEY (id),
  CONSTRAINT event_rsvps_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT event_rsvps_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  title text NOT NULL,
  description text,
  starts_at timestamp with time zone NOT NULL,
  ends_at timestamp with time zone,
  location text,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT events_pkey PRIMARY KEY (id),
  CONSTRAINT events_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT events_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.feedback (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  user_id uuid NOT NULL,
  rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  form_data jsonb,
  template_id uuid,
  CONSTRAINT feedback_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT feedback_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT feedback_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.feedback_form_templates(id)
);
CREATE TABLE public.feedback_form_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  title text NOT NULL DEFAULT 'Client Satisfaction Form'::text,
  subtitle text DEFAULT 'Your feedback helps us improve our services'::text,
  fields jsonb NOT NULL DEFAULT '[{"id": "rating", "type": "rating", "label": "How satisfied are you with our service?", "options": {"max": 5, "emojis": ["😡", "😞", "😐", "😊", "😄"], "labels": ["Very Poor", "Poor", "Good", "Very Good", "Excellent"]}, "required": true}, {"id": "comment", "type": "textarea", "label": "Comments/Suggestions/Feedback?", "required": false, "placeholder": "Please share your thoughts..."}]'::jsonb,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT feedback_form_templates_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_form_templates_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  type text NOT NULL,
  title text NOT NULL,
  body text,
  link_url text,
  is_read boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.otp_attempts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT otp_attempts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.poll_options (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  poll_id uuid NOT NULL,
  option_text text NOT NULL,
  ord integer NOT NULL DEFAULT 0,
  CONSTRAINT poll_options_pkey PRIMARY KEY (id),
  CONSTRAINT poll_options_poll_id_fkey FOREIGN KEY (poll_id) REFERENCES public.polls(id)
);
CREATE TABLE public.poll_responses (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  poll_id uuid NOT NULL,
  respondent_id uuid NOT NULL,
  responses jsonb NOT NULL,
  submitted_at timestamp with time zone DEFAULT now(),
  CONSTRAINT poll_responses_pkey PRIMARY KEY (id),
  CONSTRAINT poll_responses_poll_id_fkey FOREIGN KEY (poll_id) REFERENCES public.polls(id),
  CONSTRAINT poll_responses_respondent_id_fkey FOREIGN KEY (respondent_id) REFERENCES public.users(id)
);
CREATE TABLE public.poll_votes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  poll_id uuid NOT NULL,
  option_id uuid NOT NULL,
  voter_id uuid NOT NULL,
  voted_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT poll_votes_pkey PRIMARY KEY (id),
  CONSTRAINT poll_votes_poll_id_fkey FOREIGN KEY (poll_id) REFERENCES public.polls(id),
  CONSTRAINT poll_votes_option_id_fkey FOREIGN KEY (option_id) REFERENCES public.poll_options(id),
  CONSTRAINT poll_votes_voter_id_fkey FOREIGN KEY (voter_id) REFERENCES public.users(id)
);
CREATE TABLE public.polls (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  community_id uuid NOT NULL,
  title text NOT NULL,
  description text,
  deadline timestamp with time zone,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  is_anonymous boolean NOT NULL DEFAULT false,
  is_multi_select boolean NOT NULL DEFAULT false,
  questions jsonb DEFAULT '[]'::jsonb,
  footer_note text,
  complaint_link text DEFAULT '/main/complaints'::text,
  CONSTRAINT polls_pkey PRIMARY KEY (id),
  CONSTRAINT polls_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT polls_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.sentiment_cache (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  text_hash text NOT NULL UNIQUE,
  sentiment_score numeric,
  confidence numeric,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT sentiment_cache_pkey PRIMARY KEY (id)
);
CREATE TABLE public.sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_token text NOT NULL UNIQUE,
  user_id uuid NOT NULL,
  expires timestamp with time zone NOT NULL,
  CONSTRAINT sessions_pkey PRIMARY KEY (id),
  CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.temp_users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL UNIQUE,
  name text NOT NULL,
  hashed_password text NOT NULL,
  verification_code text NOT NULL,
  expires_at timestamp with time zone NOT NULL,
  community_code text,
  role text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT temp_users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.topic_cache (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  text_hash text NOT NULL UNIQUE,
  predicted_category text NOT NULL,
  confidence numeric,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT topic_cache_pkey PRIMARY KEY (id)
);
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text,
  email text NOT NULL UNIQUE,
  email_verified timestamp with time zone,
  image text,
  hashed_password text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  role text DEFAULT 'Guest'::text,
  CONSTRAINT users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.verification_attempts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL,
  attempt_count integer NOT NULL DEFAULT 1,
  last_attempt_at timestamp with time zone NOT NULL DEFAULT now(),
  locked_until timestamp with time zone,
  CONSTRAINT verification_attempts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.verification_tokens (
  identifier text NOT NULL,
  token text NOT NULL,
  expires timestamp with time zone NOT NULL,
  CONSTRAINT verification_tokens_pkey PRIMARY KEY (token, identifier)
);





.
├── .gitignore
├── eslint.config.mjs
├── middleware.ts
├── next.config.js
├── package-lock.json
├── package.json
├── postcss.config.js
├── README.md
├── sqlschema
├── tailwind.config.js
├── TODO.md
├── tsconfig.json
├── app/
│   ├── favicon.ico
│   ├── globals.css
│   ├── layout.tsx
│   ├── page.tsx
│   ├── api/
│   │   ├── admin/
│   │   │   ├── analytics/
│   │   │   │   └── route.ts
│   │   │   ├── audit-log/
│   │   │   │   └── route.ts
│   │   │   ├── dashboard/
│   │   │   │   └── route.ts
│   │   │   ├── feedback-form/
│   │   │   │   └── route.ts
│   │   │   ├── members/
│   │   │   │   ├── route.ts
│   │   │   │   └── [id]/
│   │   │   ├── notifications/
│   │   │   │   └── route.ts
│   │   │   └── settings/
│   │   │       └── route.ts
│   │   ├── ai/
│   │   │   ├── anomaly/
│   │   │   │   └── route.ts
│   │   │   ├── chat/
│   │   │   │   └── route.ts
│   │   │   ├── classify/
│   │   │   │   └── route.ts
│   │   │   └── sentiment/
│   │   │       └── route.ts
│   │   ├── auth/
│   │   │   ├── [...nextauth]/
│   │   │   ├── check-email/
│   │   │   │   └── route.ts
│   │   │   ├── resend-otp/
│   │   │   │   └── route.ts
│   │   │   ├── signout/
│   │   │   │   └── route.ts
│   │   │   ├── signup/
│   │   │   │   └── route.ts
│   │   │   ├── verify-code/
│   │   │   │   └── route.ts
│   │   │   └── verify-email/
│   │   │       └── route.ts
│   │   ├── community/
│   │   │   └── validate-code/
│   │   │       └── route.ts
│   │   ├── complaints/
│   │   │   ├── route.ts
│   │   │   └── [id]/
│   │   │       └── route.ts
│   │   ├── contact/
│   │   │   └── route.ts
│   │   ├── debug/
│   │   │   ├── email/
│   │   │   │   └── route.ts
│   │   │   ├── session/
│   │   │   │   └── route.ts
│   │   │   └── user-role/
│   │   │       └── route.ts
│   │   ├── feedback/
│   │   │   └── route.ts
│   │   ├── me/
│   │   │   └── summary/
│   │   │       └── route.ts
│   │   ├── members/
│   │   │   └── route.ts
│   │   ├── notifications/
│   │   │   └── route.ts
│   │   ├── polls/
│   │   │   ├── route.ts
│   │   │   ├── [pollId]/
│   │   │   │   ├── route.ts
│   │   │   │   ├── respond/
│   │   │   │   └── vote/
│   │   └── test-email/
│   │       └── route.ts
│   ├── auth/
│   │   ├── layout.tsx
│   │   ├── login/
│   │   │   ├── layout.tsx
│   │   │   └── page.tsx
│   │   └── signup/
│   │       ├── layout.tsx
│   │       └── page.tsx
│   ├── main/
│   │   ├── layout.tsx
│   │   ├── page.tsx
│   │   ├── admin/
│   │   │   ├── layout.tsx
│   │   │   ├── page.tsx
│   │   │   ├── ai-insights/
│   │   │   │   └── page.tsx
│   │   │   ├── analytics/
│   │   │   │   └── page.tsx
│   │   │   ├── audit-log/
│   │   │   │   └── page.tsx
│   │   │   ├── complaints/
│   │   │   │   └── page.tsx
│   │   │   ├── feedback/
│   │   │   ├── members/
│   │   │   ├── notifications/
│   │   │   ├── polls/
│   │   │   └── settings/
│   │   ├── guest/
│   │   │   ├── layout.tsx
│   │   │   ├── page.tsx
│   │   │   ├── access/
│   │   │   ├── ask-ecomai/
│   │   │   ├── explore/
│   │   │   └── settings/
│   │   └── user/
│   │       ├── layout.tsx
│   │       ├── page.tsx
│   │       ├── ask-ecomai/
│   │       ├── complaints/
│   │       ├── feedback/
│   │       ├── notifications/
│   │       ├── polls/
│   │       └── settings/
│   └── verification/
│       └── page.tsx
├── components/
│   ├── About.tsx
│   ├── AuthForm.tsx
│   ├── AuthGuard.tsx
│   ├── BackToHomeButton.tsx
│   ├── Button.tsx
│   ├── Contact.tsx
│   ├── DashboardRedirect.tsx
│   ├── FAQAccordion.tsx
│   ├── FeatureGrid.tsx
│   ├── Footer.tsx
│   ├── ForceRefresh.tsx
│   ├── Header.tsx
│   ├── Hero.tsx
│   ├── Input.tsx
│   ├── LayoutWrapper.tsx
│   ├── MainAppHeader.tsx
│   ├── MainAppSidebar.tsx
│   ├── OAuthButton.tsx
│   ├── Providers.tsx
│   ├── RoleDebug.tsx
│   ├── RoleDebugger.tsx
│   ├── SignOutButton.tsx
│   ├── ThemeContext.tsx
│   ├── ThemeToggle.tsx
│   ├── Toast.tsx
│   └── mainapp/
│       ├── components_corrected.tsx
│       ├── components_fixed.tsx
│       └── components.tsx
├── components/ui/
│   ├── AdminHeader.tsx
│   ├── AdminSidebar.tsx
│   ├── ChartCard.tsx
│   ├── ConfirmDialog.tsx
│   ├── DataTable.tsx
│   ├── EmptyState.tsx
│   ├── FeedbackFormEditor.tsx
│   ├── index_new.ts
│   ├── index.ts
│   ├── KPICard.tsx
│   ├── LoadingSpinner.tsx
│   ├── SearchInput.tsx
│   └── SidebarContext.tsx
├── lib/
│   ├── auth.ts
│   ├── email-verification-dev.ts
│   ├── email-verification.ts
│   ├── otp.ts
│   ├── resend-service.ts
│   └── supabase.ts
├── public/
│   ├── file.svg
│   ├── globe.svg
│   ├── next.svg
│   ├── vercel.svg
│   └── window.svg
├── sql/
│   ├── add_admin_role.sql
│   ├── feedback_form_migration.sql
│   ├── migration_add_role_and_view_fixed.sql
│   └── new_migration_regenerate_codes.sql
└── types/
    ├── feedback.ts
    └── next-auth.d.ts



All apis
// app/api/admin/analytics/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user and check if admin
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    // For development purposes, allow access if user exists but doesn't have admin role
    // In production, you should enforce strict admin-only access
    let communityId: string | null = null

    if (user?.community_members?.[0]) {
      // User is a community member
      if (user.community_members[0].role !== 'Admin') {
        console.log(`User ${session.user.email} has role: ${user.community_members[0].role}, not Admin. Allowing access for development.`)
        // return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
      }
      communityId = user.community_members[0].community_id
    } else {
      // User is not a community member, try to find or create a default community
      console.log(`User ${session.user.email} is not a community member. Creating default community for development.`)

      // For development: create a default community if none exists
      const { data: existingCommunity } = await supabase
        .from('communities')
        .select('id')
        .limit(1)
        .single()

      if (!existingCommunity) {
        // Create a default community for development
        const { data: newCommunity } = await supabase
          .from('communities')
          .insert([{ name: 'Default Community', description: 'Default community for development' }])
          .select('id')
          .single()

        if (newCommunity) {
          communityId = newCommunity.id
        }
      } else {
        communityId = existingCommunity.id
      }

      // Add user to community as admin for development
      if (communityId && user) {
        await supabase
          .from('community_members')
          .upsert({
            user_id: user.id,
            community_id: communityId,
            role: 'Admin',
            joined_at: new Date().toISOString()
          })
      }
    }

    if (!communityId) {
      return NextResponse.json({ error: 'No community found' }, { status: 404 })
    }

    // Get time range from query params
    const { searchParams } = new URL(request.url)
    const timeRange = searchParams.get('timeRange') || '30d'

    // Calculate date range
    const now = new Date()
    let startDate: Date

    switch (timeRange) {
      case '7d':
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
        break
      case '30d':
        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
        break
      case '90d':
        startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000)
        break
      case '1y':
        startDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000)
        break
      default:
        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
    }

    // 1. Total Members and Active Members
    const { data: totalMembers } = await supabase
      .from('community_members')
      .select('user_id', { count: 'exact' })
      .eq('community_id', communityId)

    const { data: activeMembers } = await supabase
      .from('community_members')
      .select('user_id', { count: 'exact' })
      .eq('community_id', communityId)
      .gte('joined_at', startDate.toISOString())

    // 2. Total Polls and Complaints
    const { data: totalPolls } = await supabase
      .from('polls')
      .select('id', { count: 'exact' })
      .eq('community_id', communityId)

    const { data: totalComplaints } = await supabase
      .from('complaints')
      .select('id', { count: 'exact' })
      .eq('community_id', communityId)

    // 3. Average Sentiment
    const { data: sentimentData } = await supabase
      .from('complaints')
      .select('sentiment')
      .eq('community_id', communityId)
      .not('sentiment', 'is', null)

    const averageSentiment = sentimentData?.length
      ? sentimentData.reduce((sum, item) => sum + (item.sentiment || 0), 0) / sentimentData.length
      : 0

    // 4. Member Growth (monthly) - simplified version
    const memberGrowth = []
    for (let i = 5; i >= 0; i--) {
      const monthStart = new Date(now.getFullYear(), now.getMonth() - i, 1)
      const monthEnd = new Date(now.getFullYear(), now.getMonth() - i + 1, 0)

      const { count } = await supabase
        .from('community_members')
        .select('*', { count: 'exact', head: true })
        .eq('community_id', communityId)
        .lte('joined_at', monthEnd.toISOString())

      memberGrowth.push({
        month: monthStart.toLocaleDateString('en-US', { month: 'short' }),
        members: count || 0
      })
    }

    // 5. Engagement Trend (monthly) - simplified version
    const engagementTrend = []
    for (let i = 5; i >= 0; i--) {
      const monthStart = new Date(now.getFullYear(), now.getMonth() - i, 1)
      const monthEnd = new Date(now.getFullYear(), now.getMonth() - i + 1, 0)

      const [pollsCount, complaintsCount, feedbackCount] = await Promise.all([
        supabase.from('polls').select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
          .gte('created_at', monthStart.toISOString())
          .lte('created_at', monthEnd.toISOString()),
        supabase.from('complaints').select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
          .gte('created_at', monthStart.toISOString())
          .lte('created_at', monthEnd.toISOString()),
        supabase.from('feedback').select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
          .gte('created_at', monthStart.toISOString())
          .lte('created_at', monthEnd.toISOString())
      ])

      engagementTrend.push({
        date: `${now.getFullYear()}-${String(now.getMonth() - i + 1).padStart(2, '0')}`,
        polls: pollsCount.count || 0,
        complaints: complaintsCount.count || 0,
        feedback: feedbackCount.count || 0
      })
    }

    // 6. Complaints by Category
    const { data: complaintsByCategory } = await supabase
      .from('complaints')
      .select('category')
      .eq('community_id', communityId)
      .gte('created_at', startDate.toISOString())

    const categoryCounts: { [key: string]: number } = {}
    complaintsByCategory?.forEach(complaint => {
      categoryCounts[complaint.category] = (categoryCounts[complaint.category] || 0) + 1
    })

    const complaintsByCategoryFormatted = Object.entries(categoryCounts).map(([name, value]) => ({
      name: name.charAt(0).toUpperCase() + name.slice(1),
      value,
      color: getCategoryColor(name)
    }))

    // 7. Participation Rates
    const { data: pollVotes } = await supabase
      .from('poll_votes')
      .select('id', { count: 'exact' })
      .eq('community_id', communityId)
      .gte('created_at', startDate.toISOString())

    const { data: feedbackCount } = await supabase
      .from('feedback')
      .select('id', { count: 'exact' })
      .eq('community_id', communityId)
      .gte('created_at', startDate.toISOString())

    const totalMembersCount = totalMembers?.length || 0
    const participationRates = [
      { activity: 'Voting', rate: totalMembersCount > 0 ? Math.round((pollVotes?.length || 0) / totalMembersCount * 100) : 0 },
      { activity: 'Complaints', rate: totalMembersCount > 0 ? Math.round((totalComplaints?.length || 0) / totalMembersCount * 100) : 0 },
      { activity: 'Feedback', rate: totalMembersCount > 0 ? Math.round((feedbackCount?.length || 0) / totalMembersCount * 100) : 0 },
      { activity: 'Events', rate: 0 } // Placeholder for events
    ]

    // 8. Weekly Activity - simplified version
    const weeklyActivity = []
    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']

    for (let i = 6; i >= 0; i--) {
      const dayStart = new Date(now)
      dayStart.setDate(now.getDate() - i)
      dayStart.setHours(0, 0, 0, 0)

      const dayEnd = new Date(dayStart)
      dayEnd.setHours(23, 59, 59, 999)

      // Count activities (polls, complaints, feedback) for this day
      const [pollsCount, complaintsCount, feedbackCount] = await Promise.all([
        supabase.from('polls').select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
          .gte('created_at', dayStart.toISOString())
          .lte('created_at', dayEnd.toISOString()),
        supabase.from('complaints').select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
          .gte('created_at', dayStart.toISOString())
          .lte('created_at', dayEnd.toISOString()),
        supabase.from('feedback').select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
          .gte('created_at', dayStart.toISOString())
          .lte('created_at', dayEnd.toISOString())
      ])

      const totalActivity = (pollsCount.count || 0) + (complaintsCount.count || 0) + (feedbackCount.count || 0)

      weeklyActivity.push({
        day: daysOfWeek[dayStart.getDay()],
        active: totalActivity
      })
    }

    // 9. Overall Participation Rate
    const participationRate = participationRates.reduce((sum, item) => sum + item.rate, 0) / participationRates.length

    const analyticsData = {
      memberGrowth: memberGrowth || [],
      engagementTrend: engagementTrend || [],
      complaintsByCategory: complaintsByCategoryFormatted,
      sentimentAnalysis: [], // Placeholder for sentiment analysis over time
      participationRates,
      weeklyActivity: weeklyActivity || [],
      totalMembers: totalMembers?.length || 0,
      activeMembers: activeMembers?.length || 0,
      totalPolls: totalPolls?.length || 0,
      totalComplaints: totalComplaints?.length || 0,
      averageSentiment,
      participationRate
    }

    return NextResponse.json(analyticsData)
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

function getCategoryColor(category: string): string {
  const colors: { [key: string]: string } = {
    maintenance: '#3B82F6',
    governance: '#EF4444',
    other: '#10B981',
    facilities: '#F59E0B',
    security: '#8B5CF6',
    services: '#06B6D4'
  }
  return colors[category] || '#6B7280'
}


// app/api/admin/audit-log/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user and check if admin
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || user.community_members?.[0]?.role !== 'admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    // Fetch audit log
    const { data: logs, error } = await supabase
      .from('audit_log')
      .select(`
        id,
        action_type,
        entity_type,
        entity_id,
        details,
        created_at,
        ip_address,
        users(name, email)
      `)
      .eq('community_id', communityId)
      .order('created_at', { ascending: false })
      .limit(100)

    if (error) {
      console.error('Database error:', error)
      return NextResponse.json({ error: 'Failed to fetch audit log' }, { status: 500 })
    }

    const formattedLogs = logs?.map(log => ({
      id: log.id,
      action_type: log.action_type,
      entity_type: log.entity_type,
      entity_id: log.entity_id,
      user_name: (log.users as any)?.name || 'System',
      details: log.details,
      created_at: log.created_at,
      ip_address: log.ip_address
    })) || []

    return NextResponse.json({ logs: formattedLogs })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}



// @/app/api/admin/dashboard/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user and check if admin
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || user.community_members?.[0]?.role !== 'Admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    // Get dashboard stats in parallel
    const [
      { count: totalMembers },
      { count: activePolls },
      { count: totalPolls },
      { count: pendingComplaints },
      { count: totalComplaints },
      { count: resolvedComplaints },
      { count: totalFeedback },
      { data: recentComplaints },
      { data: recentPolls },
      { data: recentFeedback },
      { data: feedbackRatings }
    ] = await Promise.all([
      // Total members
      supabase
        .from('community_members')
        .select('*', { count: 'exact', head: true })
        .eq('community_id', communityId),

      // Active polls (deadline is null or in the future)
      supabase
        .from('polls')
        .select('*', { count: 'exact', head: true })
        .eq('community_id', communityId)
        .or(`deadline.is.null,deadline.gt.${new Date().toISOString()}`),

      // Total polls
      supabase
        .from('polls')
        .select('*', { count: 'exact', head: true })
        .eq('community_id', communityId),

      // Pending complaints
      supabase
        .from('complaints')
        .select('*', { count: 'exact', head: true })
        .eq('community_id', communityId)
        .eq('status', 'pending'),

      // Total complaints
      supabase
        .from('complaints')
        .select('*', { count: 'exact', head: true })
        .eq('community_id', communityId),

      // Resolved complaints
      supabase
        .from('complaints')
        .select('*', { count: 'exact', head: true })
        .eq('community_id', communityId)
        .eq('status', 'resolved'),

      // Total feedback
      supabase
        .from('feedback')
        .select('*', { count: 'exact', head: true })
        .eq('community_id', communityId),

      // Recent complaints
      supabase
        .from('complaints')
        .select(`
          id, title, status, sentiment, created_at,
          users!inner(name, email)
        `)
        .eq('community_id', communityId)
        .order('created_at', { ascending: false })
        .limit(5),

      // Recent polls
      supabase
        .from('polls')
        .select('id, title, created_at')
        .eq('community_id', communityId)
        .order('created_at', { ascending: false })
        .limit(3),

      // Recent feedback
      supabase
        .from('feedback')
        .select(`
          id, rating, comment, created_at,
          users!inner(name, email)
        `)
        .eq('community_id', communityId)
        .order('created_at', { ascending: false })
        .limit(3),

      // Feedback ratings for average
      supabase
        .from('feedback')
        .select('rating')
        .eq('community_id', communityId)
    ])

    // Calculate averages
    const averageRating = feedbackRatings && feedbackRatings.length > 0
      ? feedbackRatings.reduce((sum, f) => sum + f.rating, 0) / feedbackRatings.length
      : 0

    // Get new members this month
    const oneMonthAgo = new Date()
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)

    const { count: newMembersThisMonth } = await supabase
      .from('community_members')
      .select('*', { count: 'exact', head: true })
      .eq('community_id', communityId)
      .gte('joined_at', oneMonthAgo.toISOString())

    // Build activity feed
    const recentActivity: { id: any; type: string; title: any; user: any; timestamp: any; status?: any; priority?: string }[] = []

    // Add complaints to activity
    recentComplaints?.forEach(complaint => {
      const userArray = Array.isArray(complaint.users) ? complaint.users : [complaint.users]
      recentActivity.push({
        id: complaint.id,
        type: 'complaint',
        title: complaint.title,
        user: userArray[0]?.name || 'Anonymous',
        timestamp: complaint.created_at,
        status: complaint.status,
        priority: complaint.sentiment < -0.5 ? 'high' : complaint.sentiment < 0 ? 'medium' : 'low'
      })
    })

    // Add polls to activity
    recentPolls?.forEach(poll => {
      recentActivity.push({
        id: poll.id,
        type: 'poll',
        title: `Poll created: ${poll.title}`,
        user: 'Admin',
        timestamp: poll.created_at,
        status: 'active'
      })
    })

    // Add feedback to activity
    recentFeedback?.forEach(feedback => {
      const userArray = Array.isArray(feedback.users) ? feedback.users : [feedback.users]
      recentActivity.push({
        id: feedback.id,
        type: 'feedback',
        title: `${feedback.rating}-star feedback${feedback.comment ? ': ' + feedback.comment.substring(0, 50) + '...' : ''}`,
        user: userArray[0]?.name || 'Anonymous',
        timestamp: feedback.created_at
      })
    })

    // Sort by timestamp
    recentActivity.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())

    // Member growth chart data (last 6 months)
    const memberGrowthData = []
    for (let i = 5; i >= 0; i--) {
      const date = new Date()
      date.setMonth(date.getMonth() - i)
      const monthStart = new Date(date.getFullYear(), date.getMonth(), 1)
      const monthEnd = new Date(date.getFullYear(), date.getMonth() + 1, 0)

      const { count } = await supabase
        .from('community_members')
        .select('*', { count: 'exact', head: true })
        .eq('community_id', communityId)
        .gte('joined_at', monthStart.toISOString())
        .lte('joined_at', monthEnd.toISOString())

      memberGrowthData.push({
        name: monthStart.toLocaleDateString('en-US', { month: 'short' }),
        value: count || 0
      })
    }

    const dashboardData = {
      stats: {
        totalMembers: totalMembers || 0,
        activePolls: activePolls || 0,
        totalPolls: totalPolls || 0,
        pendingComplaints: pendingComplaints || 0,
        totalComplaints: totalComplaints || 0,
        resolvedComplaints: resolvedComplaints || 0,
        totalFeedback: totalFeedback || 0,
        averageRating: parseFloat(averageRating.toFixed(1)),
        newMembersThisMonth: newMembersThisMonth || 0
      },
      recentActivity: recentActivity.slice(0, 10),
      memberGrowthData
    }

    return NextResponse.json(dashboardData)
  } catch (error) {
    console.error('Dashboard API error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}


// @/app/api/admin/feedback-form/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user's community
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || !user.community_members?.[0]) {
      return NextResponse.json({ error: 'Community membership required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    // Get active feedback form template
    const { data: template, error } = await supabase
      .from('feedback_form_templates')
      .select('*')
      .eq('community_id', communityId)
      .eq('is_active', true)
      .single()

    if (error && error.code !== 'PGRST116') { // PGRST116 is "not found"
      console.error('Database error:', error)
      return NextResponse.json({ error: 'Failed to fetch template' }, { status: 500 })
    }

    if (!template) {
      // Return default template if none exists
      const defaultTemplate = {
        id: '',
        title: 'Client Satisfaction Form',
        subtitle: 'Your feedback helps us improve our services',
        fields: [
          {
            id: 'rating',
            type: 'rating',
            label: 'How satisfied are you with our service?',
            required: true,
            options: {
              max: 5,
              emojis: ['😡', '😞', '😐', '😊', '😄'],
              labels: ['Very Poor', 'Poor', 'Good', 'Very Good', 'Excellent']
            }
          },
          {
            id: 'comment',
            type: 'textarea',
            label: 'Comments/Suggestions/Feedback?',
            required: false,
            placeholder: 'Please share your thoughts...'
          }
        ]
      }
      return NextResponse.json({ template: defaultTemplate })
    }

    return NextResponse.json({ template })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { id, title, subtitle, fields } = body

    // Get user's community
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || !user.community_members?.[0]) {
      return NextResponse.json({ error: 'Community membership required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    const templateData = {
      community_id: communityId,
      title: title || 'Client Satisfaction Form',
      subtitle: subtitle || 'Your feedback helps us improve our services',
      fields: fields || [],
      is_active: true,
      updated_at: new Date().toISOString()
    }

    let result
    if (id) {
      // Update existing template
      const { data, error } = await supabase
        .from('feedback_form_templates')
        .update(templateData)
        .eq('id', id)
        .eq('community_id', communityId)
        .select()
        .single()

      if (error) {
        console.error('Update error:', error)
        return NextResponse.json({ error: 'Failed to update template' }, { status: 500 })
      }
      result = data
    } else {
      // Create new template
      const { data, error } = await supabase
        .from('feedback_form_templates')
        .insert(templateData)
        .select()
        .single()

      if (error) {
        console.error('Insert error:', error)
        return NextResponse.json({ error: 'Failed to create template' }, { status: 500 })
      }
      result = data
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: communityId,
        user_id: user.id,
        action_type: id ? 'update_feedback_template' : 'create_feedback_template',
        entity_type: 'feedback_form_template',
        entity_id: result.id,
        details: { title: result.title }
      })

    return NextResponse.json({ template: result, message: 'Template saved successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}




// @/app/api/admin/members/[id]/route.ts
import { getServerSession } from "next-auth"
import { NextRequest, NextResponse } from "next/server"
import { createClient } from '@supabase/supabase-js'
import { authOptions } from "@/app/api/auth/[...nextauth]/route"

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions)
   
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { id } = params
    const body = await request.json()
    const { role } = body

    // Get admin user
    const { data: adminUser, error: adminError } = await supabase
      .from('users')
      .select(`
        id,
        community_members!inner(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (adminError || !adminUser || !adminUser.community_members?.[0] || adminUser.community_members[0].role !== 'admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = adminUser.community_members[0].community_id

    // Update member role
    const { error } = await supabase
      .from('community_members')
      .update({ role })
      .eq('user_id', id)
      .eq('community_id', communityId)

    if (error) {
      console.error('Update error:', error)
      return NextResponse.json({ error: 'Failed to update member role' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: communityId,
        user_id: adminUser.id,
        action_type: 'update_member_role',
        entity_type: 'user',
        entity_id: id,
        details: { new_role: role }
      })

    return NextResponse.json({ message: 'Member role updated successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions)
   
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { id } = params

    // Get admin user
    const { data: adminUser, error: adminError } = await supabase
      .from('users')
      .select(`
        id,
        community_members!inner(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (adminError || !adminUser || !adminUser.community_members?.[0] || adminUser.community_members[0].role !== 'admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = adminUser.community_members[0].community_id

    // Remove member from community
    const { error } = await supabase
      .from('community_members')
      .delete()
      .eq('user_id', id)
      .eq('community_id', communityId)

    if (error) {
      console.error('Delete error:', error)
      return NextResponse.json({ error: 'Failed to remove member' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: communityId,
        user_id: adminUser.id,
        action_type: 'remove_member',
        entity_type: 'user',
        entity_id: id,
        details: {}
      })

    return NextResponse.json({ message: 'Member removed successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// @/app/api/admin/members/route.ts
import { getServerSession } from "next-auth"
import { NextRequest, NextResponse } from "next/server"
import { createClient } from '@supabase/supabase-js'
import { authOptions } from "@/app/api/auth/[...nextauth]/route"

// Use service role client to bypass RLS for admin operations
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('Session found:', session.user.email)

    // Check for regenerate query param
    const { searchParams } = new URL(request.url)
    const regenerate = searchParams.get('regenerate') === 'true'

    // First, let's check if the user exists using admin client
    const { data: userData, error: userError } = await supabaseAdmin
      .from('users')
      .select('id, email, name, role')
      .eq('email', session.user.email)
      .single()

    let userId = userData?.id

    // If user doesn't exist, create them using admin client
    if (userError && userError.code === 'PGRST116') { // No rows returned
      console.log('User not found, creating new user...')

      const { data: newUser, error: createError } = await supabaseAdmin
        .from('users')
        .insert({
          email: session.user.email,
          name: session.user.name || session.user.email.split('@')[0],
          role: 'Admin',
          email_verified: new Date().toISOString() // Set email as verified since they're logged in via OAuth
        })
        .select('id, email, name, role')
        .single()

      if (createError) {
        console.error('Failed to create user:', createError)
        return NextResponse.json({
          error: 'Failed to create user',
          details: createError.message
        }, { status: 500 })
      }

      userId = newUser.id
      console.log('Created new user:', newUser)
    } else if (userError) {
      console.error('User fetch error:', userError)
      return NextResponse.json({
        error: 'Failed to fetch user',
        details: userError.message
      }, { status: 500 })
    } else {
      console.log('User found:', userData)
    }

    // Check if user has community membership
    const { data: communityData, error: communityError } = await supabaseAdmin
      .from('community_members')
      .select(`
        community_id, 
        role,
        communities!inner(id, name, code)
      `)
      .eq('user_id', userId)
      .single()

    let communityId = null
    let communityInfo = null

    if (communityError && communityError.code === 'PGRST116') { // No rows returned
      console.log('No community membership found, creating community...')

      // Generate unique community code
      let communityCode = ''
      let counter = 1
      
      while (true) {
        const testCode = `ADMIN${String(counter).padStart(3, '0')}`
        const { data: existing } = await supabaseAdmin
          .from('communities')
          .select('id')
          .eq('code', testCode)
          .single()
        
        if (!existing) {
          communityCode = testCode
          break
        }
        counter++
      }

      // Create new community
      const { data: newCommunity, error: communityCreateError } = await supabaseAdmin
        .from('communities')
        .insert({
          name: `${session.user.name || 'Admin'}'s Community`,
          code: communityCode
        })
        .select('id, name, code')
        .single()

      if (communityCreateError) {
        console.error('Failed to create community:', communityCreateError)
        return NextResponse.json({
          error: 'Failed to create community',
          details: communityCreateError.message
        }, { status: 500 })
      }

      communityId = newCommunity.id
      communityInfo = newCommunity

      // Add user as admin member
      const { error: memberError } = await supabaseAdmin
        .from('community_members')
        .insert({
          community_id: communityId,
          user_id: userId,
          role: 'Admin'
        })

      if (memberError) {
        console.error('Failed to add user to community:', memberError)
        return NextResponse.json({
          error: 'Failed to add user to community',
          details: memberError.message
        }, { status: 500 })
      }

      console.log('Created new community:', newCommunity)
    } else if (communityError) {
      console.error('Community membership error:', communityError)
      return NextResponse.json({
        error: 'Failed to fetch community membership',
        details: communityError.message
      }, { status: 500 })
    } else {
      communityId = communityData.community_id
      // Handle the communities data properly
      const communitiesData = Array.isArray(communityData.communities)
        ? communityData.communities[0]
        : communityData.communities
      communityInfo = communitiesData
      console.log('Community found:', communityId)
    }

    // Handle regeneration if requested
    if (regenerate && communityInfo) {
      console.log('Regenerating community code')

      // Generate unique community code
      let newCommunityCode = ''
      let counter = 1

      while (true) {
        const testCode = `ADMIN${String(counter).padStart(3, '0')}`
        const { data: existing } = await supabaseAdmin
          .from('communities')
          .select('id')
          .eq('code', testCode)
          .single()

        if (!existing) {
          newCommunityCode = testCode
          break
        }
        counter++
      }

      // Update the community code
      const { error: updateError } = await supabaseAdmin
        .from('communities')
        .update({ code: newCommunityCode })
        .eq('id', communityId)

      if (updateError) {
        console.error('Failed to update community code:', updateError)
        return NextResponse.json({
          error: 'Failed to regenerate community code',
          details: updateError.message
        }, { status: 500 })
      }

      // Update communityInfo with new code
      communityInfo.code = newCommunityCode
      console.log('Community code regenerated to:', newCommunityCode)
    }

    // Fetch all community members
    const { data: members, error: membersError } = await supabaseAdmin
      .from('community_members')
      .select(`
        id,
        user_id,
        role,
        joined_at,
        users!inner(
          id,
          name,
          email,
          updated_at
        )
      `)
      .eq('community_id', communityId)

    if (membersError) {
      console.error('Members fetch error:', membersError)
      return NextResponse.json({
        error: 'Failed to fetch members',
        details: membersError.message,
        communityId: communityId
      }, { status: 500 })
    }

    console.log('Members found:', members?.length || 0)

    // Transform the data with proper type handling
    const formattedMembers = members?.map(member => {
      const user = Array.isArray(member.users) ? member.users[0] : member.users
      return {
        id: user?.id || member.user_id,
        name: user?.name || 'Unknown User',
        email: user?.email || '',
        role: member.role,
        created_at: member.joined_at,
        updated_at: user?.updated_at || null,
        status: 'active'
      }
    }) || []

    // Count admins and members
    const adminCount = formattedMembers.filter(m => m.role === 'Admin').length
    const memberCount = formattedMembers.length

    return NextResponse.json({
      members: formattedMembers,
      community: communityInfo,
      stats: {
        total: memberCount,
        admins: adminCount,
        residents: memberCount - adminCount
      },
      debug: {
        userEmail: session.user.email,
        userId: userId,
        communityId: communityId,
        membersCount: members?.length || 0
      }
    })

  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}


// @/app/api/admin/notifications/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: user } = await supabase
      .from('users')
      .select('id')
      .eq('email', session.user.email)
      .single()

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const { data: notifications, error } = await supabase
      .from('notifications')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(50)

    if (error) {
      console.error('Database error:', error)
      return NextResponse.json({ error: 'Failed to fetch notifications' }, { status: 500 })
    }

    return NextResponse.json({ notifications: notifications || [] })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: user } = await supabase
      .from('users')
      .select('id')
      .eq('email', session.user.email)
      .single()

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const { error } = await supabase
      .from('notifications')
      .update({ is_read: true })
      .eq('user_id', user.id)
      .eq('id', params.id)

    if (error) {
      return NextResponse.json({ error: 'Failed to update notification' }, { status: 500 })
    }

    return NextResponse.json({ message: 'Notification marked as read' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}


// @/app/api/admin/settings/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user and check if admin
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || user.community_members?.[0]?.role !== 'Admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    // Get community settings
    const { data: community, error } = await supabase
      .from('communities')
      .select('*')
      .eq('id', communityId)
      .single()

    if (error) {
      console.error('Database error:', error)
      return NextResponse.json({ error: 'Failed to fetch settings' }, { status: 500 })
    }

    // For now, return basic community info. We can expand this later with more settings
    const settings = {
      name: community.name,
      description: community.description || '',
      code: community.code,
      logo_url: community.logo_url || '',
      // Default settings for features not yet in DB
      allow_guest_access: true,
      require_approval: false,
      auto_archive_polls: true,
      enable_ai_insights: true,
      notification_settings: {
        email_notifications: true,
        push_notifications: true,
        daily_digest: false,
        weekly_summary: true
      },
      ai_settings: {
        sentiment_analysis: true,
        anomaly_detection: true,
        auto_categorization: true,
        chatbot_enabled: true
      }
    }

    return NextResponse.json(settings)
  } catch (error) {
    console.error('Settings API error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { name, description, code } = body

    // Get user and check if admin
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || user.community_members?.[0]?.role !== 'Admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    // Update community settings
    const { data: updatedCommunity, error } = await supabase
      .from('communities')
      .update({
        name,
        description,
        code,
        updated_at: new Date().toISOString()
      })
      .eq('id', communityId)
      .select()
      .single()

    if (error) {
      console.error('Update error:', error)
      return NextResponse.json({ error: 'Failed to update settings' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: communityId,
        user_id: user.id,
        action_type: 'update_community_settings',
        entity_type: 'community',
        entity_id: communityId,
        details: { name, description, code }
      })

    return NextResponse.json({ message: 'Settings updated successfully', community: updatedCommunity })
  } catch (error) {
    console.error('Settings update error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}




// @/app/api/ai/sentiment/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { createHash } from 'crypto'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function POST(request: NextRequest) {
  try {
    const { text } = await request.json()
    
    if (!text) {
      return NextResponse.json({ error: 'Text is required' }, { status: 400 })
    }

    // Create hash of text for caching
    const textHash = createHash('md5').update(text).digest('hex')

    // Check cache first
    const { data: cached } = await supabase
      .from('sentiment_cache')
      .select('sentiment_score, confidence')
      .eq('text_hash', textHash)
      .single()

    if (cached) {
      return NextResponse.json({
        sentiment: cached.sentiment_score,
        confidence: cached.confidence,
        cached: true
      })
    }

    // Mock sentiment analysis - replace with actual AI service
    const sentiment = analyzeSentiment(text)
    const confidence = 0.85

    // Cache result
    await supabase
      .from('sentiment_cache')
      .insert({
        text_hash: textHash,
        sentiment_score: sentiment,
        confidence
      })

    return NextResponse.json({
      sentiment,
      confidence,
      cached: false
    })
  } catch (error) {
    console.error('Sentiment analysis error:', error)
    return NextResponse.json({ error: 'Failed to analyze sentiment' }, { status: 500 })
  }
}

function analyzeSentiment(text: string): number {
  // Simple sentiment analysis - replace with actual AI model
  const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'fantastic', 'love', 'like', 'happy', 'satisfied']
  const negativeWords = ['bad', 'terrible', 'awful', 'horrible', 'hate', 'dislike', 'angry', 'frustrated', 'disappointed', 'unsatisfied']
  
  const words = text.toLowerCase().split(/\s+/)
  let score = 0
  
  words.forEach(word => {
    if (positiveWords.some(pw => word.includes(pw))) score += 1
    if (negativeWords.some(nw => word.includes(nw))) score -= 1
  })
  
  // Normalize to -1 to 1 range
  return Math.max(-1, Math.min(1, score / Math.max(1, words.length / 10)))
}





// @/app/api/ai/classify/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { createHash } from 'crypto'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function POST(request: NextRequest) {
  try {
    const { text } = await request.json()
    
    if (!text) {
      return NextResponse.json({ error: 'Text is required' }, { status: 400 })
    }

    const textHash = createHash('md5').update(text).digest('hex')

    // Check cache
    const { data: cached } = await supabase
      .from('topic_cache')
      .select('predicted_category, confidence')
      .eq('text_hash', textHash)
      .single()

    if (cached) {
      return NextResponse.json({
        category: cached.predicted_category,
        confidence: cached.confidence,
        cached: true
      })
    }

    // Mock classification
    const category = classifyText(text)
    const confidence = 0.82

    // Cache result
    await supabase
      .from('topic_cache')
      .insert({
        text_hash: textHash,
        predicted_category: category,
        confidence
      })

    return NextResponse.json({
      category,
      confidence,
      cached: false
    })
  } catch (error) {
    console.error('Classification error:', error)
    return NextResponse.json({ error: 'Failed to classify text' }, { status: 500 })
  }
}

function classifyText(text: string): string {
  const lowerText = text.toLowerCase()
  
  const maintenanceKeywords = ['repair', 'fix', 'broken', 'maintenance', 'water', 'electricity', 'road', 'light', 'facility']
  const governanceKeywords = ['policy', 'rule', 'meeting', 'decision', 'budget', 'administration', 'governance', 'management']
  
  const maintenanceScore = maintenanceKeywords.reduce((score, keyword) => 
    score + (lowerText.includes(keyword) ? 1 : 0), 0)
  const governanceScore = governanceKeywords.reduce((score, keyword) => 
    score + (lowerText.includes(keyword) ? 1 : 0), 0)
  
  if (maintenanceScore > governanceScore && maintenanceScore > 0) return 'maintenance'
  if (governanceScore > 0) return 'governance'
  return 'other'
}



// @/app/api/ai/chat/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'
import { nanoid } from 'nanoid'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()
    const { message, history } = await request.json()

    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 })
    }

    // Get or create session
    let sessionId = nanoid()
    let userId = null

    if (session?.user?.email) {
      const { data: user } = await supabase
        .from('users')
        .select('id')
        .eq('email', session.user.email)
        .single()
      
      if (user) {
        userId = user.id
        
        // Get existing session or create new one
        const { data: chatSession } = await supabase
          .from('chat_sessions')
          .select('id')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false })
          .limit(1)
          .single()

        if (chatSession) {
          sessionId = chatSession.id
        } else {
          const { data: newSession } = await supabase
            .from('chat_sessions')
            .insert({
              user_id: user.id,
              session_token: sessionId
            })
            .select()
            .single()
          
          if (newSession) sessionId = newSession.id
        }
      }
    }

    // Generate response using mock AI - replace with actual AI service
    const response = await generateChatResponse(message, history)

    // Store messages if user is logged in
    if (userId) {
      await supabase.from('chat_messages').insert([
        {
          session_id: sessionId,
          role: 'user',
          content: message
        },
        {
          session_id: sessionId,
          role: 'assistant',
          content: response
        }
      ])
    }

    return NextResponse.json({ response })
  } catch (error) {
    console.error('Chat error:', error)
    return NextResponse.json({ error: 'Failed to process message' }, { status: 500 })
  }
}

async function generateChatResponse(message: string, history: any[]): Promise<string> {
  // Mock AI response - replace with actual AI service (OpenAI, etc.)
  const lowerMessage = message.toLowerCase()
  
  if (lowerMessage.includes('complaint') || lowerMessage.includes('submit')) {
    return "To submit a complaint, go to the 'Complaints' section in your dashboard and click 'Submit Complaint'. You can categorize your complaint as Maintenance, Governance, or Other, and provide detailed information about the issue."
  }
  
  if (lowerMessage.includes('poll') || lowerMessage.includes('vote')) {
    return "You can participate in community polls by visiting the 'Voting' section. Active polls will show voting options, and you can cast your vote if you're a registered community member. Results are displayed in real-time charts."
  }
  
  if (lowerMessage.includes('admin') || lowerMessage.includes('administrator')) {
    return "Community administrators manage polls, review complaints, and oversee community activities. You can identify admins by their role badge, and they have access to additional management features like analytics and member management."
  }
  
  if (lowerMessage.includes('feedback')) {
    return "You can share feedback about the community through the 'Feedback' section. Rate your experience from 1-5 stars and optionally add comments. Your feedback helps improve community services and engagement."
  }
  
  return "I'm here to help with community-related questions! You can ask me about submitting complaints, voting on polls, providing feedback, or general community information. What would you like to know?"
}




// app/api/ai/anomaly/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

interface DataPoint {
  community_id: string
  poll_id: string
  votes_per_hour: number
  timestamp: string
}

interface Anomaly {
  community_id: string
  entity_id: string
  type: string
  severity: 'low' | 'medium' | 'high'
  details: {
    votes_per_hour: number
    expected_range: string
    timestamp: string
  }
}

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function POST(request: NextRequest) {
  try {
    const { entity_type, data_points, threshold = 0.7 } = await request.json()
    
    if (!entity_type || !data_points) {
      return NextResponse.json({ error: 'Entity type and data points required' }, { status: 400 })
    }

    // Mock anomaly detection
    const anomalies = detectAnomalies(entity_type, data_points as DataPoint[], threshold)
    
    // Store significant anomalies
    for (const anomaly of anomalies.filter(a => a.severity !== 'low')) {
      await supabase
        .from('anomaly_flags')
        .insert({
          community_id: anomaly.community_id,
          entity_type,
          entity_id: anomaly.entity_id,
          anomaly_type: anomaly.type,
          severity: anomaly.severity,
          details: anomaly.details
        })
    }

    return NextResponse.json({ 
      anomalies,
      total_flagged: anomalies.length 
    })
  } catch (error) {
    console.error('Anomaly detection error:', error)
    return NextResponse.json({ error: 'Failed to detect anomalies' }, { status: 500 })
  }
}

function detectAnomalies(entityType: string, dataPoints: DataPoint[], threshold: number): Anomaly[] {
  const anomalies: Anomaly[] = []
  
  if (entityType === 'poll_voting') {
    // Check for unusual voting patterns
    dataPoints.forEach((point) => {
      if (point.votes_per_hour > 50) { // Unusual spike
        anomalies.push({
          community_id: point.community_id,
          entity_id: point.poll_id,
          type: 'unusual_voting_pattern',
          severity: point.votes_per_hour > 100 ? 'high' : 'medium',
          details: { 
            votes_per_hour: point.votes_per_hour, 
            expected_range: '5-25',
            timestamp: point.timestamp 
          }
        })
      }
    })
  }
  
  if (entityType === 'complaint_sentiment') {
    // Check for sentiment anomalies (assuming different data structure)
    dataPoints.forEach((point) => {
      // This would need proper typing based on actual complaint data structure
      if ('sentiment_score' in point && typeof point.sentiment_score === 'number') {
        if (point.sentiment_score < -0.8) {
          anomalies.push({
            community_id: point.community_id,
            entity_id: point.poll_id, // This would be complaint_id for complaints
            type: 'extreme_negative_sentiment',
            severity: point.sentiment_score < -0.9 ? 'high' : 'medium',
            details: {
              votes_per_hour: 0, // This structure should match the expected details
              expected_range: '-0.3 to 0.3',
              timestamp: point.timestamp
            }
          })
        }
      }
    })
  }
  
  return anomalies
}



// @/app/api/auth/[...nextauth]/route.ts
import NextAuth, { NextAuthOptions } from 'next-auth'
import CredentialsProvider from 'next-auth/providers/credentials'
import GoogleProvider from 'next-auth/providers/google'
import { createClient } from '@supabase/supabase-js'
import bcrypt from 'bcryptjs'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export const authOptions: NextAuthOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    CredentialsProvider({
      name: 'credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        try {
          // Find user in database
          const { data: user, error } = await supabase
            .from('users')
            .select('*')
            .eq('email', credentials.email)
            .single()

          if (error || !user) {
            console.log('User not found:', credentials.email)
            return null
          }

          // Check if email is verified
          if (!user.email_verified) {
            throw new Error('Please verify your email before signing in')
          }

          // Check if user has a password (not OAuth only)
          if (!user.hashed_password) {
            throw new Error('Please sign in with your OAuth provider')
          }

          // Verify password
          const isPasswordValid = await bcrypt.compare(credentials.password, user.hashed_password)
          
          if (!isPasswordValid) {
            console.log('Invalid password for user:', credentials.email)
            return null
          }

          return {
            id: user.id,
            name: user.name,
            email: user.email,
            image: user.image
          }
        } catch (error) {
          console.error('Auth error:', error)
          throw error
        }
      }
    })
  ],
  
  callbacks: {
    async signIn({ user, account, profile }) {
      if (account?.provider === 'google') {
        try {
          // Check if user already exists
          const { data: existingUser, error: checkError } = await supabase
            .from('users')
            .select('*')
            .eq('email', user.email!)
            .single()

          if (existingUser) {
            user.id = existingUser.id
            return true
          } else {
            // Create new user for Google OAuth
            const { data: newUser, error: userError } = await supabase
              .from('users')
              .insert([
                {
                  name: user.name,
                  email: user.email,
                  email_verified: new Date().toISOString(),
                  image: user.image,
                  role: 'Guest' // Default role for new OAuth users
                }
              ])
              .select('id')
              .single()

            if (userError || !newUser) {
              console.error('Failed to create user:', userError)
              return false
            }

            user.id = newUser.id
            return true
          }
        } catch (error) {
          console.error('Google sign-in error:', error)
          return false
        }
      }
      
      return true
    },

    async jwt({ token, user, account, trigger }) {
      // On signin, add user ID to token
      if (user) {
        token.id = user.id
        token.email = user.email
        token.name = user.name
        token.picture = user.image
      }

      // Fetch user role from database
      if (token.id) {
        try {
          // First, check if user is a community member (has specific role)
          const { data: communityMember } = await supabase
            .from('community_members')
            .select('role')
            .eq('user_id', token.id as string)
            .single()

          if (communityMember) {
            token.role = communityMember.role
          } else {
            // Fallback to user table role
            const { data: userData } = await supabase
              .from('users')
              .select('role')
              .eq('id', token.id as string)
              .single()

            token.role = userData?.role || 'Guest'
          }
        } catch (error) {
          console.error('Error fetching user role:', error)
          token.role = 'Guest'
        }
      }

      // Force refresh token data on update
      if (trigger === 'update') {
        const { data: userData } = await supabase
          .from('users')
          .select('id, name, email, image, role')
          .eq('id', token.id as string)
          .single()

        if (userData) {
          token.name = userData.name
          token.email = userData.email
          token.picture = userData.image
          token.role = userData.role
        }

        // Re-fetch community role on update
        try {
          const { data: communityMember } = await supabase
            .from('community_members')
            .select('role')
            .eq('user_id', token.id as string)
            .single()

          if (communityMember) {
            token.role = communityMember.role
          }
        } catch (error) {
          console.error('Error re-fetching user role:', error)
        }
      }

      return token
    },

    async session({ session, token }) {
      if (token && session.user) {
        session.user.id = token.id as string
        session.user.email = token.email as string
        session.user.name = token.name as string
        session.user.image = token.picture as string
        session.user.role = token.role as string
      }
      return session
    }
  },

  pages: {
    signIn: '/auth/login',
    error: '/auth/error',
  },

  session: {
    strategy: 'jwt',
    maxAge: 30 * 24 * 60 * 60, // 30 days
    updateAge: 24 * 60 * 60, // 24 hours - refresh session every day
  },

  jwt: {
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },

  cookies: {
    sessionToken: {
      name: `next-auth.session-token`,
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: process.env.NODE_ENV === 'production',
        maxAge: 30 * 24 * 60 * 60 // 30 days
      }
    },
    csrfToken: {
      name: `next-auth.csrf-token`,
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: process.env.NODE_ENV === 'production',
      }
    },
  },

  events: {
    async signIn({ user, account, isNewUser }) {
      console.log(`User ${user.email} signed in with ${account?.provider}`)
    },
    async signOut({ token }) {
      console.log(`User ${token?.email} signed out`)
    },
    async createUser({ user }) {
      console.log(`New user created: ${user.email}`)
    }
  },

  secret: process.env.NEXTAUTH_SECRET,
  debug: process.env.NODE_ENV === 'development',
}

const handler = NextAuth(authOptions)
export { handler as GET, handler as POST }





// @/app/api/complaints/route.ts - Updated
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(request.url)
    const status = searchParams.get('status')
    const category = searchParams.get('category')
    const my = searchParams.get('my') === 'true'

    // Get user's community
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || !user.community_members?.[0]) {
      return NextResponse.json({ complaints: [] })
    }

    const communityId = user.community_members[0].community_id
    
    // Build query
    let query = supabase
      .from('complaints')
      .select(`
        id,
        title,
        description,
        category,
        status,
        priority,
        sentiment,
        created_at,
        updated_at,
        users(name, email)
      `)
      .eq('community_id', communityId)
      .order('created_at', { ascending: false })

    // Apply filters
    if (status) {
      query = query.eq('status', status)
    }
    
    if (category) {
      query = query.eq('category', category)
    }
    
    if (my) {
      query = query.eq('user_id', user.id)
    }

    const { data: complaints, error } = await query

    if (error) {
      console.error('Database error:', error)
      return NextResponse.json({ error: 'Failed to fetch complaints' }, { status: 500 })
    }

    return NextResponse.json({ complaints: complaints || [] })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, description, category } = body

    if (!title || !description) {
      return NextResponse.json({ 
        error: 'Title and description are required' 
      }, { status: 400 })
    }

    // Get user
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || !user.community_members?.[0]) {
      return NextResponse.json({ error: 'Community membership required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    // Analyze sentiment (mock for now - replace with actual AI service)
    let sentiment = 0
    try {
      const sentimentResponse = await fetch(`${process.env.NEXTAUTH_URL}/api/ai/sentiment`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: `${title} ${description}` })
      })
      
      if (sentimentResponse.ok) {
        const sentimentData = await sentimentResponse.json()
        sentiment = sentimentData.sentiment || 0
      }
    } catch (error) {
      console.error('Sentiment analysis failed:', error)
    }

    // Create complaint
    const { data: complaint, error: complaintError } = await supabase
      .from('complaints')
      .insert({
        community_id: communityId,
        user_id: user.id,
        title,
        description,
        category: category || 'other',
        status: 'pending',
        priority: 0,
        sentiment
      })
      .select()
      .single()

    if (complaintError) {
      console.error('Complaint creation error:', complaintError)
      return NextResponse.json({ error: 'Failed to create complaint' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: communityId,
        user_id: user.id,
        action_type: 'create_complaint',
        entity_type: 'complaint',
        entity_id: complaint.id,
        details: { title, category }
      })

    return NextResponse.json({ complaint, message: 'Complaint submitted successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}


// app/api/complaints/[id]/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { id } = params

    // Fetch complaint with user details
    const { data: complaint, error } = await supabase
      .from('complaints')
      .select(`
        id,
        title,
        description,
        category,
        status,
        priority,
        sentiment,
        created_at,
        updated_at,
        users(name, email)
      `)
      .eq('id', id)
      .single()

    if (error || !complaint) {
      return NextResponse.json({ error: 'Complaint not found' }, { status: 404 })
    }

    return NextResponse.json({ complaint })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { id } = params
    const body = await request.json()

    // First get the complaint to find its community
    const { data: complaint } = await supabase
      .from('complaints')
      .select('community_id')
      .eq('id', id)
      .single()

    if (!complaint) {
      return NextResponse.json({ error: 'Complaint not found' }, { status: 404 })
    }

    // Get user
    const { data: user } = await supabase
      .from('users')
      .select('id, role')
      .eq('email', session.user.email)
      .single()

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    // Check if user is admin in the complaint's community
    const { data: membership } = await supabase
      .from('community_members')
      .select('role')
      .eq('user_id', user.id)
      .eq('community_id', complaint.community_id)
      .single()

    // Check role: prefer community role, fallback to user role
    const userRole = membership?.role || user.role
    if (userRole !== 'admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    // Update complaint
    const { error } = await supabase
      .from('complaints')
      .update(body)
      .eq('id', id)

    if (error) {
      console.error('Update error:', error)
      return NextResponse.json({ error: 'Failed to update complaint' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: complaint.community_id,
        user_id: user.id,
        action_type: 'update_complaint',
        entity_type: 'complaint',
        entity_id: id,
        details: body
      })

    return NextResponse.json({ message: 'Complaint updated successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}


// @/app/api/debug/email/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { EmailVerificationService } from '@/lib/email-verification'

export async function POST(request: NextRequest) {
  // Only allow in development mode
  if (process.env.NODE_ENV === 'production') {
    return NextResponse.json({ message: 'Debug endpoint not available in production' }, { status: 404 })
  }

  try {
    const { email } = await request.json()

    if (!email) {
      return NextResponse.json({ error: 'Email is required' }, { status: 400 })
    }

    console.log('=== EMAIL DEBUG START ===')
    console.log('Target email:', email)
    console.log('RESEND_API_KEY exists:', !!process.env.RESEND_API_KEY)
    console.log('RESEND_API_KEY value:', process.env.RESEND_API_KEY?.substring(0, 10) + '...')
    console.log('CONTACT_EMAIL:', process.env.CONTACT_EMAIL)

    // Test email send
    const result = await EmailVerificationService.sendVerificationEmail(email)
    
    console.log('Email send result:', result)
    
    // Get the stored code for debugging
    const storedCode = EmailVerificationService.getStoredCode(email)
    console.log('Stored verification code:', storedCode)
    console.log('=== EMAIL DEBUG END ===')

    return NextResponse.json({
      success: result.success,
      message: result.message,
      debugInfo: {
        storedCode,
        hasResendKey: !!process.env.RESEND_API_KEY,
        environment: process.env.NODE_ENV
      }
    })

  } catch (error) {
    console.error('Debug email error:', error)
    return NextResponse.json({ 
      error: 'Debug failed', 
      details: error instanceof Error ? error.message : 'Unknown error' 
    }, { status: 500 })
  }
}




// app/api/debug/session/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'

export async function GET(request: NextRequest) {
  const session = await getServerSession()
  return NextResponse.json({ session, timestamp: new Date().toISOString() })
}


// @/app/api/debug/user-role/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'
import { authOptions } from '../../auth/[...nextauth]/route'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'No session found' }, { status: 401 })
    }

    // Get user data
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', session.user.email)
      .single()

    // Get community member data
    const { data: memberData, error: memberError } = await supabase
      .from('community_members')
      .select(`
        *,
        communities(*)
      `)
      .eq('user_id', userData?.id)

    // Get all communities (for reference)
    const { data: allCommunities } = await supabase
      .from('communities')
      .select('*')

    const debugInfo = {
      session: {
        user: session.user,
        token: session
      },
      database: {
        user: userData,
        userError,
        communityMembers: memberData,
        memberError,
        allCommunities
      },
      analysis: {
        userHasRole: !!userData?.role,
        userRole: userData?.role,
        isCommunityMember: !!memberData && memberData.length > 0,
        communityRole: memberData?.[0]?.role,
        effectiveRole: memberData?.[0]?.role || userData?.role || 'Guest'
      }
    }

    return NextResponse.json(debugInfo)
  } catch (error) {
    console.error('Debug error:', error)
    return NextResponse.json({ error: error instanceof Error ? error.message : 'An unknown error occurred' }, { status: 500 })
  }
}


// @/app/api/feedback/route.ts - Updated to support new form structure
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(request.url)
    const my = searchParams.get('my') === 'true'
    const limit = parseInt(searchParams.get('limit') || '50')

    // Get user's community
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || !user.community_members?.[0]) {
      return NextResponse.json({ feedback: [] })
    }

    const communityId = user.community_members[0].community_id
    
    // Build query
    let query = supabase
      .from('feedback')
      .select(`
        id,
        rating,
        comment,
        form_data,
        template_id,
        created_at,
        users(name, email)
      `)
      .eq('community_id', communityId)
      .order('created_at', { ascending: false })
      .limit(limit)

    // Apply filters
    if (my) {
      query = query.eq('user_id', user.id)
    }

    const { data: feedback, error } = await query

    if (error) {
      console.error('Database error:', error)
      return NextResponse.json({ error: 'Failed to fetch feedback' }, { status: 500 })
    }

    return NextResponse.json({ feedback: feedback || [] })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { rating, comment, form_data, template_id } = body

    // Validate rating if provided (backwards compatibility)
    if (rating && (rating < 1 || rating > 5)) {
      return NextResponse.json({ 
        error: 'Rating must be between 1 and 5' 
      }, { status: 400 })
    }

    // Get user
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || !user.community_members?.[0]) {
      return NextResponse.json({ error: 'Community membership required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    // Create feedback entry
    const feedbackData: any = {
      community_id: communityId,
      user_id: user.id,
    }

    // Handle new form data structure or legacy rating/comment
    if (form_data && template_id) {
      feedbackData.form_data = form_data
      feedbackData.template_id = template_id
      
      // Extract rating from form data if it exists for backwards compatibility
      const ratingField = Object.values(form_data).find((value: any) => 
        typeof value === 'number' && value >= 1 && value <= 5
      )
      if (ratingField) {
        feedbackData.rating = ratingField
      }
      
      // Extract comment from form data if it exists
      const commentField = Object.values(form_data).find((value: any) => 
        typeof value === 'string' && value.length > 10
      )
      if (commentField) {
        feedbackData.comment = commentField
      }
    } else {
      // Legacy support for old rating/comment structure
      if (rating) feedbackData.rating = rating
      if (comment) feedbackData.comment = comment
    }

    const { data: feedback, error: feedbackError } = await supabase
      .from('feedback')
      .insert(feedbackData)
      .select()
      .single()

    if (feedbackError) {
      console.error('Feedback creation error:', feedbackError)
      return NextResponse.json({ error: 'Failed to submit feedback' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: communityId,
        user_id: user.id,
        action_type: 'create_feedback',
        entity_type: 'feedback',
        entity_id: feedback.id,
        details: { 
          has_form_data: !!form_data,
          has_rating: !!feedbackData.rating,
          has_comment: !!feedbackData.comment 
        }
      })

    return NextResponse.json({ feedback, message: 'Feedback submitted successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}




// @/app/api/me/summary/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'
import { authOptions } from '../../auth/[...nextauth]/route'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    console.log('=== API /me/summary called ===')
    
    const session = await getServerSession(authOptions)
    console.log('Session in API:', session)
    
    if (!session?.user?.email) {
      console.log('No session or email found')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // FIX: Specify which foreign key to use to avoid ambiguity
    const { data: user, error: userError } = await supabase
      .from('users')
      .select(`
        id,
        name,
        email,
        role,
        community_members!community_members_user_id_fkey(
          community_id,
          role,
          communities(name)
        )
      `)
      .eq('email', session.user.email)
      .single()

    console.log('User query result:', user, userError)

    if (!user) {
      console.log('User not found in database')
      return NextResponse.json({ 
        error: 'User not found' 
      }, { status: 404 })
    }

    // Determine the user's role priority: community_member role > user table role
    let userRole = user.role || 'Guest'
    let communityId = null
    let communityName = null

    console.log('User table role:', user.role)
    console.log('Community members:', user.community_members)

    if (user.community_members && user.community_members.length > 0) {
      // User is a community member, use community role
      const communityMember = user.community_members[0]
      userRole = communityMember.role
      communityId = communityMember.community_id
communityName = communityMember.communities[0]?.name
      console.log('Using community role:', userRole)
    } else {
      console.log('No community membership found, using user table role:', userRole)
    }

    let stats = {
      totalMembers: 0,
      activePolls: 0,
      myPolls: 0,
      openComplaints: 0,
      myComplaints: 0,
      myVotes: 0,
      totalFeedback: 0,
      satisfactionIndex: 0
    }

    if (communityId) {
      // Get community-specific stats
      const [
        { count: totalMembers },
        { count: activePolls },
        { count: myPolls },
        { count: openComplaints },
        { count: myComplaints },
        { count: myVotes },
        { count: totalFeedback }
      ] = await Promise.all([
        supabase
          .from('community_members')
          .select('*', { count: 'exact', head: true })
          .eq('community_id', communityId),
        
        supabase
          .from('polls')
          .select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
          .or('deadline.is.null,deadline.gt.' + new Date().toISOString()),
        
        supabase
          .from('polls')
          .select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
          .eq('created_by', user.id),
        
        supabase
          .from('complaints')
          .select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
          .neq('status', 'resolved'),
        
        supabase
          .from('complaints')
          .select('*', { count: 'exact', head: true })
          .eq('user_id', user.id),
        
        supabase
          .from('poll_votes')
          .select('*', { count: 'exact', head: true })
          .eq('voter_id', user.id),
        
        supabase
          .from('feedback')
          .select('*', { count: 'exact', head: true })
          .eq('community_id', communityId)
      ])

      // Calculate satisfaction index from feedback
      const { data: feedbackData } = await supabase
        .from('feedback')
        .select('rating')
        .eq('community_id', communityId)

      const averageRating = feedbackData && feedbackData.length > 0 
        ? feedbackData.reduce((sum: number, f: any) => sum + f.rating, 0) / feedbackData.length
        : 0

      stats = {
        totalMembers: totalMembers || 0,
        activePolls: activePolls || 0,
        myPolls: myPolls || 0,
        openComplaints: openComplaints || 0,
        myComplaints: myComplaints || 0,
        myVotes: myVotes || 0,
        totalFeedback: totalFeedback || 0,
        satisfactionIndex: Number(averageRating.toFixed(1))
      }
    }

    // Get recent activity for dashboard
    let recentActivity: any[] = []
    if (communityId) {
      const { data: activityData } = await supabase
        .from('audit_log')
        .select(`
          id,
          action_type,
          entity_type,
          created_at,
          details,
          users(name)
        `)
        .eq('community_id', communityId)
        .order('created_at', { ascending: false })
        .limit(10)

      recentActivity = activityData || []
    }

    const summary = {
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: userRole, // This is the key fix - using the determined role
        community: communityName || 'No Community'
      },
      stats,
      recentActivity: recentActivity.map((activity: any) => ({
        id: activity.id,
        type: activity.action_type,
        entity: activity.entity_type,
        user: activity.users?.name || 'System',
        timestamp: activity.created_at,
        details: activity.details
      }))
    }

    console.log('Final summary response:', summary)
    return NextResponse.json(summary)
  } catch (error) {
    console.error('Server error in /api/me/summary:', error)
    return NextResponse.json({ error: 'Internal server error', details: error }, { status: 500 })
  }
}





// @/app/api/admin/members/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user and check if admin
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || user.community_members?.[0]?.role !== 'admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    // Fetch all community members with user details
    const { data: members, error } = await supabase
      .from('community_members')
      .select(`
        id,
        role,
        joined_at,
        users(
          id,
          name,
          email,
          created_at,
          updated_at
        )
      `)
      .eq('community_id', communityId)
      .order('joined_at', { ascending: false })

    if (error) {
      console.error('Database error:', error)
      return NextResponse.json({ error: 'Failed to fetch members' }, { status: 500 })
    }

    // Format the data
    const formattedMembers = members?.map(member => ({
      id: member.users.id,
      name: member.users.name || 'Unknown',
      email: member.users.email,
      role: member.role,
      joined_at: member.joined_at,
      last_active: member.users.updated_at, // Using updated_at as last_active proxy
      status: 'active' // You can add actual status logic based on your needs
    })) || []

    return NextResponse.json({ members: formattedMembers })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// @/app/api/admin/members/[id]/route.ts
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { id } = params
    const body = await request.json()
    const { role } = body

    // Get admin user
    const { data: adminUser } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!adminUser || adminUser.community_members?.[0]?.role !== 'admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = adminUser.community_members[0].community_id

    // Update member role
    const { error } = await supabase
      .from('community_members')
      .update({ role })
      .eq('user_id', id)
      .eq('community_id', communityId)

    if (error) {
      console.error('Update error:', error)
      return NextResponse.json({ error: 'Failed to update member role' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: communityId,
        user_id: adminUser.id,
        action_type: 'update_member_role',
        entity_type: 'user',
        entity_id: id,
        details: { new_role: role }
      })

    return NextResponse.json({ message: 'Member role updated successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { id } = params

    // Get admin user
    const { data: adminUser } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!adminUser || adminUser.community_members?.[0]?.role !== 'admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = adminUser.community_members[0].community_id

    // Remove member from community
    const { error } = await supabase
      .from('community_members')
      .delete()
      .eq('user_id', id)
      .eq('community_id', communityId)

    if (error) {
      console.error('Delete error:', error)
      return NextResponse.json({ error: 'Failed to remove member' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: communityId,
        user_id: adminUser.id,
        action_type: 'remove_member',
        entity_type: 'user',
        entity_id: id,
        details: {}
      })

    return NextResponse.json({ message: 'Member removed successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}


// @/app/api/notifications/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: user } = await supabase
      .from('users')
      .select('id')
      .eq('email', session.user.email)
      .single()

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const { data: notifications, error } = await supabase
      .from('notifications')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(50)

    if (error) {
      console.error('Database error:', error)
      return NextResponse.json({ error: 'Failed to fetch notifications' }, { status: 500 })
    }

    return NextResponse.json({ notifications: notifications || [] })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { user_id, type, title, body: notificationBody, link_url } = body

    const { data: notification, error } = await supabase
      .from('notifications')
      .insert({
        user_id,
        type,
        title,
        body: notificationBody,
        link_url,
        is_read: false
      })
      .select()
      .single()

    if (error) {
      console.error('Notification creation error:', error)
      return NextResponse.json({ error: 'Failed to create notification' }, { status: 500 })
    }

    return NextResponse.json({ notification })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}




// @/app/api/polls/[pollId]/respond/route.ts - New API for submitting poll responses
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function POST(
  request: NextRequest,
  { params }: { params: { pollId: string } }
) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { pollId } = params
    const body = await request.json()
    const { responses } = body

    if (!responses || typeof responses !== 'object') {
      return NextResponse.json({ error: 'Invalid response format' }, { status: 400 })
    }

    // Get user
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || !user.community_members?.[0]) {
      return NextResponse.json({ error: 'Community membership required' }, { status: 403 })
    }

    // Get poll details
    const { data: poll } = await supabase
      .from('polls')
      .select('id, deadline, questions, community_id')
      .eq('id', pollId)
      .single()

    if (!poll) {
      return NextResponse.json({ error: 'Poll not found' }, { status: 404 })
    }

    // Check if poll is closed
    if (poll.deadline && new Date(poll.deadline) < new Date()) {
      return NextResponse.json({ error: 'Poll is closed' }, { status: 400 })
    }

    // Check if user belongs to poll's community
    if (poll.community_id !== user.community_members[0].community_id) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }

    // Validate responses against poll questions
    const validationErrors: string[] = []
    
    poll.questions.forEach((question: any) => {
      const response = responses[question.id]
      
      if (question.required && (!response || response.trim() === '')) {
        validationErrors.push(`Question "${question.question}" is required`)
      }
      
      if (question.type === 'radio' && response) {
        if (!question.options?.includes(response)) {
          validationErrors.push(`Invalid option for question "${question.question}"`)
        }
      }
    })

    if (validationErrors.length > 0) {
      return NextResponse.json({
        error: 'Validation errors',
        details: validationErrors
      }, { status: 400 })
    }

    // Check if user has already responded
    const { data: existingResponse } = await supabase
      .from('poll_responses')
      .select('id')
      .eq('poll_id', pollId)
      .eq('respondent_id', user.id)
      .single()

    if (existingResponse) {
      // Update existing response
      const { error: updateError } = await supabase
        .from('poll_responses')
        .update({
          responses: responses,
          submitted_at: new Date().toISOString()
        })
        .eq('id', existingResponse.id)

      if (updateError) {
        console.error('Update error:', updateError)
        return NextResponse.json({ error: 'Failed to update response' }, { status: 500 })
      }

      return NextResponse.json({ message: 'Response updated successfully' })
    } else {
      // Create new response
      const { error: insertError } = await supabase
        .from('poll_responses')
        .insert({
          poll_id: pollId,
          respondent_id: user.id,
          responses: responses
        })

      if (insertError) {
        console.error('Insert error:', insertError)
        return NextResponse.json({ error: 'Failed to submit response' }, { status: 500 })
      }

      return NextResponse.json({ message: 'Response submitted successfully' })
    }
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}



// @/app/api/polls/route.ts - Updated for multi-question polls
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

interface PollQuestion {
  id: string
  type: 'radio' | 'checkbox' | 'text'
  question: string
  options?: string[]
  required: boolean
}

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user's community
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || !user.community_members?.[0]) {
      return NextResponse.json({ polls: [] })
    }

    const communityId = user.community_members[0].community_id

    // Fetch polls with response counts
    const { data: polls, error } = await supabase
      .from('polls')
      .select(`
        id,
        title,
        description,
        deadline,
        created_at,
        is_anonymous,
        questions,
        footer_note,
        complaint_link
      `)
      .eq('community_id', communityId)
      .order('created_at', { ascending: false })

    // Get response counts for each poll
    const pollsWithResponses = await Promise.all(
      (polls || []).map(async (poll) => {
        const { count: responseCount } = await supabase
          .from('poll_responses')
          .select('*', { count: 'exact', head: true })
          .eq('poll_id', poll.id)

        return {
          ...poll,
          response_count: responseCount || 0,
          status: poll.deadline && new Date(poll.deadline) < new Date() ? 'closed' : 'active'
        }
      })
    )

    if (error) {
      console.error('Database error:', error)
      return NextResponse.json({ error: 'Failed to fetch polls' }, { status: 500 })
    }

    return NextResponse.json({ polls: pollsWithResponses })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, description, deadline, is_anonymous, questions, footer_note, complaint_link } = body

    if (!title || !questions || questions.length === 0) {
      return NextResponse.json({
        error: 'Title and at least 1 question are required'
      }, { status: 400 })
    }

    // Validate questions
    const validationErrors: string[] = []
    questions.forEach((question: PollQuestion, index: number) => {
      if (!question.question?.trim()) {
        validationErrors.push(`Question ${index + 1} is required`)
      }
      if (question.type === 'radio' && (!question.options || question.options.length < 2)) {
        validationErrors.push(`Question ${index + 1} must have at least 2 options`)
      }
    })

    if (validationErrors.length > 0) {
      return NextResponse.json({
        error: 'Validation errors',
        details: validationErrors
      }, { status: 400 })
    }

    // Get user and check if admin
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || user.community_members?.[0]?.role !== 'Admin') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    const communityId = user.community_members[0].community_id

    // Create poll
    const { data: poll, error: pollError } = await supabase
      .from('polls')
      .insert({
        community_id: communityId,
        title,
        description,
        deadline: deadline || null,
        is_anonymous: is_anonymous || false,
        is_multi_select: false, // Not used in new system
        questions: questions,
        footer_note: footer_note || null,
        complaint_link: complaint_link || '/main/complaints',
        created_by: user.id
      })
      .select()
      .single()

    if (pollError) {
      console.error('Poll creation error:', pollError)
      return NextResponse.json({ error: 'Failed to create poll' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: communityId,
        user_id: user.id,
        action_type: 'create_poll',
        entity_type: 'poll',
        entity_id: poll.id,
        details: { title, questions_count: questions.length }
      })

    return NextResponse.json({ poll, message: 'Poll created successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

//

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(
  request: NextRequest,
  { params }: { params: { pollId: string } }
) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { pollId } = params

    // Fetch poll with options and vote counts
    const { data: poll, error } = await supabase
      .from('polls')
      .select(`
        id,
        title,
        description,
        deadline,
        created_at,
        is_anonymous,
        is_multi_select,
        poll_options(
          id,
          option_text,
          poll_votes(count)
        )
      `)
      .eq('id', pollId)
      .single()

    if (error || !poll) {
      return NextResponse.json({ error: 'Poll not found' }, { status: 404 })
    }

    // Format the data
    const options = poll.poll_options.map(option => ({
      id: option.id,
      option_text: option.option_text,
      vote_count: option.poll_votes?.length || 0
    }))

    const total_votes = options.reduce((sum, option) => sum + option.vote_count, 0)

    const formattedPoll = {
      ...poll,
      options,
      total_votes,
      status: poll.deadline && new Date(poll.deadline) < new Date() ? 'closed' : 'active'
    }

    return NextResponse.json({ poll: formattedPoll })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { pollId: string } }
) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { pollId } = params
    const body = await request.json()

    // First get the poll to find its community
    const { data: poll } = await supabase
      .from('polls')
      .select('community_id')
      .eq('id', pollId)
      .single()

    if (!poll) {
      return NextResponse.json({ error: 'Poll not found' }, { status: 404 })
    }

    // Get user
    const { data: user } = await supabase
      .from('users')
      .select('id, role')
      .eq('email', session.user.email)
      .single()

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    // Check if user is admin in the poll's community
    const { data: membership } = await supabase
      .from('community_members')
      .select('role')
      .eq('user_id', user.id)
      .eq('community_id', poll.community_id)
      .single()

    // Check if user is global admin or community admin
    if (!(user.role === 'Admin' || membership?.role === 'Admin')) {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    // Update poll
    const { error } = await supabase
      .from('polls')
      .update(body)
      .eq('id', pollId)

    if (error) {
      return NextResponse.json({ error: 'Failed to update poll' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: poll.community_id,
        user_id: user.id,
        action_type: 'update_poll',
        entity_type: 'poll',
        entity_id: pollId,
        details: body
      })

    return NextResponse.json({ message: 'Poll updated successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { pollId: string } }
) {
  try {
    const session = await getServerSession()

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { pollId } = params

    // First get the poll to find its community
    const { data: poll } = await supabase
      .from('polls')
      .select('community_id')
      .eq('id', pollId)
      .single()

    if (!poll) {
      return NextResponse.json({ error: 'Poll not found' }, { status: 404 })
    }

    // Get user
    const { data: user } = await supabase
      .from('users')
      .select('id, role')
      .eq('email', session.user.email)
      .single()

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    // Check if user is admin in the poll's community
    const { data: membership } = await supabase
      .from('community_members')
      .select('role')
      .eq('user_id', user.id)
      .eq('community_id', poll.community_id)
      .single()

    // Check if user is global admin or community admin
    if (!(user.role === 'Admin' || membership?.role === 'Admin')) {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
    }

    // Delete poll (cascade will handle options and votes)
    const { error } = await supabase
      .from('polls')
      .delete()
      .eq('id', pollId)

    if (error) {
      return NextResponse.json({ error: 'Failed to delete poll' }, { status: 500 })
    }

    // Log audit trail
    await supabase
      .from('audit_log')
      .insert({
        community_id: poll.community_id,
        user_id: user.id,
        action_type: 'delete_poll',
        entity_type: 'poll',
        entity_id: pollId,
        details: {}
      })

    return NextResponse.json({ message: 'Poll deleted successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}




// app/api/complaints/[id]/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { createClient } from '@supabase/supabase-js'

const supabaase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function POST(
  request: NextRequest,
  { params }: { params: { pollId: string } }
) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { pollId } = params
    const body = await request.json()
    const { optionIds } = body

    if (!optionIds || !Array.isArray(optionIds) || optionIds.length === 0) {
      return NextResponse.json({ error: 'Option selection required' }, { status: 400 })
    }

    // Get user
    const { data: user } = await supabase
      .from('users')
      .select(`
        id,
        community_members(
          community_id,
          role
        )
      `)
      .eq('email', session.user.email)
      .single()

    if (!user || !user.community_members?.[0]) {
      return NextResponse.json({ error: 'Community membership required' }, { status: 403 })
    }

    // Get poll details
    const { data: poll } = await supabase
      .from('polls')
      .select('id, deadline, is_multi_select, community_id')
      .eq('id', pollId)
      .single()

    if (!poll) {
      return NextResponse.json({ error: 'Poll not found' }, { status: 404 })
    }

    // Check if poll is closed
    if (poll.deadline && new Date(poll.deadline) < new Date()) {
      return NextResponse.json({ error: 'Poll is closed' }, { status: 400 })
    }

    // Check if user belongs to poll's community
    if (poll.community_id !== user.community_members[0].community_id) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }

    // Check multi-select constraint
    if (!poll.is_multi_select && optionIds.length > 1) {
      return NextResponse.json({ error: 'Multiple selections not allowed' }, { status: 400 })
    }

    // Remove existing votes
    await supabase
      .from('poll_votes')
      .delete()
      .eq('poll_id', pollId)
      .eq('voter_id', user.id)

    // Cast new votes
    const votes = optionIds.map((optionId: string) => ({
      poll_id: pollId,
      option_id: optionId,
      voter_id: user.id
    }))

    const { error: voteError } = await supabase
      .from('poll_votes')
      .insert(votes)

    if (voteError) {
      console.error('Vote error:', voteError)
      return NextResponse.json({ error: 'Failed to cast vote' }, { status: 500 })
    }

    return NextResponse.json({ message: 'Vote cast successfully' })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}






COMPONENTS

// @/components/ui/AdminHeader.tsx
'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { useTheme } from '@/components/ThemeContext'
import { useSidebar } from '@/components/ui/SidebarContext'
import { ThemeToggle } from '@/components/ThemeToggle'
import { getSupabaseClient } from '@/lib/supabase'
import { Bell, Search, User, LogOut, Settings, ChevronDown, Mail, Menu } from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'

interface Notification {
  id: string
  type: 'info' | 'warning' | 'success' | 'error'
  title: string
  message: string
  created_at: string
  is_read: boolean
}

export function AdminHeader() {
  const [showNotifications, setShowNotifications] = useState(false)
  const [showUserMenu, setShowUserMenu] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [notifications, setNotifications] = useState<Notification[]>([])
  const { data: session } = useSession()
  const { isDark } = useTheme()
  const { isCollapsed, setIsCollapsed } = useSidebar()
  const router = useRouter()

  const unreadCount = notifications.filter(n => !n.is_read).length

  useEffect(() => {
    if (!session?.user?.email) return

    const supabase = getSupabaseClient()

    const fetchNotifications = async () => {
      try {
        const response = await fetch('/api/admin/notifications')
        const data = await response.json()
        setNotifications(data.notifications || [])
      } catch (error) {
        console.error('Error fetching notifications:', error)
      }
    }

    fetchNotifications()

    // Subscribe to real-time updates
    const channel = supabase
      .channel('header_notifications')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'notifications' }, (payload) => {
        fetchNotifications() // Refetch on any change
      })
      .subscribe()

    return () => {
      channel.unsubscribe()
    }
  }, [session?.user?.email])

  const handleSignOut = async () => {
    const { signOut } = await import('next-auth/react')
    await signOut({ redirect: false })
    router.push('/')
  }

  const getNotificationIcon = (type: string) => {
    const icons = {
      info: 'ℹ️',
      warning: '⚠️',
      success: '✅',
      error: '❌'
    }
    return icons[type as keyof typeof icons] || 'ℹ️'
  }

  return (
    <motion.header
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.5, ease: "easeOut" }}
      className={`
        sticky top-0 z-40 border-b backdrop-blur-md
        ${isDark 
          ? 'bg-slate-900/80 border-slate-700' 
          : 'bg-white/80 border-slate-200'
        }
      `}
    >
      <div className="flex items-center justify-between px-6 py-4">
        {/* Left Section */}
        <div className="flex items-center space-x-4">
          <div className="hidden lg:block">
            <h1 className="text-2xl font-bold text-slate-900 dark:text-white">
              Admin Dashboard
            </h1>
            <p className="text-sm text-slate-500 dark:text-slate-400">
              Welcome back, {session?.user?.name || 'Administrator'}
            </p>
          </div>
        </div>

        {/* Center Section - Search */}
        <div className="flex-1 max-w-md mx-8 relative">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search members, complaints, polls..."
              className={`
                w-full pl-10 pr-4 py-2.5 rounded-xl border transition-all duration-200
                focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
                ${isDark 
                  ? 'bg-slate-800 border-slate-600 text-white placeholder-slate-400' 
                  : 'bg-slate-50 border-slate-200 text-slate-900 placeholder-slate-500'
                }
              `}
            />
          </div>
        </div>

        {/* Right Section */}
        <div className="flex items-center space-x-3">
          {/* Theme Toggle */}
          <ThemeToggle className="hidden sm:block" />

          {/* Notifications */}
          <div className="relative">
            <button
              onClick={() => setShowNotifications(!showNotifications)}
              className={`
                relative p-2.5 rounded-xl transition-all duration-200
                ${isDark 
                  ? 'hover:bg-slate-800 text-slate-300 hover:text-white' 
                  : 'hover:bg-slate-100 text-slate-600 hover:text-slate-900'
                }
              `}
            >
              <Bell className="w-5 h-5" />
              {unreadCount > 0 && (
                <motion.span
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-semibold"
                >
                  {unreadCount}
                </motion.span>
              )}
            </button>

            <AnimatePresence>
              {showNotifications && (
                <motion.div
                  initial={{ opacity: 0, y: 10, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: 10, scale: 0.95 }}
                  transition={{ duration: 0.2 }}
                  className={`
                    absolute right-0 mt-2 w-80 rounded-2xl shadow-2xl border z-50
                    ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'}
                  `}
                >
                  <div className="p-4 border-b border-slate-200 dark:border-slate-700">
                    <h3 className="text-lg font-semibold text-slate-900 dark:text-white">
                      Notifications
                    </h3>
                    <p className="text-sm text-slate-500 dark:text-slate-400">
                      {unreadCount} unread notifications
                    </p>
                  </div>
                  
                  <div className="max-h-64 overflow-y-auto">
                    {notifications.map((notification, index) => (
                      <motion.div
                        key={notification.id}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.2, delay: index * 0.05 }}
                        className={`
                          p-4 border-b border-slate-200 dark:border-slate-700 last:border-b-0
                          ${!notification.is_read ? (isDark ? 'bg-slate-700/50' : 'bg-blue-50/50') : ''}
                          hover:${isDark ? 'bg-slate-700' : 'bg-slate-50'} transition-colors duration-150
                        `}
                      >
                        <div className="flex items-start space-x-3">
                          <span className="text-lg">{getNotificationIcon(notification.type)}</span>
                          <div className="flex-1 min-w-0">
                            <p className="font-medium text-slate-900 dark:text-white text-sm">
                              {notification.title}
                            </p>
                            <p className="text-xs text-slate-500 dark:text-slate-400 mt-1">
                              {notification.message}
                            </p>
                            <p className="text-xs text-slate-400 dark:text-slate-500 mt-1">
                              {new Date(notification.created_at).toLocaleString()}
                            </p>
                          </div>
                          {!notification.is_read && (
                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                          )}
                        </div>
                      </motion.div>
                    ))}
                  </div>
                  
                  <div className="p-3 border-t border-slate-200 dark:border-slate-700">
                    <button
                      onClick={() => {
                        router.push('/main/admin/notifications')
                        setShowNotifications(false)
                      }}
                      className="w-full text-sm text-blue-600 dark:text-blue-400 hover:underline"
                    >
                      View all notifications
                    </button>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>

          {/* User Menu */}
          <div className="relative">
            <button
              onClick={() => setShowUserMenu(!showUserMenu)}
              className={`
                flex items-center space-x-2 p-2 rounded-xl transition-all duration-200
                ${isDark 
                  ? 'hover:bg-slate-800 text-slate-300' 
                  : 'hover:bg-slate-100 text-slate-600'
                }
              `}
            >
              <div className={`
                w-8 h-8 rounded-full flex items-center justify-center font-semibold text-sm
                ${isDark ? 'bg-blue-600 text-white' : 'bg-blue-500 text-white'}
              `}>
                {session?.user?.name?.charAt(0)?.toUpperCase() || 'A'}
              </div>
              <div className="hidden sm:block text-left min-w-0 flex-1 max-w-[150px]">
                <p className="text-sm font-medium text-slate-900 dark:text-white truncate">
                  {session?.user?.name || 'Administrator'}
                </p>
                <p className="text-xs text-slate-500 dark:text-slate-400">Admin</p>
              </div>
              <ChevronDown className="w-4 h-4" />
            </button>

            <AnimatePresence>
              {showUserMenu && (
                <motion.div
                  initial={{ opacity: 0, y: 10, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: 10, scale: 0.95 }}
                  transition={{ duration: 0.2 }}
                  className={`
                    absolute right-0 mt-2 w-80 rounded-2xl shadow-2xl border z-50
                    ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'}
                  `}
                >
                  <div className="p-4 border-b border-slate-200 dark:border-slate-700">
                    <div className="flex items-center space-x-3">
                      <div className={`
                        w-10 h-10 rounded-full flex items-center justify-center font-semibold
                        ${isDark ? 'bg-blue-600 text-white' : 'bg-blue-500 text-white'}
                      `}>
                        {session?.user?.name?.charAt(0)?.toUpperCase() || 'A'}
                      </div>
                      <div className="min-w-0 flex-1">
                        <p className="font-medium text-slate-900 dark:text-white truncate">
                          {session?.user?.name || 'Administrator'}
                        </p>
                        <p className="text-sm text-slate-500 dark:text-slate-400 truncate">
                          {session?.user?.email || 'admin@example.com'}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="py-2">
                    <button
                      onClick={() => router.push('/main/admin/settings')}
                      className={`
                        w-full flex items-center space-x-3 px-4 py-2.5 text-sm transition-colors duration-150
                        ${isDark 
                          ? 'text-slate-300 hover:bg-slate-700 hover:text-white' 
                          : 'text-slate-700 hover:bg-slate-100'
                        }
                      `}
                    >
                      <Settings className="w-4 h-4" />
                      <span>Settings</span>
                    </button>
                    
                    <button
                      onClick={() => window.open(`mailto:${session?.user?.email}`, '_blank')}
                      className={`
                        w-full flex items-center space-x-3 px-4 py-2.5 text-sm transition-colors duration-150
                        ${isDark 
                          ? 'text-slate-300 hover:bg-slate-700 hover:text-white' 
                          : 'text-slate-700 hover:bg-slate-100'
                        }
                      `}
                    >
                      <Mail className="w-4 h-4" />
                      <span>Contact Support</span>
                    </button>
                  </div>

                  <div className="border-t border-slate-200 dark:border-slate-700 py-2">
                    <button
                      onClick={handleSignOut}
                      className={`
                        w-full flex items-center space-x-3 px-4 py-2.5 text-sm transition-colors duration-150
                        ${isDark 
                          ? 'text-red-400 hover:bg-red-900/20' 
                          : 'text-red-600 hover:bg-red-50'
                        }
                      `}
                    >
                      <LogOut className="w-4 h-4" />
                      <span>Sign out</span>
                    </button>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>
      </div>

      {/* Click outside to close menus */}
      {(showNotifications || showUserMenu) && (
        <div
          className="fixed inset-0 z-30"
          onClick={() => {
            setShowNotifications(false)
            setShowUserMenu(false)
          }}
        />
      )}
    </motion.header>
  )
}




// @/components/ui/AdminSidebar.tsx
'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { useRouter } from 'next/navigation'
import { useSession } from 'next-auth/react'
import { useTheme } from '@/components/ThemeContext'
import { useSidebar } from '@/components/ui/SidebarContext'
import { motion, AnimatePresence } from 'framer-motion'
import {
  LayoutDashboard, Bot, BarChart3, Users, MessageSquareWarning,
  Smile, PlusSquare, ScrollText, Bell, Settings,
  ChevronLeft, ChevronRight, Target
} from 'lucide-react'

interface NavItem {
  label: string
  href: string
  icon: React.ElementType
  badge?: number
}

interface NavSection {
  title: string
  items: NavItem[]
}

export function AdminSidebar() {
  const { isCollapsed, setIsCollapsed } = useSidebar()
  const { isDark } = useTheme()
  const { data: session } = useSession()
  const pathname = usePathname()

  // Check if mobile/tablet screens using matchMedia for better reliability (default collapsed below xl)
  const [isSmallScreen, setIsSmallScreen] = useState(false)

  // Use isCollapsed directly, no forcing
  const effectiveIsCollapsed = isCollapsed

  // Dynamic badge counts
  const [complaintCount, setComplaintCount] = useState(0)
  const [notificationCount, setNotificationCount] = useState(0)

  useEffect(() => {
    if (typeof window === 'undefined') return

    const mediaQuery = window.matchMedia('(max-width: 1279px)') // xl breakpoint -1 for tablet/mobile
    setIsSmallScreen(mediaQuery.matches)

    const handleChange = (e: MediaQueryListEvent) => {
      setIsSmallScreen(e.matches)
    }

    mediaQuery.addEventListener('change', handleChange)

    return () => {
      mediaQuery.removeEventListener('change', handleChange)
    }
  }, [])

  // Fetch dynamic counts
  useEffect(() => {
    if (!session?.user?.email) return

    const fetchCounts = async () => {
      try {
        // Fetch complaints count (total pending/unresolved)
        const complaintsResponse = await fetch('/api/complaints?status=pending')
        if (complaintsResponse.ok) {
          const complaintsData = await complaintsResponse.json()
          setComplaintCount(complaintsData.complaints?.length || 0)
        }

        // Fetch notifications count (unread)
        const notificationsResponse = await fetch('/api/admin/notifications')
        if (notificationsResponse.ok) {
          const notificationsData = await notificationsResponse.json()
          const unread = notificationsData.notifications?.filter((n: any) => !n.is_read).length || 0
          setNotificationCount(unread)
        }
      } catch (error) {
        console.error('Error fetching counts:', error)
      }
    }

    fetchCounts()
  }, [session?.user?.email])

  const navigationSections: NavSection[] = [
    {
      title: "Overview",
      items: [
        { label: "Dashboard", href: "/main/admin", icon: LayoutDashboard },
        { label: "AI Insights", href: "/main/admin/ai-insights", icon: Bot },
        { label: "Analytics", href: "/main/admin/analytics", icon: BarChart3 }
      ]
    },
    {
      title: "Management",
      items: [
        { label: "Members", href: "/main/admin/members", icon: Users },
        { label: "Complaints", href: "/main/admin/complaints", icon: MessageSquareWarning, badge: complaintCount },
        { label: "Feedback", href: "/main/admin/feedback", icon: Smile },
        { label: "Polls", href: "/main/admin/polls", icon: PlusSquare }
      ]
    },
    {
      title: "System",
      items: [
        { label: "Audit Log", href: "/main/admin/audit-log", icon: ScrollText },
        { label: "Notifications", href: "/main/admin/notifications", icon: Bell, badge: notificationCount },
        { label: "Settings", href: "/main/admin/settings", icon: Settings }
      ]
    }
  ]

  const NavItemComponent = ({ item, isCollapsed }: { item: NavItem; isCollapsed: boolean }) => {
    const isActive = pathname === item.href
    const Icon = item.icon

    const handleNavClick = () => {
      // Collapse sidebar on small screens when navigation link is clicked
      if (isSmallScreen && !isCollapsed) {
        setIsCollapsed(true)
      }
    }

    return (
      <Link href={item.href} onClick={handleNavClick}>
        <motion.div
          whileHover={{ x: effectiveIsCollapsed ? 4 : 2, scale: 1.02 }}
          className={`
            relative flex items-center gap-3 px-3 py-2.5 rounded-xl transition-all duration-200 cursor-pointer group
            ${isActive
              ? `${isDark ? 'bg-blue-500/20 text-blue-400' : 'bg-blue-50 text-blue-600'} shadow-sm`
              : `${isDark ? 'text-slate-300 hover:bg-slate-800/50 hover:text-white' : 'text-slate-600 hover:bg-slate-100 hover:text-slate-900'}`
            }
          `}
        >
          {isActive && (
            <motion.div
              layoutId="active-pill"
              className={`absolute left-0 top-0 bottom-0 w-1 rounded-r-full ${isDark ? 'bg-blue-400' : 'bg-blue-600'}`}
              initial={false}
              transition={{ type: "spring", bounce: 0.2, duration: 0.6 }}
            />
          )}

          <div className={`flex-shrink-0 ${isActive ? (isDark ? 'text-blue-400' : 'text-blue-600') : ''}`}>
            <Icon size={20} />
          </div>

          <AnimatePresence>
            {!effectiveIsCollapsed && (
              <motion.div
                initial={{ opacity: 0, x: -10 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -10 }}
                transition={{ duration: 0.2 }}
                className="flex items-center justify-between flex-1 min-w-0"
              >
                <span className="font-medium text-sm truncate">{item.label}</span>
                {item.badge && (
                  <motion.span
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    className={`
                      px-1.5 py-0.5 text-xs font-semibold rounded-full
                      ${isDark ? 'bg-red-500/20 text-red-400' : 'bg-red-100 text-red-700'}
                    `}
                  >
                    {item.badge}
                  </motion.span>
                )}
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      </Link>
    )
  }

  const sidebarContent = (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-slate-200 dark:border-slate-700">
        <AnimatePresence>
          {!effectiveIsCollapsed && (
            <motion.div
              initial={{ opacity: 0, x: -10 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -10 }}
              transition={{ duration: 0.2 }}
            >
              <h2 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                EComAI
              </h2>
              <p className="text-xs text-slate-500 dark:text-slate-400 mt-0.5">Admin Panel</p>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Toggle button - always visible */}
        <button
          onClick={(e) => {
            e.preventDefault()
            e.stopPropagation()
            setIsCollapsed(!isCollapsed)
          }}
          className={`
            p-3 rounded-lg transition-all duration-200 hover:scale-110 z-50 relative
            ${isDark ? 'hover:bg-slate-700 text-slate-400' : 'hover:bg-slate-100 text-slate-600'}
            border ${isDark ? 'border-slate-600' : 'border-slate-300'}
          `}
          title={isCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}
        >
          {effectiveIsCollapsed ? (
            <ChevronRight className="w-5 h-5" />
          ) : (
            <ChevronLeft className="w-5 h-5" />
          )}
        </button>
      </div>

      {/* Navigation */}
      <nav className="flex-1 p-4 space-y-6">
        {navigationSections.map((section, sectionIndex) => (
          <div key={section.title}>
            <AnimatePresence>
              {!effectiveIsCollapsed && (
                <motion.h3
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  transition={{ duration: 0.2, delay: sectionIndex * 0.1 }}
                  className="text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider mb-3"
                >
                  {section.title}
                </motion.h3>
              )}
            </AnimatePresence>

            <div className="space-y-1">
              {section.items.map((item, itemIndex) => (
                <motion.div
                  key={item.href}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: (sectionIndex * 0.1) + (itemIndex * 0.05) }}
                >
                  <NavItemComponent item={item} isCollapsed={effectiveIsCollapsed} />
                </motion.div>
              ))}
            </div>
          </div>
        ))}
      </nav>

      {/* Footer */}
      <div className="p-4 border-t border-slate-200 dark:border-slate-700">
        <AnimatePresence>
          {!effectiveIsCollapsed && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              transition={{ duration: 0.2 }}
              className={`
                p-3 rounded-xl text-center
                ${isDark ? 'bg-gradient-to-r from-slate-800 to-slate-700' : 'bg-gradient-to-r from-slate-100 to-slate-50'}
              `}
            >
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  )

  // Always render the sidebar, no mobile drawer
  return (
    <motion.aside
      initial={false}
      animate={{ width: isCollapsed ? 80 : 320 }}
      transition={{ duration: 0.3, ease: "easeInOut" }}
      className={`
        fixed left-0 top-0 bottom-0 z-30
        ${isDark ? 'bg-slate-900/95' : 'bg-white/95'}
        backdrop-blur-sm border-r border-slate-200 dark:border-slate-700
      `}
    >
      {sidebarContent}
    </motion.aside>
  )
}


// @/components/ui/ChartCard.tsx
import React from 'react'
import { useTheme } from '@/components/ThemeContext'

interface ChartCardProps {
  title: string
  children: React.ReactNode
  className?: string
}

export function ChartCard({ title, children, className = '' }: ChartCardProps) {
  const { isDark } = useTheme()

  return (
    <div className={`
      bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700
      shadow-sm hover:shadow-md transition-shadow duration-200 p-6 ${className}
    `}>
      <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4">
        {title}
      </h3>
      <div className="w-full">
        {children}
      </div>
    </div>
  )
}




// @/components/ui/ConfirmDialog.tsx
'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { AlertTriangle, CheckCircle, X } from 'lucide-react'
import { useTheme } from '@/components/ThemeContext'

interface ConfirmDialogProps {
  isOpen: boolean
  onClose: () => void
  onConfirm: () => void
  title: string
  description: string
  confirmLabel?: string
  cancelLabel?: string
  variant?: 'default' | 'danger' | 'success'
  loading?: boolean
  children?: React.ReactNode
}

export function ConfirmDialog({
  isOpen,
  onClose,
  onConfirm,
  title,
  description,
  confirmLabel = 'Confirm',
  cancelLabel = 'Cancel',
  variant = 'default',
  loading = false,
  children
}: ConfirmDialogProps) {
  const { isDark } = useTheme()

  const variants = {
    danger: {
      icon: AlertTriangle,
      iconBg: 'bg-red-100 dark:bg-red-900/20',
      iconColor: 'text-red-600 dark:text-red-400',
      confirmButton: 'bg-red-600 hover:bg-red-700 focus:ring-red-500'
    },
    success: {
      icon: CheckCircle,
      iconBg: 'bg-green-100 dark:bg-green-900/20',
      iconColor: 'text-green-600 dark:text-green-400',
      confirmButton: 'bg-green-600 hover:bg-green-700 focus:ring-green-500'
    },
    default: {
      icon: CheckCircle,
      iconBg: 'bg-blue-100 dark:bg-blue-900/20',
      iconColor: 'text-blue-600 dark:text-blue-400',
      confirmButton: 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'
    }
  }

  const config = variants[variant]
  const Icon = config.icon

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
          />

          {/* Dialog */}
          <div className="fixed inset-0 z-50 overflow-y-auto">
            <div className="flex min-h-full items-center justify-center p-4">
              <motion.div
                initial={{ opacity: 0, scale: 0.95, y: 20 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.95, y: 20 }}
                transition={{ duration: 0.2 }}
                className={`
                  relative w-full max-w-md rounded-2xl p-6 shadow-2xl
                  ${isDark 
                    ? 'bg-slate-800 border border-slate-700' 
                    : 'bg-white border border-slate-200'
                  }
                `}
              >
                {/* Close button */}
                <button
                  onClick={onClose}
                  className={`
                    absolute top-4 right-4 p-1 rounded-lg transition-colors duration-200
                    ${isDark ? 'hover:bg-slate-700 text-slate-400' : 'hover:bg-slate-100 text-slate-500'}
                  `}
                >
                  <X className="w-4 h-4" />
                </button>

                {/* Icon */}
                <div className={`mx-auto w-12 h-12 flex items-center justify-center rounded-full mb-4 ${config.iconBg}`}>
                  <Icon className={`w-6 h-6 ${config.iconColor}`} />
                </div>

                {/* Content */}
                <div className="text-center mb-6">
                  <h3 className={`text-lg font-semibold mb-2 ${isDark ? 'text-white' : 'text-slate-900'}`}>
                    {title}
                  </h3>
                  <p className={`text-sm ${isDark ? 'text-slate-400' : 'text-slate-600'}`}>
                    {description}
                  </p>
                  {children && (
                    <div className="mt-4">
                      {children}
                    </div>
                  )}
                </div>

                {/* Actions */}
                <div className="flex space-x-3">
                  <button
                    onClick={onClose}
                    disabled={loading}
                    className={`
                      flex-1 px-4 py-2 rounded-xl font-medium transition-colors duration-200
                      ${isDark 
                        ? 'bg-slate-700 hover:bg-slate-600 text-white' 
                        : 'bg-slate-100 hover:bg-slate-200 text-slate-900'
                      }
                      disabled:opacity-50 disabled:cursor-not-allowed
                    `}
                  >
                    {cancelLabel}
                  </button>
                  <button
                    onClick={onConfirm}
                    disabled={loading}
                    className={`
                      flex-1 px-4 py-2 rounded-xl font-medium text-white transition-colors duration-200
                      ${config.confirmButton}
                      disabled:opacity-50 disabled:cursor-not-allowed
                      focus:outline-none focus:ring-2 focus:ring-offset-2
                    `}
                  >
                    {loading ? (
                      <div className="flex items-center justify-center">
                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                        Loading...
                      </div>
                    ) : (
                      confirmLabel
                    )}
                  </button>
                </div>
              </motion.div>
            </div>
          </div>
        </>
      )}
    </AnimatePresence>
  )
}




// @/components/ui/DataTable.tsx
'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { ChevronUp, ChevronDown, Search, Filter } from 'lucide-react'
import { useTheme } from '@/components/ThemeContext'

interface DataTableColumn<T> {
  key: keyof T
  header: string
  render?: (value: any, row: T, index: number) => React.ReactNode
  sortable?: boolean
  width?: string
}

interface DataTableProps<T extends Record<string, any>> {
  data: T[]
  columns: DataTableColumn<T>[]
  loading?: boolean
  emptyMessage?: string
  searchable?: boolean
  filterable?: boolean
  pagination?: boolean
  pageSize?: number
  className?: string
}

export function DataTable<T extends Record<string, any>>({ 
  data, 
  columns, 
  loading = false,
  emptyMessage = "No data available",
  searchable = false,
  filterable = false,
  pagination = true,
  pageSize = 10,
  className = ""
}: DataTableProps<T>) {
  const { isDark } = useTheme()
  const [sortColumn, setSortColumn] = useState<keyof T | null>(null)
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc')
  const [searchQuery, setSearchQuery] = useState('')
  const [currentPage, setCurrentPage] = useState(1)

  // Filter and sort data
  const filteredData = data.filter(row => {
    if (!searchQuery) return true
    return columns.some(column => {
      const value = row[column.key]
      return String(value).toLowerCase().includes(searchQuery.toLowerCase())
    })
  })

  const sortedData = [...filteredData].sort((a, b) => {
    if (!sortColumn) return 0
    
    const aValue = a[sortColumn]
    const bValue = b[sortColumn]
    
    if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1
    if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1
    return 0
  })

  // Pagination
  const totalPages = Math.ceil(sortedData.length / pageSize)
  const startIndex = (currentPage - 1) * pageSize
  const endIndex = startIndex + pageSize
  const paginatedData = pagination ? sortedData.slice(startIndex, endIndex) : sortedData

  const handleSort = (column: keyof T) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortColumn(column)
      setSortDirection('asc')
    }
  }

  if (loading) {
    return (
      <div className={`rounded-2xl border ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'} p-12`}>
        <div className="flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>
    )
  }

  if (data.length === 0) {
    return (
      <div className={`rounded-2xl border ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'} p-8`}>
        <div className="text-center py-12">
          <p className={isDark ? 'text-slate-400' : 'text-slate-500'}>{emptyMessage}</p>
        </div>
      </div>
    )
  }

  return (
    <div className={`rounded-2xl border overflow-hidden ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'} ${className}`}>
      {/* Search and Filter Bar */}
      {(searchable || filterable) && (
        <div className={`p-4 border-b ${isDark ? 'border-slate-700 bg-slate-800/50' : 'border-slate-200 bg-slate-50/50'}`}>
          <div className="flex items-center space-x-4">
            {searchable && (
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Search..."
                  className={`
                    w-full pl-10 pr-4 py-2 rounded-xl border transition-all duration-200
                    focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
                    ${isDark 
                      ? 'bg-slate-700 border-slate-600 text-white placeholder-slate-400' 
                      : 'bg-white border-slate-300 text-slate-900 placeholder-slate-500'
                    }
                  `}
                />
              </div>
            )}
            {filterable && (
              <button className={`
                p-2 rounded-xl transition-colors duration-200
                ${isDark ? 'hover:bg-slate-700 text-slate-400' : 'hover:bg-slate-100 text-slate-600'}
              `}>
                <Filter className="w-4 h-4" />
              </button>
            )}
          </div>
        </div>
      )}

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className={`border-b ${isDark ? 'border-slate-700 bg-slate-900/50' : 'border-slate-200 bg-slate-50/50'}`}>
              {columns.map((column) => (
                <th
                  key={String(column.key)}
                  onClick={() => column.sortable !== false && handleSort(column.key)}
                  className={`
                    px-6 py-4 text-left text-sm font-semibold transition-colors duration-200
                    ${column.sortable !== false ? 'cursor-pointer hover:bg-slate-100 dark:hover:bg-slate-700' : ''}
                    ${isDark ? 'text-slate-200' : 'text-slate-700'}
                    ${column.width || ''}
                  `}
                >
                  <div className="flex items-center space-x-2">
                    <span>{column.header}</span>
                    {column.sortable !== false && sortColumn === column.key && (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        transition={{ duration: 0.2 }}
                      >
                        {sortDirection === 'asc' ? (
                          <ChevronUp className="w-4 h-4" />
                        ) : (
                          <ChevronDown className="w-4 h-4" />
                        )}
                      </motion.div>
                    )}
                  </div>
                </th>
              ))}
            </tr>
          </thead>
          <tbody className={`divide-y ${isDark ? 'divide-slate-700' : 'divide-slate-200'}`}>
            <AnimatePresence>
              {paginatedData.map((row, index) => (
                <motion.tr
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.2, delay: index * 0.03 }}
                  className={`
                    transition-colors duration-200
                    ${isDark 
                      ? 'hover:bg-slate-700/50 text-slate-200' 
                      : 'hover:bg-slate-50 text-slate-900'
                    }
                  `}
                >
                  {columns.map((column) => (
                    <td 
                      key={String(column.key)} 
                      className="px-6 py-4 text-sm"
                    >
                      {column.render 
                        ? column.render(row[column.key], row, index) 
                        : String(row[column.key] || '')
                      }
                    </td>
                  ))}
                </motion.tr>
              ))}
            </AnimatePresence>
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {pagination && totalPages > 1 && (
        <div className={`p-4 border-t ${isDark ? 'border-slate-700 bg-slate-800/50' : 'border-slate-200 bg-slate-50/50'}`}>
          <div className="flex items-center justify-between">
            <div className={`text-sm ${isDark ? 'text-slate-400' : 'text-slate-600'}`}>
              Showing {startIndex + 1} to {Math.min(endIndex, sortedData.length)} of {sortedData.length} results
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                disabled={currentPage === 1}
                className={`
                  px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200
                  ${currentPage === 1 
                    ? 'opacity-50 cursor-not-allowed' 
                    : isDark 
                      ? 'hover:bg-slate-700 text-slate-300' 
                      : 'hover:bg-slate-100 text-slate-700'
                  }
                `}
              >
                Previous
              </button>
              
              <div className="flex items-center space-x-1">
                {Array.from({ length: totalPages }, (_, i) => i + 1)
                  .filter(page => 
                    page === 1 || 
                    page === totalPages || 
                    (page >= currentPage - 1 && page <= currentPage + 1)
                  )
                  .map((page, index, array) => (
                    <div key={page} className="flex items-center">
                      {index > 0 && array[index - 1] !== page - 1 && (
                        <span className={`px-2 text-sm ${isDark ? 'text-slate-500' : 'text-slate-400'}`}>
                          ...
                        </span>
                      )}
                      <button
                        onClick={() => setCurrentPage(page)}
                        className={`
                          px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200
                          ${page === currentPage
                            ? 'bg-blue-500 text-white'
                            : isDark 
                              ? 'hover:bg-slate-700 text-slate-300'
                              : 'hover:bg-slate-100 text-slate-700'
                          }
                        `}
                      >
                        {page}
                      </button>
                    </div>
                  ))}
              </div>
              
              <button
                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                disabled={currentPage === totalPages}
                className={`
                  px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200
                  ${currentPage === totalPages 
                    ? 'opacity-50 cursor-not-allowed' 
                    : isDark 
                      ? 'hover:bg-slate-700 text-slate-300' 
                      : 'hover:bg-slate-100 text-slate-700'
                  }
                `}
              >
                Next
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}



"use client"

import { useState, useEffect, useCallback } from 'react'
import { useTheme } from '@/components/ThemeContext'
import { Toast } from '@/components/Toast'
import { FormField, FormTemplate } from '@/types/feedback'
import {
  Plus, X, Edit, Save, Eye, EyeOff, Settings,
  Star, MessageSquare, CheckSquare, Type, List,
  GripVertical, Trash2, ChevronDown, ChevronUp,
  Copy, RotateCcw, AlertCircle, CheckCircle2,
  Smartphone, Monitor, Palette
} from 'lucide-react'

export default function FeedbackFormEditor() {
  const { isDark } = useTheme()
  const [template, setTemplate] = useState<FormTemplate | null>(null)
  const [originalTemplate, setOriginalTemplate] = useState<FormTemplate | null>(null)
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [showPreview, setShowPreview] = useState(false)
  const [previewMode, setPreviewMode] = useState<'desktop' | 'mobile'>('desktop')
  const [expandedFields, setExpandedFields] = useState<Set<string>>(new Set())
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null)
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false)

  useEffect(() => {
    fetchTemplate()
  }, [])

  useEffect(() => {
    if (originalTemplate && template) {
      const hasChanges = JSON.stringify(originalTemplate) !== JSON.stringify(template)
      setHasUnsavedChanges(hasChanges)
    }
  }, [template, originalTemplate])

  const fetchTemplate = async () => {
    try {
      const response = await fetch('/api/admin/feedback-form')
      if (response.ok) {
        const data = await response.json()
        setTemplate(data.template)
        setOriginalTemplate(data.template)
      } else {
        setToast({ message: 'Failed to load form template', type: 'error' })
      }
    } catch (error) {
      console.error('Failed to fetch template:', error)
      setToast({ message: 'Failed to load form template', type: 'error' })
    } finally {
      setLoading(false)
    }
  }

  const saveTemplate = async () => {
    if (!template) return

    setSaving(true)
    try {
      const response = await fetch('/api/admin/feedback-form', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(template),
      })

      if (response.ok) {
        setOriginalTemplate(template)
        setHasUnsavedChanges(false)
        setToast({ message: 'Form template saved successfully', type: 'success' })
      } else {
        const error = await response.json()
        setToast({ message: error.error || 'Failed to save template', type: 'error' })
      }
    } catch (error) {
      console.error('Failed to save template:', error)
      setToast({ message: 'Failed to save template', type: 'error' })
    } finally {
      setSaving(false)
    }
  }

  const addField = useCallback((type: FormField['type']) => {
    if (!template) return

    const newField: FormField = {
      id: Date.now().toString(),
      type,
      label: getDefaultLabel(type),
      required: false,
      ...(type === 'rating' && {
        options: {
          max: 5,
          labels: ['Very Poor', 'Poor', 'Average', 'Good', 'Excellent'],
          emojis: ['😡', '😞', '😐', '😊', '😄']
        }
      }),
      ...(type === 'select' && {
        options: {
          choices: ['Option 1', 'Option 2', 'Option 3']
        }
      })
    }

    setTemplate({
      ...template,
      fields: [...template.fields, newField]
    })
    setExpandedFields(prev => new Set([...prev, newField.id]))
  }, [template])

  const updateField = useCallback((fieldId: string, updates: Partial<FormField>) => {
    if (!template) return

    setTemplate({
      ...template,
      fields: template.fields.map(field =>
        field.id === fieldId ? { ...field, ...updates } : field
      )
    })
  }, [template])

  const removeField = useCallback((fieldId: string) => {
    if (!template) return

    setTemplate({
      ...template,
      fields: template.fields.filter(field => field.id !== fieldId)
    })
    setExpandedFields(prev => {
      const newSet = new Set(prev)
      newSet.delete(fieldId)
      return newSet
    })
  }, [template])

  const duplicateField = useCallback((fieldId: string) => {
    if (!template) return

    const fieldToDuplicate = template.fields.find(f => f.id === fieldId)
    if (!fieldToDuplicate) return

    const duplicatedField: FormField = {
      ...fieldToDuplicate,
      id: Date.now().toString(),
      label: `${fieldToDuplicate.label} (Copy)`
    }

    setTemplate({
      ...template,
      fields: [...template.fields, duplicatedField]
    })
    setExpandedFields(prev => new Set([...prev, duplicatedField.id]))
  }, [template])

  const moveField = useCallback((fieldId: string, direction: 'up' | 'down') => {
    if (!template) return

    const index = template.fields.findIndex(f => f.id === fieldId)
    if (index === -1) return

    const newIndex = direction === 'up' ? index - 1 : index + 1
    if (newIndex < 0 || newIndex >= template.fields.length) return

    const newFields = [...template.fields]
    const [movedField] = newFields.splice(index, 1)
    newFields.splice(newIndex, 0, movedField)

    setTemplate({
      ...template,
      fields: newFields
    })
  }, [template])

  const toggleFieldExpansion = useCallback((fieldId: string) => {
    setExpandedFields(prev => {
      const newSet = new Set(prev)
      if (newSet.has(fieldId)) {
        newSet.delete(fieldId)
      } else {
        newSet.add(fieldId)
      }
      return newSet
    })
  }, [])

  const getDefaultLabel = (type: FormField['type']) => {
    switch (type) {
      case 'rating': return 'How would you rate our service?'
      case 'textarea': return 'Please share your detailed feedback'
      case 'text': return 'Your answer'
      case 'select': return 'Choose an option'
      case 'checkbox': return 'I agree to the terms'
      default: return 'New field'
    }
  }

  const getFieldIcon = (type: FormField['type']) => {
    switch (type) {
      case 'rating': return <Star className="w-4 h-4 text-yellow-500" />
      case 'textarea': return <MessageSquare className="w-4 h-4 text-blue-500" />
      case 'text': return <Type className="w-4 h-4 text-green-500" />
      case 'select': return <List className="w-4 h-4 text-purple-500" />
      case 'checkbox': return <CheckSquare className="w-4 h-4 text-pink-500" />
      default: return <Type className="w-4 h-4 text-gray-500" />
    }
  }

  const getFieldTypeDescription = (type: FormField['type']) => {
    switch (type) {
      case 'rating': return 'Star rating with custom labels'
      case 'textarea': return 'Multi-line text input'
      case 'text': return 'Single-line text input'
      case 'select': return 'Dropdown selection'
      case 'checkbox': return 'Yes/No or agreement field'
      default: return 'Custom field type'
    }
  }

  const renderFieldEditor = (field: FormField, index: number) => {
    const isExpanded = expandedFields.has(field.id)

    return (
      <div
        key={field.id}
        className={`border rounded-xl transition-all duration-200 ${
          isDark ? 'border-slate-600 bg-slate-800/50' : 'border-slate-200 bg-white'
        } ${isExpanded ? 'ring-2 ring-blue-500/20' : 'hover:shadow-md'}`}
      >
        {/* Field Header */}
        <div
          className="flex items-center justify-between p-4 cursor-pointer"
          onClick={() => toggleFieldExpansion(field.id)}
        >
          <div className="flex items-center space-x-3">
            <GripVertical className="w-4 h-4 text-slate-400 cursor-grab" />
            {getFieldIcon(field.type)}
            <div>
              <h4 className="font-medium text-slate-900 dark:text-white">
                {field.label || 'Untitled Field'}
              </h4>
              <p className="text-sm text-slate-500 dark:text-slate-400">
                {getFieldTypeDescription(field.type)}
              </p>
            </div>
            {field.required && (
              <span className="text-red-500 text-sm font-medium">*</span>
            )}
          </div>

          <div className="flex items-center space-x-2">
            <button
              onClick={(e) => {
                e.stopPropagation()
                duplicateField(field.id)
              }}
              className="p-1 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 rounded"
              title="Duplicate field"
            >
              <Copy className="w-4 h-4" />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation()
                moveField(field.id, 'up')
              }}
              disabled={index === 0}
              className="p-1 text-slate-400 hover:text-slate-600 disabled:opacity-50 rounded"
              title="Move up"
            >
              <ChevronUp className="w-4 h-4" />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation()
                moveField(field.id, 'down')
              }}
              disabled={index === template!.fields.length - 1}
              className="p-1 text-slate-400 hover:text-slate-600 disabled:opacity-50 rounded"
              title="Move down"
            >
              <ChevronDown className="w-4 h-4" />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation()
                removeField(field.id)
              }}
              className="p-1 text-red-400 hover:text-red-600 rounded"
              title="Delete field"
            >
              <Trash2 className="w-4 h-4" />
            </button>
            {isExpanded ? (
              <ChevronUp className="w-4 h-4 text-slate-400" />
            ) : (
              <ChevronDown className="w-4 h-4 text-slate-400" />
            )}
          </div>
        </div>

        {/* Field Configuration */}
        {isExpanded && (
          <div className="px-4 pb-4 border-t border-slate-200 dark:border-slate-700">
            <div className="space-y-4 pt-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                    Field Label
                  </label>
                  <input
                    type="text"
                    value={field.label}
                    onChange={(e) => updateField(field.id, { label: e.target.value })}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    placeholder="Enter field label..."
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                    Field Type
                  </label>
                  <select
                    value={field.type}
                    onChange={(e) => updateField(field.id, { type: e.target.value as FormField['type'] })}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                  >
                    <option value="rating">⭐ Rating</option>
                    <option value="textarea">📝 Text Area</option>
                    <option value="text">🔤 Text Input</option>
                    <option value="select">📋 Select</option>
                    <option value="checkbox">☑️ Checkbox</option>
                  </select>
                </div>
              </div>

              <div className="flex items-center space-x-6">
                <label className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={field.required}
                    onChange={(e) => updateField(field.id, { required: e.target.checked })}
                    className="w-4 h-4 text-blue-600 bg-slate-100 border-slate-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-slate-800 focus:ring-2 dark:bg-slate-700 dark:border-slate-600"
                  />
                  <span className="text-sm text-slate-700 dark:text-slate-300">
                    Required field
                  </span>
                </label>
              </div>

              {/* Type-specific options */}
              {field.type === 'rating' && (
                <div className="space-y-3">
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                    Rating Scale (1-{field.options?.max || 5})
                  </label>
                  <div className="grid grid-cols-5 gap-2">
                    {Array.from({ length: field.options?.max || 5 }, (_, i) => i + 1).map((rating) => (
                      <div key={rating} className="text-center">
                        <div className="text-2xl mb-1">
                          {field.options?.emojis?.[rating - 1] || '⭐'}
                        </div>
                        <input
                          type="text"
                          value={field.options?.labels?.[rating - 1] || ''}
                          onChange={(e) => {
                            const newLabels = [...(field.options?.labels || [])]
                            newLabels[rating - 1] = e.target.value
                            updateField(field.id, {
                              options: { ...field.options, labels: newLabels }
                            })
                          }}
                          className={`w-full px-2 py-1 text-xs border rounded transition-colors ${
                            isDark
                              ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                              : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                          }`}
                          placeholder={`Label ${rating}`}
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {field.type === 'select' && (
                <div className="space-y-3">
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                    Options
                  </label>
                  {field.options?.choices?.map((choice, idx) => (
                    <div key={idx} className="flex items-center space-x-2">
                      <input
                        type="text"
                        value={choice}
                        onChange={(e) => {
                          const newChoices = [...(field.options?.choices || [])]
                          newChoices[idx] = e.target.value
                          updateField(field.id, {
                            options: { ...field.options, choices: newChoices }
                          })
                        }}
                        className={`flex-1 px-3 py-2 border rounded-lg transition-colors ${
                          isDark
                            ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                            : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                        }`}
                        placeholder={`Option ${idx + 1}`}
                      />
                      <button
                        onClick={() => {
                          const newChoices = (field.options?.choices || []).filter((_, i) => i !== idx)
                          updateField(field.id, {
                            options: { ...field.options, choices: newChoices }
                          })
                        }}
                        className="p-2 text-red-400 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                        title="Remove option"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                  <button
                    onClick={() => {
                      const newChoices = [...(field.options?.choices || []), '']
                      updateField(field.id, {
                        options: { ...field.options, choices: newChoices }
                      })
                    }}
                    className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
                  >
                    <Plus className="w-4 h-4" />
                    <span className="text-sm">Add Option</span>
                  </button>
                </div>
              )}

              {(field.type === 'textarea' || field.type === 'text') && (
                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                    Placeholder Text
                  </label>
                  <input
                    type="text"
                    value={field.placeholder || ''}
                    onChange={(e) => updateField(field.id, { placeholder: e.target.value })}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    placeholder="Enter placeholder text..."
                  />
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    )
  }

  const renderPreview = () => (
    <div className={`rounded-xl border ${
      isDark ? 'border-slate-600 bg-slate-900' : 'border-slate-200 bg-white'
    }`}>
      <div className="p-6 border-b border-slate-200 dark:border-slate-700">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-slate-900 dark:text-white">
            Live Preview
          </h3>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setPreviewMode('desktop')}
              className={`p-2 rounded-lg transition-colors ${
                previewMode === 'desktop'
                  ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'
                  : 'text-slate-400 hover:text-slate-600 dark:hover:text-slate-300'
              }`}
              title="Desktop view"
            >
              <Monitor className="w-4 h-4" />
            </button>
            <button
              onClick={() => setPreviewMode('mobile')}
              className={`p-2 rounded-lg transition-colors ${
                previewMode === 'mobile'
                  ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'
                  : 'text-slate-400 hover:text-slate-600 dark:hover:text-slate-300'
              }`}
              title="Mobile view"
            >
              <Smartphone className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      <div className={`p-6 ${previewMode === 'mobile' ? 'max-w-sm mx-auto' : ''}`}>
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-slate-900 dark:text-white mb-2">
              {template?.title}
            </h2>
            <p className="text-slate-600 dark:text-slate-400">
              {template?.subtitle}
            </p>
          </div>

          <form className="space-y-6">
            {template?.fields.map((field) => (
              <div key={field.id} className="space-y-2">
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                  {field.label} {field.required && <span className="text-red-500">*</span>}
                </label>

                {field.type === 'rating' && (
                  <div className="space-y-4">
                    <div className="flex justify-center space-x-4">
                      {Array.from({ length: field.options?.max || 5 }, (_, i) => i + 1).map((rating) => (
                        <div key={rating} className="text-center cursor-pointer hover:scale-110 transition-transform">
                          <div className="text-3xl mb-1">
                            {field.options?.emojis?.[rating - 1] || '⭐'}
                          </div>
                          <div className="text-xs text-slate-500">
                            {field.options?.labels?.[rating - 1] || rating.toString()}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {field.type === 'textarea' && (
                  <textarea
                    placeholder={field.placeholder}
                    rows={4}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-800 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    disabled
                  />
                )}

                {field.type === 'text' && (
                  <input
                    type="text"
                    placeholder={field.placeholder}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-800 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    disabled
                  />
                )}

                {field.type === 'select' && (
                  <select
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-800 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    disabled
                  >
                    <option>Select an option...</option>
                    {field.options?.choices?.map((choice, idx) => (
                      <option key={idx} value={choice}>{choice}</option>
                    ))}
                  </select>
                )}

                {field.type === 'checkbox' && (
                  <label className="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="checkbox"
                      className="w-4 h-4 text-blue-600 bg-slate-100 border-slate-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-slate-800 focus:ring-2 dark:bg-slate-700 dark:border-slate-600"
                      disabled
                    />
                    <span className="text-sm text-slate-700 dark:text-slate-300">
                      {field.label}
                    </span>
                  </label>
                )}
              </div>
            ))}

            <button
              type="button"
              className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
              disabled
            >
              Submit Feedback
            </button>
          </form>
        </div>
      </div>
    </div>
  )

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="flex items-center space-x-3">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
          <span className="text-slate-600 dark:text-slate-400">Loading form editor...</span>
        </div>
      </div>
    )
  }

  if (!template) {
    return (
      <div className="text-center py-12">
        <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-2">
          Failed to Load Form Template
        </h3>
        <p className="text-slate-600 dark:text-slate-400 mb-4">
          There was an error loading the feedback form template.
        </p>
        <button
          onClick={fetchTemplate}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Try Again
        </button>
      </div>
    )
  }

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}

      {/* Header */}
      <div className={`rounded-xl border p-6 ${
        isDark ? 'border-slate-600 bg-slate-800' : 'border-slate-200 bg-white'
      }`}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-slate-900 dark:text-white flex items-center space-x-2">
              <Palette className="w-6 h-6 text-blue-500" />
              <span>Feedback Form Editor</span>
            </h1>
            <p className="text-slate-600 dark:text-slate-400 mt-1">
              Design and customize your community feedback form
            </p>
          </div>
          <div className="flex items-center space-x-3">
            {hasUnsavedChanges && (
              <div className="flex items-center space-x-1 text-amber-600 dark:text-amber-400">
                <AlertCircle className="w-4 h-4" />
                <span className="text-sm">Unsaved changes</span>
              </div>
            )}
            <button
              onClick={() => setShowPreview(!showPreview)}
              className={`px-4 py-2 rounded-lg transition-colors flex items-center space-x-2 ${
                showPreview
                  ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'
                  : 'bg-slate-100 text-slate-700 dark:bg-slate-700 dark:text-slate-300'
              }`}
            >
              {showPreview ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
              <span>{showPreview ? 'Hide Preview' : 'Show Preview'}</span>
            </button>
            <button
              onClick={saveTemplate}
              disabled={saving || !hasUnsavedChanges}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2 transition-colors"
            >
              {saving ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ) : (
                <Save className="w-4 h-4" />
              )}
              <span>{saving ? 'Saving...' : 'Save Changes'}</span>
            </button>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
        {/* Editor Panel */}
        <div className="space-y-6">
          {/* Form Settings */}
          <div className={`rounded-xl border p-6 ${
            isDark ? 'border-slate-600 bg-slate-800' : 'border-slate-200 bg-white'
          }`}>
            <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4 flex items-center space-x-2">
              <Settings className="w-5 h-5 text-slate-500" />
              <span>Form Settings</span>
            </h3>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                  Form Title
                </label>
                <input
                  type="text"
                  value={template.title}
                  onChange={(e) => setTemplate({ ...template, title: e.target.value })}
                  className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                    isDark
                      ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                      : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                  }`}
                  placeholder="Enter form title..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                  Subtitle
                </label>
                <input
                  type="text"
                  value={template.subtitle}
                  onChange={(e) => setTemplate({ ...template, subtitle: e.target.value })}
                  className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                    isDark
                      ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                      : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                  }`}
                  placeholder="Enter form subtitle..."
                />
              </div>
            </div>
          </div>

          {/* Add Field */}
          <div className={`rounded-xl border p-6 ${
            isDark ? 'border-slate-600 bg-slate-800' : 'border-slate-200 bg-white'
          }`}>
            <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4 flex items-center space-x-2">
              <Plus className="w-5 h-5 text-slate-500" />
              <span>Add Field</span>
            </h3>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
              {[
                { type: 'rating' as const, icon: Star, color: 'text-yellow-500', bg: 'hover:bg-yellow-50 dark:hover:bg-yellow-900/20' },
                { type: 'textarea' as const, icon: MessageSquare, color: 'text-blue-500', bg: 'hover:bg-blue-50 dark:hover:bg-blue-900/20' },
                { type: 'text' as const, icon: Type, color: 'text-green-500', bg: 'hover:bg-green-50 dark:hover:bg-green-900/20' },
                { type: 'select' as const, icon: List, color: 'text-purple-500', bg: 'hover:bg-purple-50 dark:hover:bg-purple-900/20' },
                { type: 'checkbox' as const, icon: CheckSquare, color: 'text-pink-500', bg: 'hover:bg-pink-50 dark:hover:bg-pink-900/20' },
              ].map(({ type, icon: Icon, color, bg }) => (
                <button
                  key={type}
                  onClick={() => addField(type)}
                  className={`p-4 border rounded-xl text-left transition-all duration-200 ${bg} ${
                    isDark
                      ? 'border-slate-600 hover:border-slate-500'
                      : 'border-slate-200 hover:border-slate-300'
                  }`}
                >
                  <Icon className={`w-6 h-6 mb-2 ${color}`} />
                  <div className="font-medium text-slate-900 dark:text-white capitalize">
                    {type === 'rating' ? 'Star Rating' : type === 'textarea' ? 'Text Area' : type}
                  </div>
                  <div className="text-sm text-slate-500 dark:text-slate-400">
                    {getFieldTypeDescription(type)}
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Fields List */}
          <div className={`rounded-xl border p-6 ${
            isDark ? 'border-slate-600 bg-slate-800' : 'border-slate-200 bg-white'
          }`}>
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-slate-900 dark:text-white flex items-center space-x-2">
                <Edit className="w-5 h-5 text-slate-500" />
                <span>Form Fields ({template.fields.length})</span>
              </h3>
              {template.fields.length > 0 && (
                <button
                  onClick={() => setExpandedFields(new Set(template.fields.map(f => f.id)))}
                  className="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                >
                  Expand All
                </button>
              )}
            </div>

            {template.fields.length === 0 ? (
              <div className="text-center py-8">
                <Type className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                <h4 className="text-lg font-medium text-slate-900 dark:text-white mb-2">
                  No Fields Added Yet
                </h4>
                <p className="text-slate-600 dark:text-slate-400 mb-4">
                  Start building your form by adding fields from the section above.
                </p>
              </div>
            ) : (
              <div className="space-y-3">
                {template.fields.map((field, idx) => renderFieldEditor(field, idx))}
              </div>
            )}
          </div>
        </div>

        {/* Preview Panel */}
        <div className="xl:sticky xl:top-6">
          {showPreview && renderPreview()}
        </div>
      </div>
    </div>
  )
}


// @/components/ui/index.ts
export { AdminSidebar } from './AdminSidebar'
export { AdminHeader } from './AdminHeader'
export { KPICard } from './KPICard'
export { DataTable } from './DataTable'
export { EmptyState } from './EmptyState'

export { ChartCard } from './ChartCard'

export { ConfirmDialog } from './ConfirmDialog'
export { SearchInput } from './SearchInput'
export { LoadingSpinner } from './LoadingSpinner'




// @/components/ui/index.ts
export { AdminSidebar } from './AdminSidebar'
export { AdminHeader } from './AdminHeader'
export { KPICard } from './KPICard'
export { DataTable } from './DataTable'
export { EmptyState } from './EmptyState'

export { ChartCard } from './ChartCard'

export { ConfirmDialog } from './ConfirmDialog'
export { SearchInput } from './SearchInput'
export { LoadingSpinner } from './LoadingSpinner'








// @/components/ui/LoadingSpinner.tsx
'use client'

import { motion } from 'framer-motion'

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg'
  color?: string
}

export function LoadingSpinner({ size = 'md', color = 'blue' }: LoadingSpinnerProps) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12'
  }

  const colorClasses = {
    blue: 'text-blue-600',
    white: 'text-white',
    slate: 'text-slate-600'
  }

  return (
    <div className="flex items-center justify-center">
      <motion.div
        animate={{ rotate: 360 }}
        transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
        className={`${sizeClasses[size]} ${colorClasses[color as keyof typeof colorClasses] || colorClasses.blue}`}
      >
        <svg className="w-full h-full" viewBox="0 0 24 24">
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
            fill="none"
          />
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          />
        </svg>
      </motion.div>
    </div>
  )
}



// @/components/ui/SearchInput.tsx
'use client'

import { useState } from 'react'
import { Search } from 'lucide-react'
import { useTheme } from '@/components/ThemeContext'

interface SearchInputProps {
  placeholder?: string
  value?: string
  onChange?: (value: string) => void
  onSearch?: (value: string) => void
  className?: string
}

export function SearchInput({ 
  placeholder = "Search...", 
  value = "", 
  onChange, 
  onSearch,
  className = ""
}: SearchInputProps) {
  const [searchValue, setSearchValue] = useState(value)
  const { isDark } = useTheme()

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value
    setSearchValue(newValue)
    onChange?.(newValue)
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSearch?.(searchValue)
  }

  return (
    <form onSubmit={handleSubmit} className={`relative ${className}`}>
      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
      <input
        type="text"
        value={searchValue}
        onChange={handleChange}
        placeholder={placeholder}
        className={`
          w-full pl-10 pr-4 py-2.5 rounded-xl border transition-all duration-200 
          focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
          ${isDark 
            ? 'bg-slate-700 border-slate-600 text-white placeholder-slate-400' 
            : 'bg-white border-slate-300 text-slate-900 placeholder-slate-500'
          }
        `}
      />
    </form>
  )
}


'use client'

import { createContext, useContext, useState, ReactNode } from 'react'

interface SidebarContextType {
  isCollapsed: boolean
  isOpen: boolean
  toggleSidebar: () => void
  setIsCollapsed: (collapsed: boolean) => void
  setIsOpen: (open: boolean) => void
}

const SidebarContext = createContext<SidebarContextType | undefined>(undefined)

export function SidebarProvider({ children }: { children: ReactNode }) {
  const [isCollapsed, setIsCollapsed] = useState(false) // Start expanded by default
  const [isOpen, setIsOpen] = useState(false)

  const toggleSidebar = () => {
    setIsOpen(prev => !prev)
  }

  return (
    <SidebarContext.Provider value={{
      isCollapsed,
      isOpen,
      toggleSidebar,
      setIsCollapsed,
      setIsOpen
    }}>
      {children}
    </SidebarContext.Provider>
  )
}

export function useSidebar() {
  const context = useContext(SidebarContext)
  if (context === undefined) {
    throw new Error('useSidebar must be used within a SidebarProvider')
  }
  return context
}



// components/ThemeContext.tsx
'use client'

import { createContext, useContext, useState, useEffect } from 'react'

interface ThemeContextType {
  isDark: boolean
  toggleTheme: () => void
  themeClasses: {
    bg: string
    border: string
    text: string
    textPrimary: string
    hover: string
    gradient: string
    btnGradient: string
    divide: string
    mobileBg: string
    underline: string
  }
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

export function CustomThemeProvider({ children }: { children: React.ReactNode }) {
  const [isDark, setIsDark] = useState(false)
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
    const saved = localStorage.getItem('theme')
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
    const dark = saved === 'dark' || (!saved && prefersDark)
    
    setIsDark(dark)
    applyTheme(dark)
  }, [])

  const applyTheme = (dark: boolean) => {
    if (dark) {
      document.documentElement.classList.add('dark')
      document.body.style.cssText = 'background:#000000;color:#ffffff;transition:all 0.3s'
    } else {
      document.documentElement.classList.remove('dark')
      document.body.style.cssText = 'background:#ffffff;color:#000000;transition:all 0.3s'
    }
  }

  const toggleTheme = () => {
    const newDark = !isDark
    setIsDark(newDark)
    localStorage.setItem('theme', newDark ? 'dark' : 'light')
    applyTheme(newDark)
  }

  const themeClasses = {
    bg: isDark ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.8)',
    border: isDark ? 'rgba(30,41,59,0.5)' : 'rgba(226,232,240,0.5)',
    text: isDark ? 'text-white hover:text-slate-100' : 'text-black hover:text-slate-900',
    textPrimary: isDark ? 'text-white' : 'text-black',
    hover: isDark ? 'hover:bg-slate-800' : 'hover:bg-slate-100',
    gradient: isDark ? 'from-slate-300 to-slate-100' : 'from-slate-600 to-slate-800',
    btnGradient: isDark ? 'from-slate-800 to-slate-900 hover:from-slate-700 hover:to-slate-950' : 'from-slate-700 to-slate-900 hover:from-slate-800 hover:to-slate-950',
    divide: isDark ? 'divide-slate-800' : 'divide-slate-200',
    mobileBg: isDark ? 'bg-slate-900' : 'bg-white',
    underline: isDark ? 'bg-slate-100' : 'bg-slate-900'
  }

  if (!mounted) {
    return null
  }

  return (
    <ThemeContext.Provider value={{ isDark, toggleTheme, themeClasses }}>
      {children}
    </ThemeContext.Provider>
  )
}

export function useTheme() {
  const context = useContext(ThemeContext)
  if (context === undefined) {
    throw new Error('useTheme must be used within a CustomThemeProvider')
  }
  return context
}





// components/ThemeToggle.tsx
'use client'

import { useTheme } from './ThemeContext'

interface IconProps {
  className?: string
}

const SunIcon: React.FC<IconProps> = ({ className }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
  </svg>
)

const MoonIcon: React.FC<IconProps> = ({ className }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
  </svg>
)

interface ThemeToggleProps {
  className?: string
}

export function ThemeToggle({ className = '' }: ThemeToggleProps) {
  const { isDark, toggleTheme } = useTheme()

  return (
    <button
      onClick={toggleTheme}
      className={`p-2 rounded-full transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 ${
        isDark 
          ? 'bg-slate-800 text-slate-300 hover:bg-slate-700 focus:ring-slate-600 focus:ring-offset-slate-900' 
          : 'bg-slate-200 text-slate-700 hover:bg-slate-300 focus:ring-slate-500 focus:ring-offset-white'
      } ${className}`}
      aria-label="Toggle theme"
    >
      {isDark ? <SunIcon className="w-5 h-5" /> : <MoonIcon className="w-5 h-5" />}
    </button>
  )
}


// components/Toast.tsx

'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { XMarkIcon } from '@heroicons/react/24/outline'

interface ToastProps {
  message: string
  type?: 'success' | 'error' | 'info' | 'warning'
  onClose: () => void
  duration?: number
}

export function Toast({ message, type = 'info', onClose, duration = 5000 }: ToastProps) {
  const [isVisible, setIsVisible] = useState(true)

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(false)
      setTimeout(onClose, 300)
    }, duration)

    return () => clearTimeout(timer)
  }, [duration, onClose])

  const typeStyles = {
    success: 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-700 text-green-600 dark:text-green-400',
    error: 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-700 text-red-600 dark:text-red-400',
    info: 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-700 text-blue-600 dark:text-blue-400',
    warning: 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-700 text-yellow-600 dark:text-yellow-400'
  }

  const icon = {
    success: (
      <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
      </svg>
    ),
    error: (
      <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
      </svg>
    ),
    info: (
      <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
    ),
    warning: (
      <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
      </svg>
    )
  }

  if (!isVisible) return null

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.3 }}
        className={`fixed top-6 right-6 z-50 max-w-sm w-full rounded-xl border p-4 shadow-lg backdrop-blur-sm ${typeStyles[type]} flex items-start gap-3`}
      >
        <div className={`flex-shrink-0 ${type === 'success' ? 'text-green-600 dark:text-green-400' : type === 'error' ? 'text-red-600 dark:text-red-400' : type === 'info' ? 'text-blue-600 dark:text-blue-400' : 'text-yellow-600 dark:text-yellow-400'}`}>
          {icon[type]}
        </div>
        <div className="flex-1">
          <p className="text-sm font-medium">{message}</p>
        </div>
        <button
          onClick={() => {
            setIsVisible(false)
            setTimeout(onClose, 300)
          }}
          className={`flex-shrink-0 ${type === 'success' ? 'text-green-600 dark:text-green-400 hover:text-green-500 dark:hover:text-green-300' : type === 'error' ? 'text-red-600 dark:text-red-400 hover:text-red-500 dark:hover:text-red-300' : type === 'info' ? 'text-blue-600 dark:text-blue-400 hover:text-blue-500 dark:hover:text-blue-300' : 'text-yellow-600 dark:text-yellow-400 hover:text-yellow-500 dark:hover:text-yellow-300'}`}
        >
          <XMarkIcon className="w-5 h-5" />
        </button>
      </motion.div>
    </AnimatePresence>
  )
}



// @/components/DashboardRedirect.tsx
'use client'

import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'

export function DashboardRedirect() {
  const { data: session, status } = useSession()
  const router = useRouter()

  useEffect(() => {
    if (status === 'authenticated' && session) {
      // Fetch user role and redirect to appropriate dashboard
      fetch('/api/me/summary')
        .then(response => response.json())
        .then(data => {
          let redirectPath = ''
          const role = data.user.role.toLowerCase()
          switch (role) {
            case 'admin':
              redirectPath = '/main/admin'
              break
            case 'resident':
              redirectPath = '/main/user'
              break
            case 'guest':
              redirectPath = '/main/guest'
              break
            default:
              redirectPath = '/'
          }
          router.push(redirectPath)
        })
        .catch(error => {
          // Fallback to home if role fetch fails
          router.push('/')
        })
    }
  }, [session, status, router])

  return null
}

// @/components/AuthGuard.tsx
'use client'

import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'
import { Toast } from './Toast'

interface AuthGuardProps {
  children: React.ReactNode
  redirectTo?: string
  redirectIfAuthenticated?: boolean
}

export function AuthGuard({ 
  children, 
  redirectTo = '/', 
  redirectIfAuthenticated = true 
}: AuthGuardProps) {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [showToast, setShowToast] = useState(false)

  useEffect(() => {
    if (status === 'authenticated' && session && redirectIfAuthenticated) {
      setShowToast(true)
      setTimeout(() => {
        // Only redirect if redirectTo is not empty string
        if (redirectTo) {
          router.push(redirectTo)
        }
      }, 2000)
    }
  }, [session, status, router, redirectTo, redirectIfAuthenticated])

  if (status === 'loading') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-slate-900 dark:border-slate-100"></div>
      </div>
    )
  }

  if (status === 'authenticated' && session && redirectIfAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 flex items-center justify-center">
        {showToast && (
          <Toast
            message="Welcome back! Redirecting to dashboard..."
            type="success"
            onClose={() => setShowToast(false)}
          />
        )}
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-slate-900 dark:border-slate-100 mx-auto mb-4"></div>
          <p className="text-slate-600 dark:text-slate-400">Redirecting...</p>
        </div>
      </div>
    )
  }

  return <>{children}</>
}



//@/components/AuthForm.tsx

'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { signIn, getSession } from 'next-auth/react'
import { getSupabaseClient } from '@/lib/supabase'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { motion, AnimatePresence } from 'framer-motion'
import Link from 'next/link'
import { Button } from './Button'
import { Input } from './Input'
import { OAuthButton } from './OAuthButton'
import { Toast } from './Toast'
import { 
  UserIcon, 
  EnvelopeIcon, 
  LockClosedIcon,
  EyeIcon,
  EyeSlashIcon,
  CheckCircleIcon,
  XCircleIcon
} from '@heroicons/react/24/outline'
import { useTheme } from './ThemeContext'

// Validation Schemas
const loginSchema = z.object({
  email: z.string().email('Please enter a valid email address'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
  remember: z.boolean().optional()
})

const signupSchema = z.object({
  fullName: z.string().min(2, 'Full name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/(?=.*[0-9])/, 'Password must contain at least one number')
    .regex(/(?=.*[!@#$%^&*])/, 'Password must contain at least one symbol'),
  communityCode: z.string().optional(),
  role: z.enum(['Resident', 'Admin', 'Guest']),
  terms: z.boolean().refine(val => val === true, 'You must accept the terms and conditions')
}).superRefine((data, ctx) => {
  // Community code is required only for Residents
  if (data.role === 'Resident' && (!data.communityCode || data.communityCode.trim() === '')) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: 'Community code is required for residents',
      path: ['communityCode']
    })
  }
})

type LoginFormData = z.infer<typeof loginSchema>
type SignupFormData = z.infer<typeof signupSchema>
type AuthFormData = LoginFormData & Partial<SignupFormData>

interface AuthFormProps {
  type: 'login' | 'signup'
}

export default function AuthForm({ type }: AuthFormProps) {
  // Remove the supabase client creation to avoid multiple instances
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' | 'warning' } | null>(null)
  const [step, setStep] = useState(1)
  const [showPassword, setShowPassword] = useState(false)
  const router = useRouter()
  const searchParams = useSearchParams()
  const { isDark } = useTheme()

  const isLogin = type === 'login'
  const schema = isLogin ? loginSchema : signupSchema
  
  // Check for success message in URL params
  useEffect(() => {
    const message = searchParams.get('message')
    if (message) {
      setToast({ message, type: 'success' })
      // Clear the message param
      const url = new URL(window.location.href)
      url.searchParams.delete('message')
      window.history.replaceState({}, document.title, url.toString())
    }
  }, [searchParams])

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    trigger
  } = useForm<AuthFormData>({
    resolver: zodResolver(schema),
    defaultValues: {
      role: 'Resident'
    }
  })

  const watchedPassword = watch('password')
  const watchedRole = watch('role')

  // Password strength calculation
  const getPasswordStrength = (password: string) => {
    if (!password) return { score: 0, label: 'Enter password', color: 'gray' }
    
    let score = 0
    if (password.length >= 8) score++
    if (/(?=.*[0-9])/.test(password)) score++
    if (/(?=.*[!@#$%^&*])/.test(password)) score++
    if (/(?=.*[a-z])/.test(password)) score++
    if (/(?=.*[A-Z])/.test(password)) score++

    const levels = [
      { score: 0, label: 'Very Weak', color: 'red' },
      { score: 1, label: 'Weak', color: 'red' },
      { score: 2, label: 'Fair', color: 'yellow' },
      { score: 3, label: 'Good', color: 'blue' },
      { score: 4, label: 'Strong', color: 'green' },
      { score: 5, label: 'Very Strong', color: 'green' }
    ]

    return levels[score] || levels[0]
  }

  const passwordStrength = !isLogin ? getPasswordStrength(watchedPassword || '') : null

  const onSubmit = async (data: any) => {
    setIsLoading(true)
    setError('')

    try {
      if (isLogin) {
        console.log('Attempting login for:', data.email)
        
        const result = await signIn('credentials', {
          email: data.email,
          password: data.password,
          redirect: false,
        })

        if (result?.error) {
          console.log('Login error:', result.error)
          if (result.error.includes('verify')) {
            setError('Please verify your email before signing in')
          } else if (result.error.includes('OAuth')) {
            setError('Please sign in with your OAuth provider')
          } else {
            setError('Invalid email or password')
          }
        } else {
          console.log('Login successful, getting session...')
          setToast({ message: 'Successfully signed in! Redirecting...', type: 'success' })
          
          // Wait for session to be established, then redirect based on role
          setTimeout(async () => {
            try {
              // Fetch user role from API instead of session
              const response = await fetch('/api/me/summary')
              const data = await response.json()
              const role = data.user?.role?.toLowerCase() || ''
              
              let redirectPath = ''
              switch (role) {
                case 'admin':
                  redirectPath = '/main/admin'
                  break
                case 'resident':
                  redirectPath = '/main/user'
                  break
                case 'guest':
                  redirectPath = '/main/guest'
                  break
                default:
                  redirectPath = '/main/guest'
              }
              
              console.log('Redirecting to:', redirectPath, 'for role:', role)
              window.location.href = redirectPath
            } catch (error) {
              console.error('Role fetch failed, using fallback redirect:', error)
              window.location.href = '/main'
            }
          }, 1500)
        }
      } else {
        // Signup flow
        console.log('Attempting signup for:', data.email)
        
        // Check for duplicate email before signup
        const emailCheckResponse = await fetch(`/api/auth/check-email?email=${encodeURIComponent(data.email)}`)
        const { exists } = await emailCheckResponse.json()
        
        if (exists) {
          setError('An account with this email already exists')
          setIsLoading(false)
          return
        }

        const response = await fetch('/api/auth/signup', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        })

        const result = await response.json()
        console.log('Signup response:', result)

        if (response.ok && result.success) {
          setToast({ message: result.message, type: 'success' })
          
          setTimeout(() => {
            router.push(`/verification?email=${encodeURIComponent(result.email)}`)
          }, 1500)
        } else {
          setError(result.message || 'Something went wrong')
        }
      }
    } catch (err) {
      console.error('Auth error:', err)
      setError('An unexpected error occurred')
    } finally {
      setIsLoading(false)
    }
  }

  const handleOAuthSignIn = async (provider: string) => {
    setIsLoading(true)
    try {
      const result = await signIn(provider, { 
        redirect: false,
        callbackUrl: '/main'
      })
      
      if (result?.error) {
        setError('OAuth sign-in failed')
      }
    } catch (err) {
      setError('OAuth sign-in failed')
    } finally {
      setIsLoading(false)
    }
  }

  const nextStep = async () => {
    const fieldsToValidate = step === 1 ? ['email', 'password'] : ['fullName', 'communityCode', 'role', 'terms']
    const isValid = await trigger(fieldsToValidate as any)
    if (isValid) setStep(2)
  }

  const closeToast = () => {
    setToast(null)
  }

  return (
    <div className="w-full max-w-6xl mx-auto relative">
      {/* Toast Notification */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={closeToast}
        />
      )}

      <div className="grid lg:grid-cols-2 gap-12 items-center">
        
        {/* Form Section */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.6 }}
          className={`bg-white ${isDark ? 'dark:bg-slate-800' : ''} rounded-3xl shadow-2xl p-8 border ${isDark ? 'border-slate-700' : 'border-slate-200'} relative`}
        >
          {/* Back to home button */}
          <div className="absolute top-6 left-6 z-10">
            <Link 
              href="/" 
              className={`inline-flex items-center gap-2 text-sm font-medium transition-all duration-200 rounded-full px-3 py-1.5 ${isDark ? 'bg-slate-800/50 text-white hover:bg-slate-700/50' : 'bg-white/70 text-slate-700 hover:bg-white'} backdrop-blur-sm`}
            >
              <svg className={`w-4 h-4 ${isDark ? 'text-white' : 'text-slate-700'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              <span>Back to home</span>
            </Link>
          </div>

          {/* Header */}
          <div className="text-center mb-8 pt-8">
            <motion.div
              initial={{ scale: 0.5, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.5 }}
              className={`w-16 h-16 ${isDark ? 'bg-gradient-to-r from-slate-700 to-slate-900' : 'bg-gradient-primary'} rounded-2xl flex items-center justify-center mx-auto mb-4`}
            >
              <span className="text-white font-bold text-2xl">E</span>
            </motion.div>
            
            <h1 className={`text-3xl font-bold ${isDark ? 'text-white' : 'text-black'} mb-2`}>
              {isLogin ? 'Welcome back' : 'Join E-Community'}
            </h1>
            <p className={isDark ? 'text-white/60' : 'text-black/60'}>
              {isLogin 
                ? 'Sign in to access your community platform' 
                : 'Create your account and start building connections'
              }
            </p>

            {!isLogin && (
              <div className="flex items-center justify-center mt-4 space-x-4">
                <div className={`flex items-center space-x-2 ${step >= 1 ? (isDark ? 'text-white' : 'text-black') : (isDark ? 'text-white/40' : 'text-black/40')}`}>
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${step >= 1 ? (isDark ? 'bg-slate-600 text-white dark:bg-slate-100 dark:text-slate-900' : 'bg-slate-600 text-white') : (isDark ? 'bg-slate-700 text-white/60 dark:bg-slate-700 dark:text-slate-400' : 'bg-slate-300 text-slate-600')}`}>
                    {step > 1 ? <CheckCircleIcon className="w-4 h-4" /> : '1'}
                  </div>
                  <span className="text-sm">Account</span>
                </div>
                <div className={`w-8 h-0.5 ${step > 1 ? (isDark ? 'bg-white' : 'bg-black') : (isDark ? 'bg-white/20' : 'bg-black/20')}`}></div>
                <div className={`flex items-center space-x-2 ${step >= 2 ? (isDark ? 'text-white' : 'text-black') : (isDark ? 'text-white/40' : 'text-black/40')}`}>
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${step >= 2 ? (isDark ? 'bg-slate-600 text-white dark:bg-slate-100 dark:text-slate-900' : 'bg-slate-600 text-white') : (isDark ? 'bg-slate-700 text-white/60 dark:bg-slate-700 dark:text-slate-400' : 'bg-slate-300 text-slate-600')}`}>
                    2
                  </div>
                  <span className="text-sm">Profile</span>
                </div>
              </div>
            )}
          </div>

          {/* OAuth Buttons - Only Google */}
          <div className="space-y-3 mb-6">
            <OAuthButton
              provider="google"
              onClick={() => handleOAuthSignIn('google')}
              isLoading={isLoading}
            />
          </div>

          <div className="relative mb-6">
            <div className="absolute inset-0 flex items-center">
              <div className={`w-full border-t ${isDark ? 'border-slate-700' : 'border-slate-300'}`}></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className={`px-2 bg-white ${isDark ? 'dark:bg-slate-800' : ''} ${isDark ? 'text-white/60' : 'text-black/60'}`}>
                Or continue with email
              </span>
            </div>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            <AnimatePresence mode="wait">
              {isLogin || step === 1 ? (
                <motion.div
                  key="step1"
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -20 }}
                  transition={{ duration: 0.3 }}
                  className="space-y-6"
                >
                  <Input
                    label="Email Address"
                    type="email"
                    {...register('email')}
                    error={errors.email?.message?.toString()}
                    placeholder="you@example.com"
                  />

                  <div className="relative">
                    <Input
                      label="Password"
                      type={showPassword ? 'text' : 'password'}
                      {...register('password')}
                      error={errors.password?.message?.toString()}
                      placeholder="••••••••"
                    />
                    
                    {!isLogin && passwordStrength && (
                      <motion.div
                        initial={{ opacity: 0, y: -5 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                        className="mt-2"
                      >
                        <div className="flex items-center justify-between text-xs mb-1">
                          <span className={isDark ? 'text-white/60' : 'text-black/60'}>Password strength</span>
                          <span className={`font-medium ${passwordStrength.color === 'red' ? (isDark ? 'text-red-400' : 'text-red-600') : passwordStrength.color === 'yellow' ? (isDark ? 'text-yellow-400' : 'text-yellow-600') : passwordStrength.color === 'blue' ? (isDark ? 'text-blue-400' : 'text-blue-600') : (isDark ? 'text-green-400' : 'text-green-600')}`}>
                            {passwordStrength.label}
                          </span>
                        </div>
                        <div className={`w-full ${isDark ? 'bg-slate-700' : 'bg-slate-200'} rounded-full h-1`}>
                          <div
                            className={`h-1 rounded-full ${passwordStrength.color === 'red' ? 'bg-red-500' : passwordStrength.color === 'yellow' ? 'bg-yellow-500' : passwordStrength.color === 'blue' ? 'bg-blue-500' : 'bg-green-500'} transition-all duration-300`}
                            style={{ width: `${(passwordStrength.score / 5) * 100}%` }}
                          ></div>
                        </div>
                      </motion.div>
                    )}
                  </div>

                  {isLogin && (
                    <div className="flex items-center justify-between">
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          {...register('remember')}
                          className={`w-4 h-4 ${isDark ? 'text-slate-600 bg-slate-800 border-slate-700' : 'text-slate-600 bg-white border-slate-300'} rounded focus:ring-slate-500 focus:ring-2 dark:bg-slate-800 dark:border-slate-700`}
                        />
                        <span className={`ml-2 text-sm ${isDark ? 'text-white/60' : 'text-black/60'}`}>Remember me</span>
                      </label>
                      <Link
                        href="/forgot-password"
                        className={`text-sm ${isDark ? 'text-white hover:text-white/80' : 'text-black hover:text-black/80'}`}
                      >
                        Forgot password?
                      </Link>
                    </div>
                  )}
                </motion.div>
              ) : (
                <motion.div
                  key="step2"
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -20 }}
                  transition={{ duration: 0.3 }}
                  className="space-y-6"
                >
                  <Input
                    label="Full Name"
                    {...register('fullName')}
                    error={errors.fullName?.message?.toString()}
                    placeholder="John Doe"
                  />

                  <div>
                    <label className={`block text-sm font-medium ${isDark ? 'text-white' : 'text-black'} mb-2`}>
                      Role
                    </label>
                    <select
                      {...register('role')}
                      className={`w-full px-4 py-3 ${isDark ? 'bg-slate-800 border-slate-700 text-white' : 'bg-white border-slate-300 text-black'} border rounded-xl focus:outline-none focus:ring-2 focus:ring-slate-500 focus:border-transparent transition-all duration-200`}
                    >
                      <option value="Resident">Resident</option>
                      <option value="Admin">Admin</option>
                      <option value="Guest">Guest</option>
                    </select>
                    {errors.role && (
                      <p className="mt-1 text-sm text-red-600 dark:text-red-400">
                        {errors.role.message?.toString()}
                      </p>
                    )}
                  </div>

                  {watchedRole === 'Resident' && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <Input
                        label="Community Code"
                        {...register('communityCode')}
                        error={errors.communityCode?.message}
                        placeholder="PALATIW-001"
                        helperText="Required for residents - ask your community admin for this code"
                      />
                    </motion.div>
                  )}

                  {watchedRole !== 'Resident' && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <Input
                        label="Community Code (Optional)"
                        {...register('communityCode')}
                        error={errors.communityCode?.message}
                        placeholder="PALATIW-001"
                        helperText="Optional for admins and guests"
                      />
                    </motion.div>
                  )}

                  <div className="flex items-start">
                    <input
                      type="checkbox"
                      {...register('terms')}
                      className={`w-4 h-4 mt-1 ${isDark ? 'text-slate-600 bg-slate-800 border-slate-700' : 'text-slate-600 bg-white border-slate-300'} rounded focus:ring-slate-500 focus:ring-2 dark:bg-slate-800 dark:border-slate-700`}
                    />
                    <div className="ml-3">
                      <p className={`text-sm ${isDark ? 'text-white/60' : 'text-black/60'}`}>
                        I agree to the{' '}
                        <Link href="/terms" className={isDark ? 'text-white hover:text-white/80' : 'text-black hover:text-black/80'}>
                          Terms of Service
                        </Link>{' '}
                        and{' '}
                        <Link href="/privacy" className={isDark ? 'text-white hover:text-white/80' : 'text-black hover:text-black/80'}>
                          Privacy Policy
                        </Link>
                      </p>
                      {errors.terms && (
                        <p className="mt-1 text-sm text-red-600 dark:text-red-400">
                          {errors.terms.message?.toString()}
                        </p>
                      )}
                    </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>

            {error && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
                className={`bg-red-50 ${isDark ? 'dark:bg-red-900/20' : ''} border ${isDark ? 'border-red-700' : 'border-red-200'} rounded-xl p-4 flex items-center gap-3`}
              >
                <XCircleIcon className={`w-5 h-5 ${isDark ? 'text-red-400' : 'text-red-600'}`} />
                <p className={`text-sm ${isDark ? 'text-red-400' : 'text-red-600'}`}>{error}</p>
              </motion.div>
            )}

            <div className="space-y-4">
              {isLogin || step === 2 ? (
                <>
                  <Button
                    type="submit"
                    variant="primary"
                    className="w-full"
                    isLoading={isLoading}
                  >
                    {isLoading 
                      ? (isLogin ? 'Signing in...' : 'Creating account...') 
                      : (isLogin ? 'Sign In' : 'Create Account')
                    }
                  </Button>
                  
                  {!isLogin && (
                    <Button
                      type="button"
                      variant="ghost"
                      className="w-full"
                      onClick={() => setStep(1)}
                    >
                      Back to previous step
                    </Button>
                  )}
                </>
              ) : (
                <Button
                  type="button"
                  variant="primary"
                  className="w-full"
                  onClick={nextStep}
                >
                  Continue
                </Button>
              )}
            </div>

            <div className="text-center">
              <p className={`text-sm ${isDark ? 'text-white/60' : 'text-black/60'}`}>
                {isLogin ? "Don't have an account? " : "Already have an account? "}
                <Link
                  href={isLogin ? '/auth/signup' : '/auth/login'}
                  className={isDark ? 'font-medium text-white hover:text-white/80' : 'font-medium text-black hover:text-black/80'}
                >
                  {isLogin ? 'Sign up' : 'Sign in'}
                </Link>
              </p>
            </div>
          </form>
        </motion.div>

        {/* Illustration Section */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="hidden lg:block"
        >
          <div className="relative">
            <div className={`bg-gradient-to-br ${isDark ? 'from-slate-800/30 to-slate-900/30' : 'from-slate-200/20 to-slate-300/20'} rounded-3xl p-12 text-center`}>
              <motion.div
                animate={{ 
                  y: [0, -10, 0],
                  rotate: [0, 5, 0]
                }}
                transition={{ 
                  duration: 6,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
                className="mb-8"
              >
                <div className={`w-32 h-32 ${isDark ? 'bg-gradient-to-r from-slate-700 to-slate-900' : 'bg-gradient-primary'} rounded-3xl flex items-center justify-center mx-auto mb-6`}>
                  <UserIcon className="w-16 h-16 text-white" />
                </div>
              </motion.div>
              
              <h2 className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-black'} mb-4`}>
                {isLogin ? 'Welcome back!' : 'Join the community'}
              </h2>
              <p className={`text-lg leading-relaxed ${isDark ? 'text-white/80' : 'text-black/80'}`}>
                {isLogin 
                  ? 'Access your community dashboard, participate in polls, and stay connected with your neighbors.'
                  : 'Be part of a transparent, secure platform that empowers communities to make better decisions together.'
                }
              </p>

              {/* Feature highlights */}
              <div className="mt-8 space-y-4">
                {[
                  { icon: CheckCircleIcon, text: 'Secure & Private' },
                  { icon: UserIcon, text: 'Easy to Use' },
                  { icon: EnvelopeIcon, text: '24/7 Support' }
                ].map((feature, index) => (
                  <motion.div
                    key={feature.text}
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: 0.5 + index * 0.1 }}
                    className="flex items-center justify-center gap-3"
                  >
                    <feature.icon className={`w-5 h-5 ${isDark ? 'text-white/60' : 'text-black/60'}`} />
                    <span className={isDark ? 'text-white/80' : 'text-black/80'}>{feature.text}</span>
                  </motion.div>
                ))}
              </div>
            </div>
            
            {/* Background decorations */}
            <div className={`absolute -top-12 -right-12 w-24 h-24 ${isDark ? 'bg-gradient-to-br from-slate-700/20 to-slate-800/20' : 'bg-gradient-to-br from-slate-400/20 to-slate-500/20'} rounded-full blur-xl`}></div>
            <div className={`absolute -bottom-12 -left-12 w-32 h-32 ${isDark ? 'bg-gradient-to-tr from-slate-800/20 to-slate-700/20' : 'bg-gradient-to-tr from-slate-500/20 to-slate-400/20'} rounded-full blur-xl`}></div>
          </div>
        </motion.div>
      </div>
    </div>
  )
}




lib
// lib/auth.ts

import NextAuth, { NextAuthOptions } from 'next-auth'
import CredentialsProvider from 'next-auth/providers/credentials'
import GoogleProvider from 'next-auth/providers/google'
import { SupabaseAdapter } from '@auth/supabase-adapter'
import bcrypt from 'bcryptjs'
import { createClient } from '@supabase/supabase-js'

// Supabase client for custom queries
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export const authOptions: NextAuthOptions = {
  // Type cast the adapter to avoid TypeScript errors
  adapter: SupabaseAdapter({
    url: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,
  }) as any,
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error('Email and password are required')
        }

        // Find user in Supabase
        const { data: user, error } = await supabase
          .from('users')
          .select('*')
          .eq('email', credentials.email)
          .single()

        if (error || !user) {
          throw new Error('No user found with this email')
        }

        // Check if user has a password (OAuth users might not)
        if (!user.hashed_password) {
          throw new Error('Please sign in with your OAuth provider')
        }

        // Verify password
        const isValid = await bcrypt.compare(credentials.password, user.hashed_password)
        
        if (!isValid) {
          throw new Error('Invalid password')
        }

        // Check if email is verified
        if (!user.email_verified) {
          throw new Error('Please verify your email before signing in')
        }

        return {
          id: user.id,
          name: user.name,
          email: user.email,
          image: user.image
        }
      }
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    })
  ],
  callbacks: {
    async jwt({ token, user, account }) {
      // Initial sign in
      if (account && user) {
        token.accessToken = account.access_token
        token.id = user.id
      }
      return token
    },
    async session({ session, token }) {
      if (token) {
        session.accessToken = token.accessToken
        session.user.id = token.id as string
      }
      return session
    },
    async signIn({ user, account, profile }) {
      // Handle OAuth sign in
      if (account?.provider === 'google') {
        // Update user info if needed
        const { data, error } = await supabase
          .from('users')
          .update({
            name: user.name,
            image: user.image,
            email_verified: new Date()
          })
          .eq('email', user.email)
          .select()
        
        if (error) {
          console.error('Error updating user:', error)
        }
      }
      return true
    }
  },
  pages: {
    signIn: '/auth/login',
    signOut: '/auth/logout',
    error: '/auth/error',
  },
  session: {
    strategy: 'jwt',
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  jwt: {
    secret: process.env.NEXTAUTH_JWT_SECRET,
  },
  secret: process.env.NEXTAUTH_SECRET,
  debug: process.env.NODE_ENV === 'development',
}

export default NextAuth(authOptions)


// @/lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

// Create a singleton instance to avoid multiple client warnings
let supabaseClient: ReturnType<typeof createClient> | null = null

export function getSupabaseClient() {
  if (!supabaseClient) {
    supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
        }
      }
    )
  }
  return supabaseClient
}

// Server-side client with service role
let supabaseServerClient: ReturnType<typeof createClient> | null = null

export function getSupabaseServerClient() {
  if (!supabaseServerClient) {
    supabaseServerClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!,
      {
        auth: {
          persistSession: false,
          autoRefreshToken: false,
        }
      }
    )
  }
  return supabaseServerClient
}





export interface FormField {
  id: string;
  type: 'rating' | 'textarea' | 'text' | 'select' | 'checkbox';
  label: string;
  required: boolean;
  placeholder?: string;
  options?: {
    max?: number;
    labels?: string[];
    emojis?: string[];
    choices?: string[];
  };
}

export interface FormTemplate {
  id: string;
  title: string;
  subtitle: string;
  fields: FormField[];
}

export type FormConfig = FormField[];

export interface DynamicFeedback {
  id: string;
  rating?: number;  // Legacy support
  comment?: string;  // Legacy support
  form_data?: Record<string, any>;
  created_at: string;
  users: { name: string; email: string };
}


The Pages:

// app/main/admin/ai-insights/page.tsx

'use client'

import { useState, useEffect } from 'react'
import { DataTable, EmptyState, ChartCard } from '@/components/mainapp/components'
import { Bot, AlertTriangle, TrendingUp, Brain, Target, Zap } from 'lucide-react'
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ScatterChart, Scatter } from 'recharts'

interface AnomalyFlag {
  id: string
  entity_type: string
  entity_id: string
  anomaly_type: string
  severity: 'low' | 'medium' | 'high'
  details: any
  flagged_at: string
  resolved_at?: string
}

interface AIInsight {
  type: string
  title: string
  description: string
  confidence: number
  impact: 'low' | 'medium' | 'high'
  actionable: boolean
}

export default function AdminAIInsights() {
  const [anomalies, setAnomalies] = useState<AnomalyFlag[]>([])
  const [insights, setInsights] = useState<AIInsight[]>([])
  const [loading, setLoading] = useState(true)
  const [sentimentTrend, setSentimentTrend] = useState<any[]>([])

  useEffect(() => {
    const fetchAIData = async () => {
      try {
        // Mock data for demonstration - replace with real AI service calls
        const mockAnomalies: AnomalyFlag[] = [
          {
            id: '1',
            entity_type: 'poll',
            entity_id: 'poll-123',
            anomaly_type: 'unusual_voting_pattern',
            severity: 'high',
            details: { votes_in_hour: 45, normal_range: '5-15' },
            flagged_at: new Date().toISOString()
          },
          {
            id: '2',
            entity_type: 'complaint',
            entity_id: 'complaint-456',
            anomaly_type: 'sentiment_spike',
            severity: 'medium',
            details: { sentiment_score: -0.8, normal_range: '-0.3 to 0.3' },
            flagged_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
          }
        ]

        const mockInsights: AIInsight[] = [
          {
            type: 'engagement_pattern',
            title: 'Peak Engagement Hours Detected',
            description: 'Community is most active between 7-9 PM weekdays. Consider scheduling important polls during this time.',
            confidence: 0.87,
            impact: 'medium',
            actionable: true
          },
          {
            type: 'sentiment_analysis',
            title: 'Improving Community Sentiment',
            description: 'Overall sentiment has improved by 15% over the past month, particularly in governance-related discussions.',
            confidence: 0.92,
            impact: 'high',
            actionable: false
          },
          {
            type: 'participation_forecast',
            title: 'Predicted Participation Drop',
            description: 'ML model predicts 20% decrease in poll participation next week based on historical patterns.',
            confidence: 0.73,
            impact: 'medium',
            actionable: true
          }
        ]

        const mockSentimentTrend = [
          { date: '2024-01', positive: 0.65, negative: -0.15, neutral: 0.2 },
          { date: '2024-02', positive: 0.70, negative: -0.12, neutral: 0.18 },
          { date: '2024-03', positive: 0.68, negative: -0.08, neutral: 0.24 },
          { date: '2024-04', positive: 0.72, negative: -0.10, neutral: 0.18 },
          { date: '2024-05', positive: 0.75, negative: -0.06, neutral: 0.19 },
          { date: '2024-06', positive: 0.78, negative: -0.04, neutral: 0.18 }
        ]

        setAnomalies(mockAnomalies)
        setInsights(mockInsights)
        setSentimentTrend(mockSentimentTrend)
      } catch (error) {
        console.error('Failed to fetch AI data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchAIData()
  }, [])

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
      case 'low':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
    }
  }

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high':
        return 'text-red-600 dark:text-red-400'
      case 'medium':
        return 'text-yellow-600 dark:text-yellow-400'
      case 'low':
        return 'text-green-600 dark:text-green-400'
      default:
        return 'text-gray-600 dark:text-gray-400'
    }
  }

  const anomalyColumns = [
    {
      key: 'anomaly_type' as const,
      header: 'Anomaly Type',
      render: (value: string) => (
        <div>
          <div className="font-medium text-gray-900 dark:text-white capitalize">
            {value.replace('_', ' ')}
          </div>
        </div>
      )
    },
    {
      key: 'entity_type' as const,
      header: 'Entity',
      render: (value: string, row: AnomalyFlag) => (
        <div className="text-sm">
          <div className="font-medium text-gray-900 dark:text-white capitalize">{value}</div>
          <div className="text-gray-500 dark:text-gray-400">{row.entity_id.slice(0, 12)}...</div>
        </div>
      )
    },
    {
      key: 'severity' as const,
      header: 'Severity',
      render: (value: string) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(value)}`}>
          {value.charAt(0).toUpperCase() + value.slice(1)}
        </span>
      )
    },
    {
      key: 'flagged_at' as const,
      header: 'Detected',
      render: (value: string) => new Date(value).toLocaleString()
    },
    {
      key: 'resolved_at' as const,
      header: 'Status',
      render: (value: string) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          value ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 
          'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
        }`}>
          {value ? 'Resolved' : 'Active'}
        </span>
      )
    }
  ]

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            AI Insights Dashboard
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            AI-powered community analysis and anomaly detection
          </p>
        </div>
        
        <button className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
          <Bot className="w-4 h-4 mr-2" />
          Run Analysis
        </button>
      </div>

      {/* AI Insights Cards */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {insights.map((insight, index) => (
          <div key={index} className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
            <div className="flex items-start justify-between mb-3">
              <div className="flex items-center">
                {insight.type === 'engagement_pattern' && <Target className="w-5 h-5 text-blue-500 mr-2" />}
                {insight.type === 'sentiment_analysis' && <Brain className="w-5 h-5 text-green-500 mr-2" />}
                {insight.type === 'participation_forecast' && <Zap className="w-5 h-5 text-purple-500 mr-2" />}
              </div>
              <span className={`text-xs font-medium ${getImpactColor(insight.impact)}`}>
                {insight.impact.toUpperCase()} IMPACT
              </span>
            </div>
            
            <h3 className="font-semibold text-gray-900 dark:text-white mb-2">
              {insight.title}
            </h3>
            
            <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
              {insight.description}
            </p>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center text-xs text-gray-500 dark:text-gray-400">
                <Brain className="w-3 h-3 mr-1" />
                {(insight.confidence * 100).toFixed(0)}% confidence
              </div>
              
              {insight.actionable && (
                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                  Actionable
                </span>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* Sentiment Trend */}
      <ChartCard title="Community Sentiment Analysis">
        <ResponsiveContainer width="100%" height={300}>
          <AreaChart data={sentimentTrend}>
            <CartesianGrid strokeDasharray="3 3" stroke="#374151" opacity={0.3} />
            <XAxis dataKey="date" stroke="#6B7280" />
            <YAxis stroke="#6B7280" domain={[-1, 1]} />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: '#1F2937', 
                border: 'none', 
                borderRadius: '8px',
                color: '#F9FAFB'
              }} 
            />
            <Area
              type="monotone"
              dataKey="positive"
              stackId="1"
              stroke="#10B981"
              fill="#10B981"
              fillOpacity={0.6}
            />
            <Area
              type="monotone"
              dataKey="neutral"
              stackId="1"
              stroke="#6B7280"
              fill="#6B7280"
              fillOpacity={0.6}
            />
            <Area
              type="monotone"
              dataKey="negative"
              stackId="1"
              stroke="#EF4444"
              fill="#EF4444"
              fillOpacity={0.6}
            />
          </AreaChart>
        </ResponsiveContainer>
      </ChartCard>

      {/* Anomaly Detection */}
      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
        <div className="px-6 py-4 border-b border-slate-200 dark:border-slate-700">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                Anomaly Detection
              </h2>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                AI-detected unusual patterns requiring attention
              </p>
            </div>
            <div className="flex items-center space-x-2">
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
                <AlertTriangle className="w-3 h-3 mr-1" />
                {anomalies.filter(a => !a.resolved_at).length} Active
              </span>
            </div>
          </div>
        </div>
        
        {anomalies.length === 0 && !loading ? (
          <EmptyState
            title="No anomalies detected"
            description="All community patterns appear normal"
            icon={Bot}
          />
        ) : (
          <DataTable
            data={anomalies}
            columns={anomalyColumns}
            loading={loading}
            emptyMessage="No anomalies detected"
          />
        )}
      </div>

      {/* AI Model Performance */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
            Model Performance
          </h3>
          
          <div className="space-y-4">
            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Sentiment Analysis</span>
                <span className="text-sm text-gray-600 dark:text-gray-400">94.2% accuracy</span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-slate-700 rounded-full h-2">
                <div className="bg-green-600 h-2 rounded-full" style={{ width: '94.2%' }}></div>
              </div>
            </div>
            
            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Topic Classification</span>
                <span className="text-sm text-gray-600 dark:text-gray-400">87.8% accuracy</span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-slate-700 rounded-full h-2">
                <div className="bg-blue-600 h-2 rounded-full" style={{ width: '87.8%' }}></div>
              </div>
            </div>
            
            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Anomaly Detection</span>
                <span className="text-sm text-gray-600 dark:text-gray-400">91.5% accuracy</span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-slate-700 rounded-full h-2">
                <div className="bg-purple-600 h-2 rounded-full" style={{ width: '91.5%' }}></div>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
            Quick Actions
          </h3>
          
          <div className="space-y-3">
            <button className="w-full text-left p-3 rounded-lg border border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors duration-200">
              <div className="flex items-center">
                <TrendingUp className="w-5 h-5 text-blue-500 mr-3" />
                <div>
                  <div className="font-medium text-gray-900 dark:text-white">Generate Engagement Report</div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">Comprehensive community analysis</div>
                </div>
              </div>
            </button>
            
            <button className="w-full text-left p-3 rounded-lg border border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors duration-200">
              <div className="flex items-center">
                <Brain className="w-5 h-5 text-green-500 mr-3" />
                <div>
                  <div className="font-medium text-gray-900 dark:text-white">Retrain Models</div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">Update AI with latest data</div>
                </div>
              </div>
            </button>
            
            <button className="w-full text-left p-3 rounded-lg border border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors duration-200">
              <div className="flex items-center">
                <AlertTriangle className="w-5 h-5 text-orange-500 mr-3" />
                <div>
                  <div className="font-medium text-gray-900 dark:text-white">Configure Alerts</div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">Set up anomaly notifications</div>
                </div>
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}


// @/app/main/admin/analytics/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { 
  TrendingUp, Users, MessageSquareWarning, PieChart as PieChartIcon, 
  Activity, Calendar, ArrowUpRight, ArrowDownRight
} from 'lucide-react'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, 
         LineChart, Line, PieChart, Pie, Cell, AreaChart, Area } from 'recharts'
import { ChartCard, KPICard, LoadingSpinner } from '@/components/ui'
import { useTheme } from '@/components/ThemeContext'
import { Toast } from '@/components/Toast'

interface AnalyticsData {
  memberGrowth: any[]
  engagementTrend: any[]
  complaintsByCategory: any[]
  sentimentAnalysis: any[]
  participationRates: any[]
  weeklyActivity: any[]
  totalMembers: number
  activeMembers: number
  totalPolls: number
  totalComplaints: number
  averageSentiment: number
  participationRate: number
}

export default function AdminAnalytics() {
  const [data, setData] = useState<AnalyticsData | null>(null)
  const [loading, setLoading] = useState(true)
  const [timeRange, setTimeRange] = useState('30d')
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null)
  const { isDark } = useTheme()

  useEffect(() => {
    const fetchAnalytics = async () => {
      try {
        setLoading(true)
        const response = await fetch(`/api/admin/analytics?timeRange=${timeRange}`)
        
        if (!response.ok) {
          throw new Error('Failed to fetch analytics data')
        }

        const analyticsData = await response.json()
        setData(analyticsData)
      } catch (error) {
        console.error('Failed to fetch analytics:', error)
        setToast({ message: 'Failed to load analytics data', type: 'error' })
      } finally {
        setLoading(false)
      }
    }

    fetchAnalytics()
  }, [timeRange])

  const COLORS = ['#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6', '#06B6D4']

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <LoadingSpinner size="lg" />
      </div>
    )
  }

  if (!data) {
    return (
      <div className="text-center py-12">
        <TrendingUp className="w-12 h-12 text-slate-400 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-2">
          Unable to load analytics
        </h3>
        <p className="text-slate-500 dark:text-slate-400">
          Please try refreshing the page
        </p>
      </div>
    )
  }

  const memberGrowthTrend = data.memberGrowth.length > 1 
    ? data.memberGrowth[data.memberGrowth.length - 1].members > data.memberGrowth[data.memberGrowth.length - 2].members ? 'up' : 'down'
    : 'neutral'

  const sentimentScore = ((data.averageSentiment + 1) / 2 * 100).toFixed(1)
  const sentimentTrend = data.averageSentiment > 0 ? 'up' : data.averageSentiment < 0 ? 'down' : 'neutral'

  return (
    <div className="space-y-6">
      {/* Toast */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}

      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex flex-col sm:flex-row sm:items-center sm:justify-between"
      >
        <div>
          <h1 className="text-3xl font-bold text-slate-900 dark:text-white">
            Community Analytics
          </h1>
          <p className="text-slate-600 dark:text-slate-400 mt-1">
            Comprehensive insights into community engagement and activity
          </p>
        </div>

        <select
          value={timeRange}
          onChange={(e) => setTimeRange(e.target.value)}
          className={`
            px-4 py-2.5 rounded-xl border transition-all duration-200
            focus:outline-none focus:ring-2 focus:ring-blue-500
            ${isDark 
              ? 'bg-slate-800 border-slate-600 text-white' 
              : 'bg-white border-slate-300 text-slate-900'
            }
          `}
        >
          <option value="7d">Last 7 days</option>
          <option value="30d">Last 30 days</option>
          <option value="90d">Last 90 days</option>
          <option value="1y">Last year</option>
        </select>
      </motion.div>

      {/* KPI Cards */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-6"
      >
        <KPICard
          title="Total Members"
          value={data.totalMembers}
          change="+7 this month"
          trend={memberGrowthTrend}
          icon={Users}
          color="blue"
        />
        <KPICard
          title="Active Members"
          value={data.activeMembers}
          change={`${((data.activeMembers / data.totalMembers) * 100).toFixed(1)}% active`}
          trend="up"
          icon={Activity}
          color="green"
        />
        <KPICard
          title="Total Polls"
          value={data.totalPolls}
          change="+3 this month"
          trend="up"
          icon={PieChartIcon}
          color="purple"
        />
        <KPICard
          title="Complaints"
          value={data.totalComplaints}
          change="-5% from last month"
          trend="down"
          icon={MessageSquareWarning}
          color="yellow"
        />
        <KPICard
          title="Sentiment Score"
          value={`${sentimentScore}%`}
          change="+3% positive"
          trend={sentimentTrend}
          icon={TrendingUp}
          color="indigo"
        />
        <KPICard
          title="Participation"
          value={`${data.participationRate.toFixed(1)}%`}
          change="+2.1% this month"
          trend="up"
          icon={Calendar}
          color="red"
        />
      </motion.div>

      {/* Charts Row 1 */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <ChartCard title="Member Growth">
            <ResponsiveContainer width="100%" height={300}>
              <AreaChart data={data.memberGrowth}>
                <CartesianGrid strokeDasharray="3 3" stroke={isDark ? "#374151" : "#e5e7eb"} />
                <XAxis 
                  dataKey="month" 
                  stroke={isDark ? "#9CA3AF" : "#6B7280"} 
                  fontSize={12}
                />
                <YAxis stroke={isDark ? "#9CA3AF" : "#6B7280"} fontSize={12} />
                <Tooltip
                  contentStyle={{
                    backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
                    border: 'none',
                    borderRadius: '12px',
                    color: isDark ? '#F9FAFB' : '#111827',
                    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'
                  }}
                />
                <Area
                  type="monotone"
                  dataKey="members"
                  stroke="#3B82F6"
                  strokeWidth={3}
                  fill="url(#memberGradient)"
                />
                <defs>
                  <linearGradient id="memberGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.3}/>
                    <stop offset="95%" stopColor="#3B82F6" stopOpacity={0}/>
                  </linearGradient>
                </defs>
              </AreaChart>
            </ResponsiveContainer>
          </ChartCard>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          <ChartCard title="Engagement Trend">
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={data.engagementTrend}>
                <CartesianGrid strokeDasharray="3 3" stroke={isDark ? "#374151" : "#e5e7eb"} />
                <XAxis 
                  dataKey="date" 
                  stroke={isDark ? "#9CA3AF" : "#6B7280"} 
                  fontSize={12}
                />
                <YAxis stroke={isDark ? "#9CA3AF" : "#6B7280"} fontSize={12} />
                <Tooltip
                  contentStyle={{
                    backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
                    border: 'none',
                    borderRadius: '12px',
                    color: isDark ? '#F9FAFB' : '#111827',
                    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'
                  }}
                />
                <Line type="monotone" dataKey="polls" stroke="#3B82F6" strokeWidth={3} dot={{ fill: '#3B82F6', r: 4 }} />
                <Line type="monotone" dataKey="complaints" stroke="#EF4444" strokeWidth={3} dot={{ fill: '#EF4444', r: 4 }} />
                <Line type="monotone" dataKey="feedback" stroke="#10B981" strokeWidth={3} dot={{ fill: '#10B981', r: 4 }} />
              </LineChart>
            </ResponsiveContainer>
          </ChartCard>
        </motion.div>
      </div>

      {/* Charts Row 2 */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <ChartCard title="Complaints by Category">
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={data.complaintsByCategory}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }: any) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={100}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {data.complaintsByCategory.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip
                  contentStyle={{
                    backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
                    border: 'none',
                    borderRadius: '12px',
                    color: isDark ? '#F9FAFB' : '#111827',
                    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'
                  }}
                />
              </PieChart>
            </ResponsiveContainer>
          </ChartCard>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
        >
          <ChartCard title="Participation Rates by Activity">
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={data.participationRates} layout="horizontal">
                <CartesianGrid strokeDasharray="3 3" stroke={isDark ? "#374151" : "#e5e7eb"} />
                <XAxis type="number" stroke={isDark ? "#9CA3AF" : "#6B7280"} fontSize={12} />
                <YAxis 
                  dataKey="activity" 
                  type="category" 
                  stroke={isDark ? "#9CA3AF" : "#6B7280"} 
                  fontSize={12}
                  width={80}
                />
                <Tooltip
                  contentStyle={{
                    backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
                    border: 'none',
                    borderRadius: '12px',
                    color: isDark ? '#F9FAFB' : '#111827',
                    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'
                  }}
                />
                <Bar dataKey="rate" fill="#8B5CF6" radius={[0, 8, 8, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </ChartCard>
        </motion.div>
      </div>

      {/* Weekly Activity */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.6 }}
      >
        <ChartCard title="Weekly Activity Pattern">
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={data.weeklyActivity}>
              <CartesianGrid strokeDasharray="3 3" stroke={isDark ? "#374151" : "#e5e7eb"} />
              <XAxis dataKey="day" stroke={isDark ? "#9CA3AF" : "#6B7280"} fontSize={12} />
              <YAxis stroke={isDark ? "#9CA3AF" : "#6B7280"} fontSize={12} />
              <Tooltip
                contentStyle={{
                  backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
                  border: 'none',
                  borderRadius: '12px',
                  color: isDark ? '#F9FAFB' : '#111827',
                  boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'
                }}
              />
              <Bar dataKey="active" fill="#F59E0B" radius={[8, 8, 0, 0]} />
            </BarChart>
          </ResponsiveContainer>
        </ChartCard>
      </motion.div>
    </div>
  )
}



// @/app/main/admin/audit-log/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { DataTable, SearchInput } from '@/components/mainapp/components'
import { ScrollText, User, Calendar, Filter } from 'lucide-react'

interface AuditEntry {
  id: string
  action_type: string
  entity_type: string
  entity_id: string
  user_name: string
  details: any
  created_at: string
  ip_address?: string
}

export default function AdminAuditLog() {
  const [auditLog, setAuditLog] = useState<AuditEntry[]>([])
  const [loading, setLoading] = useState(true)
  const [filter, setFilter] = useState('')

  useEffect(() => {
    const mockAuditLog: AuditEntry[] = [
      {
        id: '1',
        action_type: 'create_poll',
        entity_type: 'poll',
        entity_id: 'poll-123',
        user_name: 'Admin User',
        details: { title: 'Community Garden Proposal' },
        created_at: new Date().toISOString(),
        ip_address: '192.168.1.1'
      },
      {
        id: '2',
        action_type: 'update_complaint',
        entity_type: 'complaint',
        entity_id: 'complaint-456',
        user_name: 'Admin User',
        details: { status: 'resolved' },
        created_at: new Date(Date.now() - 60 * 60 * 1000).toISOString(),
        ip_address: '192.168.1.1'
      }
    ]
    setAuditLog(mockAuditLog)
    setLoading(false)
  }, [])

  const columns = [
    {
      key: 'action_type' as const,
      header: 'Action',
      render: (value: string) => (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
          {value.replace('_', ' ').toUpperCase()}
        </span>
      )
    },
    {
      key: 'entity_type' as const,
      header: 'Entity',
      render: (value: string, row: AuditEntry) => (
        <div>
          <div className="font-medium text-gray-900 dark:text-white">{value}</div>
          <div className="text-sm text-gray-500 dark:text-gray-400">{row.entity_id}</div>
        </div>
      )
    },
    {
      key: 'user_name' as const,
      header: 'User',
      render: (value: string) => (
        <div className="flex items-center">
          <User className="w-4 h-4 mr-2 text-gray-400" />
          <span className="text-sm text-gray-900 dark:text-white">{value}</span>
        </div>
      )
    },
    {
      key: 'created_at' as const,
      header: 'Timestamp',
      render: (value: string) => (
        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
          <Calendar className="w-4 h-4 mr-1" />
          {new Date(value).toLocaleString()}
        </div>
      )
    }
  ]

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
          Audit Log
        </h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">
          Track all administrative actions and changes
        </p>
      </div>

      <div className="flex items-center space-x-4">
        <SearchInput
          placeholder="Search audit log..."
          value={filter}
          onChange={setFilter}
          className="max-w-md"
        />
        <select className="px-3 py-2 rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700">
          <option>All Actions</option>
          <option>create_poll</option>
          <option>update_complaint</option>
          <option>delete_user</option>
        </select>
      </div>

      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
        <DataTable
          data={auditLog}
          columns={columns}
          loading={loading}
          emptyMessage="No audit entries found"
        />
      </div>
    </div>
  )
}


// @/app/main/admin/complaints/page.tsx - Updated with full functionality
'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { DataTable, EmptyState, SearchInput } from '@/components/mainapp/components'
import { MessageSquareWarning, Eye, Calendar, User, AlertCircle } from 'lucide-react'
import { useTheme } from '@/components/ThemeContext'
import { Toast } from '@/components/Toast'

interface Complaint {
  id: string
  title: string
  description: string
  category: 'maintenance' | 'governance' | 'other'
  status: 'pending' | 'in-progress' | 'resolved'
  priority: number
  sentiment: number
  created_at: string
  users: { name: string; email: string }
}

export default function AdminComplaints() {
  const [complaints, setComplaints] = useState<Complaint[]>([])
  const [loading, setLoading] = useState(true)
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null)
  const [filters, setFilters] = useState({
    status: '',
    category: '',
    search: ''
  })
  const { isDark } = useTheme()

  useEffect(() => {
    const fetchComplaints = async () => {
      try {
        let url = '/api/complaints?'
        if (filters.status) url += `status=${filters.status}&`
        if (filters.category) url += `category=${filters.category}&`
        
        const response = await fetch(url)
        if (response.ok) {
          const data = await response.json()
          setComplaints(data.complaints || [])
        } else {
          setToast({ message: 'Failed to load complaints', type: 'error' })
        }
      } catch (error) {
        console.error('Failed to fetch complaints:', error)
        setToast({ message: 'Failed to load complaints', type: 'error' })
      } finally {
        setLoading(false)
      }
    }

    fetchComplaints()
  }, [filters.status, filters.category])

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
      case 'in-progress':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
      case 'resolved':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
    }
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'maintenance':
        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'
      case 'governance':
        return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'
      case 'other':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
    }
  }

  const getSentimentIcon = (sentiment: number) => {
    if (sentiment < -0.3) return { icon: AlertCircle, color: 'text-red-500', label: 'Negative' }
    if (sentiment > 0.3) return { icon: AlertCircle, color: 'text-green-500', label: 'Positive' }
    return { icon: AlertCircle, color: 'text-yellow-500', label: 'Neutral' }
  }

  const columns = [
    {
      key: 'title' as const,
      header: 'Complaint',
      render: (value: string, row: Complaint) => (
        <div>
          <div className="font-medium text-gray-900 dark:text-white">{value}</div>
          <div className="text-sm text-gray-500 dark:text-gray-400 truncate max-w-xs">
            {row.description}
          </div>
        </div>
      )
    },
    {
      key: 'users' as const,
      header: 'Submitted By',
      render: (value: any) => (
        <div className="flex items-center text-sm">
          <User className="w-4 h-4 mr-2 text-gray-400" />
          <div>
            <div className="text-gray-900 dark:text-white">{value?.name}</div>
            <div className="text-gray-500 dark:text-gray-400">{value?.email}</div>
          </div>
        </div>
      )
    },
    {
      key: 'category' as const,
      header: 'Category',
      render: (value: string) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getCategoryColor(value)}`}>
          {value.charAt(0).toUpperCase() + value.slice(1)}
        </span>
      )
    },
    {
      key: 'status' as const,
      header: 'Status',
      render: (value: string) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(value)}`}>
          {value.charAt(0).toUpperCase() + value.slice(1).replace('-', ' ')}
        </span>
      )
    },
    {
      key: 'sentiment' as const,
      header: 'Sentiment',
      render: (value: number) => {
        const sentiment = getSentimentIcon(value)
        return (
          <div className="flex items-center">
            <sentiment.icon className={`w-4 h-4 mr-1 ${sentiment.color}`} />
            <span className="text-sm text-gray-600 dark:text-gray-400">
              {sentiment.label}
            </span>
          </div>
        )
      }
    },
    {
      key: 'created_at' as const,
      header: 'Created',
      render: (value: string) => (
        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
          <Calendar className="w-4 h-4 mr-1" />
          {new Date(value).toLocaleDateString()}
        </div>
      )
    },
    {
      key: 'id' as const,
      header: 'Actions',
      render: (value: string) => (
        <Link
          href={`/main/admin/complaints/${value}`}
          className="p-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200"
        >
          <Eye className="w-4 h-4" />
        </Link>
      )
    }
  ]

  const filteredComplaints = complaints.filter(complaint =>
    complaint.title.toLowerCase().includes(filters.search.toLowerCase()) ||
    complaint.description.toLowerCase().includes(filters.search.toLowerCase()) ||
    complaint.users.name.toLowerCase().includes(filters.search.toLowerCase())
  )

  return (
    <div className="space-y-6">
      {/* Toast */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}

      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            Manage Complaints
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            Review and respond to community complaints
          </p>
        </div>
      </div>

      {/* Filters */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <SearchInput
          placeholder="Search complaints..."
          value={filters.search}
          onChange={(value) => setFilters({ ...filters, search: value })}
        />
        
        <select
          value={filters.status}
          onChange={(e) => setFilters({ ...filters, status: e.target.value })}
          className={`px-3 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            isDark ? 'border-slate-600 bg-slate-700 text-white' : 'border-slate-300 bg-white text-gray-900'
          }`}
        >
          <option value="">All Status</option>
          <option value="pending">Pending</option>
          <option value="in-progress">In Progress</option>
          <option value="resolved">Resolved</option>
        </select>
        
        <select
          value={filters.category}
          onChange={(e) => setFilters({ ...filters, category: e.target.value })}
          className={`px-3 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            isDark ? 'border-slate-600 bg-slate-700 text-white' : 'border-slate-300 bg-white text-gray-900'
          }`}
        >
          <option value="">All Categories</option>
          <option value="maintenance">Maintenance</option>
          <option value="governance">Governance</option>
          <option value="other">Other</option>
        </select>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg">
          <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">
            {complaints.filter(c => c.status === 'pending').length}
          </div>
          <div className="text-sm text-yellow-700 dark:text-yellow-300">Pending</div>
        </div>
        
        <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
          <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
            {complaints.filter(c => c.status === 'in-progress').length}
          </div>
          <div className="text-sm text-blue-700 dark:text-blue-300">In Progress</div>
        </div>
        
        <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
          <div className="text-2xl font-bold text-green-600 dark:text-green-400">
            {complaints.filter(c => c.status === 'resolved').length}
          </div>
          <div className="text-sm text-green-700 dark:text-green-300">Resolved</div>
        </div>
        
        <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-lg">
          <div className="text-2xl font-bold text-red-600 dark:text-red-400">
            {complaints.filter(c => c.sentiment < -0.3).length}
          </div>
          <div className="text-sm text-red-700 dark:text-red-300">High Priority</div>
        </div>
      </div>

      {/* Complaints Table */}
      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
        {filteredComplaints.length === 0 && !loading ? (
          <EmptyState
            title="No complaints found"
            description="No complaints match your current filters"
            icon={MessageSquareWarning}
          />
        ) : (
          <DataTable
            data={filteredComplaints}
            columns={columns}
            loading={loading}
            emptyMessage="No complaints found"
          />
        )}
      </div>
    </div>
  )
}



// @/app/main/admin/feedback/page.tsx - Updated with form editor
'use client'

import { useState, useEffect } from 'react'
import { DataTable, EmptyState, ChartCard, SearchInput } from '@/components/mainapp/components'
import { Smile, Star, User, Calendar, TrendingUp, Settings, Edit, Eye } from 'lucide-react'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts'
import { useTheme } from '@/components/ThemeContext'
import { Toast } from '@/components/Toast'
import FeedbackFormEditor from '@/components/ui/FeedbackFormEditor'


interface Feedback {
  id: string
  rating: number
  comment: string
  created_at: string
  form_data?: any
  users: { name: string; email: string }
}

export default function AdminFeedback() {
  const [feedback, setFeedback] = useState<Feedback[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [activeTab, setActiveTab] = useState<'responses' | 'form-editor'>('responses')
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null)
  const { isDark } = useTheme()

  useEffect(() => {
    if (activeTab === 'responses') {
      fetchFeedback()
    }
  }, [activeTab])

  const fetchFeedback = async () => {
    try {
      const response = await fetch('/api/feedback')
      if (response.ok) {
        const data = await response.json()
        setFeedback(data.feedback || [])
      } else {
        setToast({ message: 'Failed to load feedback', type: 'error' })
      }
    } catch (error) {
      console.error('Failed to fetch feedback:', error)
      setToast({ message: 'Failed to load feedback', type: 'error' })
    } finally {
      setLoading(false)
    }
  }

  const getRatingStats = () => {
    const ratings = [1, 2, 3, 4, 5].map(rating => ({
      rating: `${rating} Star${rating !== 1 ? 's' : ''}`,
      count: feedback.filter(f => f.rating === rating).length,
      percentage: feedback.length > 0 ? ((feedback.filter(f => f.rating === rating).length / feedback.length) * 100).toFixed(1) : '0'
    }))

    return ratings
  }

  const getMonthlyTrend = () => {
    const monthlyData: { [key: string]: { total: number; sum: number } } = {}
    
    feedback.forEach(f => {
      const month = new Date(f.created_at).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })
      if (!monthlyData[month]) {
        monthlyData[month] = { total: 0, sum: 0 }
      }
      monthlyData[month].total++
      monthlyData[month].sum += f.rating
    })

    return Object.entries(monthlyData).map(([month, data]) => ({
      month,
      average: (data.sum / data.total).toFixed(2),
      count: data.total
    })).slice(-6)
  }

  const renderStars = (rating: number) => (
    <div className="flex items-center">
      {[1, 2, 3, 4, 5].map((star) => (
        <Star
          key={star}
          className={`w-4 h-4 ${
            star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'
          }`}
        />
      ))}
    </div>
  )

  const columns = [
    {
      key: 'rating' as const,
      header: 'Rating',
      render: (value: number) => (
        <div className="flex items-center space-x-2">
          {renderStars(value)}
          <span className="text-sm text-gray-600 dark:text-gray-400">({value})</span>
        </div>
      )
    },
    {
      key: 'comment' as const,
      header: 'Comment',
      render: (value: string) => (
        <div className="max-w-xs">
          {value ? (
            <p className="text-gray-900 dark:text-white truncate">{value}</p>
          ) : (
            <span className="text-gray-400 italic">No comment</span>
          )}
        </div>
      )
    },
    {
      key: 'users' as const,
      header: 'Submitted By',
      render: (value: any) => (
        <div className="flex items-center text-sm">
          <User className="w-4 h-4 mr-2 text-gray-400" />
          <div>
            <div className="text-gray-900 dark:text-white">{value?.name}</div>
            <div className="text-gray-500 dark:text-gray-400 text-xs">{value?.email}</div>
          </div>
        </div>
      )
    },
    {
      key: 'created_at' as const,
      header: 'Date',
      render: (value: string) => (
        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
          <Calendar className="w-4 h-4 mr-1" />
          {new Date(value).toLocaleDateString()}
        </div>
      )
    }
  ]

  const filteredFeedback = feedback.filter(f =>
    f.comment?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    f.users?.name?.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const averageRating = feedback.length > 0 
    ? (feedback.reduce((sum, f) => sum + f.rating, 0) / feedback.length).toFixed(1)
    : '0'

  const TabButton = ({ tab, label, icon: Icon }: { tab: 'responses' | 'form-editor', label: string, icon: any }) => (
    <button
      onClick={() => setActiveTab(tab)}
      className={`flex items-center px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${
        activeTab === tab
          ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'
          : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200'
      }`}
    >
      <Icon className="w-4 h-4 mr-2" />
      {label}
    </button>
  )

  return (
    <div className="space-y-6">
      {/* Toast */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}

      {/* Header with Tabs */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            Community Feedback
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            Manage feedback forms and view community responses
          </p>
        </div>
        
        <div className="flex items-center space-x-2 mt-4 sm:mt-0">
          <TabButton tab="responses" label="View Responses" icon={Eye} />
          <TabButton tab="form-editor" label="Edit Form" icon={Edit} />
        </div>
      </div>

      {activeTab === 'responses' ? (
        <>
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
              <div className="flex items-center">
                <Smile className="w-8 h-8 text-green-500 mr-3" />
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Average Rating</p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">{averageRating}/5</p>
                </div>
              </div>
            </div>

            <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
              <div className="flex items-center">
                <TrendingUp className="w-8 h-8 text-blue-500 mr-3" />
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Total Feedback</p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">{feedback.length}</p>
                </div>
              </div>
            </div>

            <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
              <div className="flex items-center">
                <Star className="w-8 h-8 text-yellow-500 mr-3" />
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">5-Star Ratings</p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">
                    {feedback.filter(f => f.rating === 5).length}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
              <div className="flex items-center">
                <User className="w-8 h-8 text-purple-500 mr-3" />
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">With Comments</p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">
                    {feedback.filter(f => f.comment && f.comment.trim() !== '').length}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Charts */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <ChartCard title="Rating Distribution">
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={getRatingStats()}>
                  <CartesianGrid strokeDasharray="3 3" stroke={isDark ? "#374151" : "#e5e7eb"} />
                  <XAxis dataKey="rating" stroke={isDark ? "#9CA3AF" : "#6B7280"} />
                  <YAxis stroke={isDark ? "#9CA3AF" : "#6B7280"} />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: isDark ? '#1F2937' : '#FFFFFF', 
                      border: 'none', 
                      borderRadius: '8px',
                      color: isDark ? '#F9FAFB' : '#111827'
                    }} 
                    formatter={(value: any, name: string) => [`${value} responses (${getRatingStats().find(r => r.count === value)?.percentage}%)`, 'Count']}
                  />
                  <Bar dataKey="count" fill="#3B82F6" radius={[4, 4, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </ChartCard>

            <ChartCard title="Monthly Rating Trend">
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={getMonthlyTrend()}>
                  <CartesianGrid strokeDasharray="3 3" stroke={isDark ? "#374151" : "#e5e7eb"} />
                  <XAxis dataKey="month" stroke={isDark ? "#9CA3AF" : "#6B7280"} />
                  <YAxis stroke={isDark ? "#9CA3AF" : "#6B7280"} domain={[1, 5]} />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: isDark ? '#1F2937' : '#FFFFFF', 
                      border: 'none', 
                      borderRadius: '8px',
                      color: isDark ? '#F9FAFB' : '#111827'
                    }} 
                  />
                  <Line 
                    type="monotone" 
                    dataKey="average" 
                    stroke="#10B981" 
                    strokeWidth={3}
                    dot={{ fill: '#10B981', strokeWidth: 2, r: 4 }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </ChartCard>
          </div>

          {/* Search */}
          <div className="flex flex-col sm:flex-row sm:items-center space-y-4 sm:space-y-0 sm:space-x-4">
            <SearchInput
              placeholder="Search feedback..."
              value={searchTerm}
              onChange={setSearchTerm}
              className="sm:max-w-md"
            />
          </div>

          {/* Feedback Table */}
          <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
            {filteredFeedback.length === 0 && !loading ? (
              <EmptyState
                title="No feedback found"
                description="No feedback matches your current search"
                icon={Smile}
              />
            ) : (
              <DataTable
                data={filteredFeedback}
                columns={columns}
                loading={loading}
                emptyMessage="No feedback available"
              />
            )}
          </div>
        </>
      ) : (
        <FeedbackFormEditor />
      )}
    </div>
  )
}



// @/app/main/admin/members/page.tsx
'use client'

import { DataTable, SearchInput, ConfirmDialog } from '@/components/ui'
import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { motion } from 'framer-motion'
import {
  Users, Copy, Edit, Trash2, Shield, User, Crown,
  Search, Filter, MoreVertical, Eye, UserCheck, RefreshCw
} from 'lucide-react'
import { useTheme } from '@/components/ThemeContext'
import { Toast } from '@/components/Toast'

interface Member {
  id: string
  name: string
  email: string
  role: string
  created_at: string
  updated_at: string | null
  status: string
}

interface CommunityInfo {
  id: string
  name: string
  code: string
}


export default function AdminMembers() {
  const { data: session } = useSession()
  const [members, setMembers] = useState<Member[]>([])
  const [communityInfo, setCommunityInfo] = useState<CommunityInfo | null>(null)
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [roleFilter, setRoleFilter] = useState('all')
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null)
  const [selectedMember, setSelectedMember] = useState<Member | null>(null)
  const [showRoleDialog, setShowRoleDialog] = useState(false)
  const [showDeleteDialog, setShowDeleteDialog] = useState(false)
  const [newRole, setNewRole] = useState('')
  const { isDark } = useTheme()

  useEffect(() => {
    fetchMembersAndCommunity()
  }, [])

  const fetchMembersAndCommunity = async () => {
    try {
      setLoading(true)

      // Fetch members data
      const membersResponse = await fetch('/api/admin/members')

      if (!membersResponse.ok) {
        if (membersResponse.status === 401) {
          setToast({ message: 'Please log in to view members', type: 'error' })
          return
        }
        throw new Error('Failed to fetch members data')
      }

      const membersData = await membersResponse.json()

      // Set community info from the API response
      if (membersData.community) {
        setCommunityInfo(membersData.community)
      }

      setMembers(membersData.members || [])
    } catch (error) {
      console.error('Failed to fetch data:', error)
      setToast({ message: 'Error loading members data', type: 'error' })
    } finally {
      setLoading(false)
    }
  }

  const handleCopyCode = async () => {
    if (communityInfo?.code) {
      try {
        await navigator.clipboard.writeText(communityInfo.code)
        setToast({ message: 'Community code copied to clipboard', type: 'success' })
      } catch (error) {
        setToast({ message: 'Failed to copy code', type: 'error' })
      }
    }
  }

  const handleRegenerateCode = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/admin/members?regenerate=true')

      if (!response.ok) {
        throw new Error('Failed to regenerate community code')
      }

      const data = await response.json()
      setCommunityInfo(data.community)
      setMembers(data.members || [])
      setToast({ message: 'Community code regenerated successfully', type: 'success' })
    } catch (error) {
      console.error('Failed to regenerate code:', error)
      setToast({ message: 'Error regenerating community code', type: 'error' })
    } finally {
      setLoading(false)
    }
  }

  const handleRoleChange = async () => {
    if (!selectedMember || !newRole) return

    try {
      const response = await fetch(`/api/admin/members/${selectedMember.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ role: newRole }),
      })

      if (!response.ok) {
        throw new Error('Failed to update member role')
      }

      setToast({ message: 'Member role updated successfully', type: 'success' })
      setShowRoleDialog(false)
      setSelectedMember(null)
      fetchMembersAndCommunity() // Refresh data
    } catch (error) {
      console.error('Failed to update role:', error)
      setToast({ message: 'Error updating member role', type: 'error' })
    }
  }

  const handleDeleteMember = async () => {
    if (!selectedMember) return

    try {
      const response = await fetch(`/api/admin/members/${selectedMember.id}`, {
        method: 'DELETE',
      })

      if (!response.ok) {
        throw new Error('Failed to remove member')
      }

      setToast({ message: 'Member removed successfully', type: 'success' })
      setShowDeleteDialog(false)
      setSelectedMember(null)
      fetchMembersAndCommunity() // Refresh data
    } catch (error) {
      console.error('Failed to remove member:', error)
      setToast({ message: 'Error removing member', type: 'error' })
    }
  }

  const openRoleDialog = (member: Member) => {
    setSelectedMember(member)
    setNewRole(member.role)
    setShowRoleDialog(true)
  }

  const openDeleteDialog = (member: Member) => {
    setSelectedMember(member)
    setShowDeleteDialog(true)
  }

  const getRoleIcon = (role: string) => {
    switch (role.toLowerCase()) {
      case 'admin':
        return <Crown className="w-4 h-4 text-yellow-500" />
      case 'moderator':
        return <Shield className="w-4 h-4 text-blue-500" />
      default:
        return <User className="w-4 h-4 text-gray-500" />
    }
  }

  const getRoleColor = (role: string) => {
    switch (role.toLowerCase()) {
      case 'admin':
        return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-400'
      case 'moderator':
        return 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'
      default:
        return 'bg-gray-100 text-gray-700 dark:bg-gray-900/20 dark:text-gray-400'
    }
  }

  const filteredMembers = members.filter(member => {
    const matchesSearch = member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         member.email.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesRole = roleFilter === 'all' || member.role.toLowerCase() === roleFilter.toLowerCase()
    return matchesSearch && matchesRole
  })

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-slate-200 dark:bg-slate-700 rounded w-1/3 mb-2"></div>
          <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded w-1/2 mb-6"></div>
          <div className="space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-16 bg-slate-200 dark:bg-slate-700 rounded-xl"></div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Toast */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}

      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <h1 className={`text-4xl font-bold mb-2 ${isDark ? 'text-white' : 'text-slate-900'}`}>
          Community Members
        </h1>
        <p className={isDark ? 'text-slate-400' : 'text-slate-600'}>
          Manage your community members and their access levels
        </p>
      </motion.div>

      {/* Community Code Section */}
      {communityInfo && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
          className="bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl p-6 text-white"
        >
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-bold mb-2">Community Access Code</h2>
              <p className="text-blue-100 mb-4">
                Share this code with users to allow them to join your community
              </p>
              <div className="flex items-center space-x-3">
                <code className="bg-white/20 px-4 py-2 rounded-lg text-lg font-mono">
                  {communityInfo.code}
                </code>
                <button
                  onClick={handleCopyCode}
                  className="flex items-center space-x-2 bg-white/20 hover:bg-white/30 px-3 py-2 rounded-lg transition-colors duration-200"
                >
                  <Copy className="w-4 h-4" />
                  <span>Copy</span>
                </button>
                <button
                  onClick={handleRegenerateCode}
                  disabled={loading}
                  className="flex items-center space-x-2 bg-white/20 hover:bg-white/30 px-3 py-2 rounded-lg transition-colors duration-200 disabled:opacity-50"
                >
                  <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
                  <span>Regenerate</span>
                </button>
              </div>
            </div>
            <div className="hidden sm:block">
              <Users className="w-16 h-16 text-blue-200" />
            </div>
          </div>
        </motion.div>
      )}

      {/* Stats Cards */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
        className="grid grid-cols-1 md:grid-cols-3 gap-6"
      >
        <div className="bg-white dark:bg-slate-800 rounded-2xl p-6 shadow-lg border border-slate-200 dark:border-slate-700">
          <div className="flex items-center justify-between">
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-slate-400' : 'text-slate-600'}`}>
                Total Members
              </p>
              <p className={`text-3xl font-bold ${isDark ? 'text-white' : 'text-slate-900'}`}>
                {members.length}
              </p>
            </div>
            <Users className="w-8 h-8 text-blue-500" />
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-2xl p-6 shadow-lg border border-slate-200 dark:border-slate-700">
          <div className="flex items-center justify-between">
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-slate-400' : 'text-slate-600'}`}>
                Administrators
              </p>
              <p className={`text-3xl font-bold ${isDark ? 'text-white' : 'text-slate-900'}`}>
                {members.filter(m => m.role.toLowerCase() === 'admin').length}
              </p>
            </div>
            <Crown className="w-8 h-8 text-yellow-500" />
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-2xl p-6 shadow-lg border border-slate-200 dark:border-slate-700">
          <div className="flex items-center justify-between">
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-slate-400' : 'text-slate-600'}`}>
                Active Today
              </p>
              <p className={`text-3xl font-bold ${isDark ? 'text-white' : 'text-slate-900'}`}>
                {members.filter(m => {
                  if (!m.updated_at) return false
                  const lastActive = new Date(m.updated_at)
                  const today = new Date()
                  return lastActive.toDateString() === today.toDateString()
                }).length}
              </p>
            </div>
            <UserCheck className="w-8 h-8 text-green-500" />
          </div>
        </div>
      </motion.div>

      {/* Search and Filter */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.3 }}
        className="bg-white dark:bg-slate-800 rounded-2xl p-6 shadow-lg border border-slate-200 dark:border-slate-700"
      >
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <SearchInput
              placeholder="Search members by name or email..."
              value={searchTerm}
              onChange={setSearchTerm}
            />
          </div>
          <div className="flex items-center space-x-2">
            <Filter className="w-4 h-4 text-slate-500" />
            <select
              value={roleFilter}
              onChange={(e) => setRoleFilter(e.target.value)}
              className={`px-3 py-2 rounded-lg border ${
                isDark
                  ? 'bg-slate-700 border-slate-600 text-white'
                  : 'bg-white border-slate-300 text-slate-900'
              }`}
            >
              <option value="all">All Roles</option>
              <option value="admin">Admin</option>
              <option value="moderator">Moderator</option>
              <option value="resident">Resident</option>
            </select>
          </div>
        </div>
      </motion.div>

      {/* Members Table */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.4 }}
        className="bg-white dark:bg-slate-800 rounded-2xl shadow-lg border border-slate-200 dark:border-slate-700 overflow-hidden"
      >
        <div className="p-6 border-b border-slate-200 dark:border-slate-700">
          <h2 className={`text-xl font-bold ${isDark ? 'text-white' : 'text-slate-900'}`}>
            Members ({filteredMembers.length})
          </h2>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className={isDark ? 'bg-slate-700' : 'bg-slate-50'}>
              <tr>
                <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${
                  isDark ? 'text-slate-300' : 'text-slate-500'
                }`}>
                  Member
                </th>
                <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${
                  isDark ? 'text-slate-300' : 'text-slate-500'
                }`}>
                  Role
                </th>
                <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${
                  isDark ? 'text-slate-300' : 'text-slate-500'
                }`}>
                  Joined
                </th>
                <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${
                  isDark ? 'text-slate-300' : 'text-slate-500'
                }`}>
                  Last Active
                </th>
                <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${
                  isDark ? 'text-slate-300' : 'text-slate-500'
                }`}>
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className={`divide-y ${isDark ? 'divide-slate-700' : 'divide-slate-200'}`}>
              {filteredMembers.map((member, index) => (
                <motion.tr
                  key={member.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.05 }}
                  className={isDark ? 'hover:bg-slate-700/50' : 'hover:bg-slate-50'}
                >
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                        isDark ? 'bg-slate-600' : 'bg-slate-200'
                      }`}>
                        <span className={`text-sm font-medium ${
                          isDark ? 'text-white' : 'text-slate-900'
                        }`}>
                          {member.name.charAt(0).toUpperCase()}
                        </span>
                      </div>
                      <div className="ml-4">
                        <div className={`text-sm font-medium ${
                          isDark ? 'text-white' : 'text-slate-900'
                        }`}>
                          {member.name}
                        </div>
                        <div className={`text-sm ${isDark ? 'text-slate-400' : 'text-slate-500'}`}>
                          {member.email}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      {getRoleIcon(member.role)}
                      <span className={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${getRoleColor(member.role)}`}>
                        {member.role}
                      </span>
                    </div>
                  </td>
                  <td className={`px-6 py-4 whitespace-nowrap text-sm ${
                    isDark ? 'text-slate-300' : 'text-slate-500'
                  }`}>
                    {formatDate(member.created_at)}
                  </td>
                  <td className={`px-6 py-4 whitespace-nowrap text-sm ${
                    isDark ? 'text-slate-300' : 'text-slate-500'
                  }`}>
                    {member.updated_at ? formatDate(member.updated_at) : 'Never'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => openRoleDialog(member)}
                        className={`p-2 rounded-lg transition-colors duration-200 ${
                          isDark
                            ? 'text-slate-400 hover:text-blue-400 hover:bg-slate-700'
                            : 'text-slate-600 hover:text-blue-600 hover:bg-slate-100'
                        }`}
                        title="Edit Role"
                      >
                        <Edit className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => openDeleteDialog(member)}
                        className={`p-2 rounded-lg transition-colors duration-200 ${
                          isDark
                            ? 'text-slate-400 hover:text-red-400 hover:bg-slate-700'
                            : 'text-slate-600 hover:text-red-600 hover:bg-slate-100'
                        }`}
                        title="Remove Member"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </motion.tr>
              ))}
            </tbody>
          </table>

          {filteredMembers.length === 0 && (
            <div className="p-12 text-center">
              <Users className={`w-12 h-12 mx-auto mb-4 ${
                isDark ? 'text-slate-600' : 'text-slate-400'
              }`} />
              <p className={`text-lg font-medium mb-2 ${
                isDark ? 'text-white' : 'text-slate-900'
              }`}>
                No members found
              </p>
              <p className={isDark ? 'text-slate-400' : 'text-slate-600'}>
                {searchTerm || roleFilter !== 'all'
                  ? 'Try adjusting your search or filter criteria'
                  : 'No members have joined your community yet'
                }
              </p>
            </div>
          )}
        </div>
      </motion.div>

      

      {/* Role Change Dialog */}
      <ConfirmDialog
        isOpen={showRoleDialog}
        onClose={() => setShowRoleDialog(false)}
        onConfirm={handleRoleChange}
        title="Change Member Role"
        description={`Change ${selectedMember?.name}'s role to:`}
        confirmLabel="Update Role"
        variant="default"
      >
        <select
          value={newRole}
          onChange={(e) => setNewRole(e.target.value)}
          className={`w-full px-3 py-2 rounded-lg border ${
            isDark
              ? 'bg-slate-700 border-slate-600 text-white'
              : 'bg-white border-slate-300 text-slate-900'
          }`}
        >
          <option value="Resident">Resident</option>
          <option value="Moderator">Moderator</option>
          <option value="Admin">Admin</option>
        </select>
      </ConfirmDialog>

      {/* Delete Member Dialog */}
      <ConfirmDialog
        isOpen={showDeleteDialog}
        onClose={() => setShowDeleteDialog(false)}
        onConfirm={handleDeleteMember}
        title="Remove Member"
        description={`Are you sure you want to remove ${selectedMember?.name} from the community? This action cannot be undone.`}
        confirmLabel="Remove Member"
        variant="danger"
      />
    </div>
  )
}


// @/app/main/admin/notifications/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { DataTable, SearchInput } from '@/components/mainapp/components'
import { Bell, Check, X, AlertTriangle, Info } from 'lucide-react'
import { getSupabaseClient } from '@/lib/supabase'
import { useSession } from 'next-auth/react'

interface Notification {
  id: string
  type: 'info' | 'warning' | 'error' | 'success'
  title: string
  message: string
  created_at: string
  is_read: boolean
  user_id: string
}

export default function AdminNotifications() {
  const [notifications, setNotifications] = useState<Notification[]>([])
  const [loading, setLoading] = useState(true)
  const { data: session } = useSession()

  useEffect(() => {
    if (!session?.user?.email) return

    const supabase = getSupabaseClient()

    const fetchNotifications = async () => {
      try {
        const response = await fetch('/api/admin/notifications')
        const data = await response.json()
        setNotifications(data.notifications || [])
        setLoading(false)
      } catch (error) {
        console.error('Error fetching notifications:', error)
        setLoading(false)
      }
    }

    fetchNotifications()

    // Subscribe to real-time updates
    const channel = supabase
      .channel('notifications')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'notifications' }, (payload) => {
        fetchNotifications() // Refetch on any change
      })
      .subscribe()

    return () => {
      channel.unsubscribe()
    }
  }, [session?.user?.email])

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'warning': return <AlertTriangle className="w-4 h-4 text-yellow-500" />
      case 'error': return <X className="w-4 h-4 text-red-500" />
      case 'success': return <Check className="w-4 h-4 text-green-500" />
      default: return <Info className="w-4 h-4 text-blue-500" />
    }
  }

  const columns = [
    {
      key: 'type' as const,
      header: 'Type',
      render: (value: string) => getTypeIcon(value)
    },
    {
      key: 'title' as const,
      header: 'Notification',
      render: (value: string, row: Notification) => (
        <div>
          <div className="font-medium">{value}</div>
          <div className="text-sm text-gray-500">{row.message}</div>
        </div>
      )
    },
    {
      key: 'created_at' as const,
      header: 'Date',
      render: (value: string) => new Date(value).toLocaleDateString()
    },
    {
      key: 'is_read' as const,
      header: 'Status',
      render: (value: boolean) => value ? 'Read' : 'Unread'
    }
  ]

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
          Notifications
        </h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">
          System alerts and community updates
        </p>
      </div>

      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
        <DataTable
          data={notifications}
          columns={columns}
          loading={loading}
          emptyMessage="No notifications"
        />
      </div>
    </div>
  )
}




// app/main/admin/settings/page.tsx

'use client'

import { useState, useEffect } from 'react'
import { useTheme } from '@/components/ThemeContext'
import { Save, Settings, Shield, Bell, Bot, Upload, Check } from 'lucide-react'

interface CommunitySettings {
  name: string
  description: string
  code: string
  logo_url: string
  allow_guest_access: boolean
  require_approval: boolean
  auto_archive_polls: boolean
  enable_ai_insights: boolean
  notification_settings: {
    email_notifications: boolean
    push_notifications: boolean
    daily_digest: boolean
    weekly_summary: boolean
  }
  ai_settings: {
    sentiment_analysis: boolean
    anomaly_detection: boolean
    auto_categorization: boolean
    chatbot_enabled: boolean
  }
}

export default function AdminSettings() {
  const { isDark } = useTheme()
  const [settings, setSettings] = useState<CommunitySettings>({
    name: '',
    description: '',
    code: '',
    logo_url: '',
    allow_guest_access: true,
    require_approval: false,
    auto_archive_polls: true,
    enable_ai_insights: true,
    notification_settings: {
      email_notifications: true,
      push_notifications: true,
      daily_digest: false,
      weekly_summary: true
    },
    ai_settings: {
      sentiment_analysis: true,
      anomaly_detection: true,
      auto_categorization: true,
      chatbot_enabled: true
    }
  })
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [saved, setSaved] = useState(false)

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const response = await fetch('/api/admin/settings')
        if (!response.ok) {
          throw new Error('Failed to fetch settings')
        }
        const data = await response.json()
        setSettings(data)
      } catch (error) {
        console.error('Failed to fetch settings:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchSettings()
  }, [])

  const handleSave = async () => {
    setSaving(true)
    try {
      const response = await fetch('/api/admin/settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: settings.name,
          description: settings.description,
          code: settings.code,
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to save settings')
      }

      setSaved(true)
      setTimeout(() => setSaved(false), 3000)
    } catch (error) {
      console.error('Failed to save settings:', error)
    } finally {
      setSaving(false)
    }
  }

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    // Handle image upload logic here
    console.log('Uploading image:', file)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            Community Settings
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            Configure your community preferences and features
          </p>
        </div>

        <button
          onClick={handleSave}
          disabled={saving}
          className="inline-flex items-center px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
        >
          {saving ? (
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
          ) : saved ? (
            <Check className="w-4 h-4 mr-2" />
          ) : (
            <Save className="w-4 h-4 mr-2" />
          )}
          {saving ? 'Saving...' : saved ? 'Saved!' : 'Save Changes'}
        </button>
      </div>

      {/* Basic Information */}
      <div className={`p-6 rounded-xl border ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'}`}>
        <div className="flex items-center mb-4">
          <Settings className="w-5 h-5 text-blue-500 mr-2" />
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Basic Information
          </h2>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Community Name
            </label>
            <input
              type="text"
              value={settings.name}
              onChange={(e) => setSettings({ ...settings, name: e.target.value })}
              className={`
                w-full px-3 py-2 rounded-lg border transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500
                ${isDark
                  ? 'bg-slate-700 border-slate-600 text-white'
                  : 'bg-white border-slate-300 text-gray-900'
                }
              `}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Community Code
            </label>
            <input
              type="text"
              value={settings.code}
              onChange={(e) => setSettings({ ...settings, code: e.target.value })}
              className={`
                w-full px-3 py-2 rounded-lg border transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500
                ${isDark
                  ? 'bg-slate-700 border-slate-600 text-white'
                  : 'bg-white border-slate-300 text-gray-900'
                }
              `}
            />
          </div>

          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Description
            </label>
            <textarea
              rows={3}
              value={settings.description}
              onChange={(e) => setSettings({ ...settings, description: e.target.value })}
              className={`
                w-full px-3 py-2 rounded-lg border transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500
                ${isDark
                  ? 'bg-slate-700 border-slate-600 text-white'
                  : 'bg-white border-slate-300 text-gray-900'
                }
              `}
            />
          </div>

          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Community Logo
            </label>
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 rounded-lg bg-gray-200 dark:bg-slate-700 flex items-center justify-center">
                {settings.logo_url ? (
                  <img src={settings.logo_url} alt="Community Logo" className="w-full h-full rounded-lg object-cover" />
                ) : (
                  <Upload className="w-6 h-6 text-gray-400" />
                )}
              </div>
              <input
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                className="hidden"
                id="logo-upload"
              />
              <label
                htmlFor="logo-upload"
                className="cursor-pointer inline-flex items-center px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-700 hover:bg-gray-50 dark:hover:bg-slate-600"
              >
                <Upload className="w-4 h-4 mr-2" />
                Upload Logo
              </label>
            </div>
          </div>
        </div>
      </div>

      {/* Access Control */}
      <div className={`p-6 rounded-xl border ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'}`}>
        <div className="flex items-center mb-4">
          <Shield className="w-5 h-5 text-green-500 mr-2" />
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Access Control
          </h2>
        </div>

        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-sm font-medium text-gray-900 dark:text-white">Allow Guest Access</h3>
              <p className="text-sm text-gray-500 dark:text-gray-400">Let guests view public content without joining</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={settings.allow_guest_access}
                onChange={(e) => setSettings({ ...settings, allow_guest_access: e.target.checked })}
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
            </label>
          </div>

          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-sm font-medium text-gray-900 dark:text-white">Require Approval</h3>
              <p className="text-sm text-gray-500 dark:text-gray-400">New members need admin approval to join</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={settings.require_approval}
                onChange={(e) => setSettings({ ...settings, require_approval: e.target.checked })}
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
            </label>
          </div>

          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-sm font-medium text-gray-900 dark:text-white">Auto-Archive Polls</h3>
              <p className="text-sm text-gray-500 dark:text-gray-400">Automatically archive polls after deadline</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={settings.auto_archive_polls}
                onChange={(e) => setSettings({ ...settings, auto_archive_polls: e.target.checked })}
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
            </label>
          </div>
        </div>
      </div>

      {/* Notification Settings */}
      <div className={`p-6 rounded-xl border ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'}`}>
        <div className="flex items-center mb-4">
          <Bell className="w-5 h-5 text-yellow-500 mr-2" />
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Notification Settings
          </h2>
        </div>

        <div className="space-y-4">
          {Object.entries(settings.notification_settings).map(([key, value]) => (
            <div key={key} className="flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-gray-900 dark:text-white capitalize">
                  {key.replace('_', ' ')}
                </h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {key === 'email_notifications' && 'Send notifications via email'}
                  {key === 'push_notifications' && 'Browser push notifications'}
                  {key === 'daily_digest' && 'Daily summary of community activity'}
                  {key === 'weekly_summary' && 'Weekly community report'}
                </p>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={value}
                  onChange={(e) => setSettings({
                    ...settings,
                    notification_settings: {
                      ...settings.notification_settings,
                      [key]: e.target.checked
                    }
                  })}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
              </label>
            </div>
          ))}
        </div>
      </div>

      {/* AI Settings */}
      <div className={`p-6 rounded-xl border ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'}`}>
        <div className="flex items-center mb-4">
          <Bot className="w-5 h-5 text-purple-500 mr-2" />
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            AI Features
          </h2>
        </div>

        <div className="space-y-4">
          {Object.entries(settings.ai_settings).map(([key, value]) => (
            <div key={key} className="flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-gray-900 dark:text-white capitalize">
                  {key.replace('_', ' ')}
                </h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {key === 'sentiment_analysis' && 'Analyze sentiment in feedback and complaints'}
                  {key === 'anomaly_detection' && 'Detect unusual patterns in community activity'}
                  {key === 'auto_categorization' && 'Automatically categorize complaints and feedback'}
                  {key === 'chatbot_enabled' && 'Enable AI chatbot for community support'}
                </p>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={value}
                  onChange={(e) => setSettings({
                    ...settings,
                    ai_settings: {
                      ...settings.ai_settings,
                      [key]: e.target.checked
                    }
                  })}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
              </label>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { DataTable, EmptyState, ConfirmDialog } from '@/components/mainapp/components'
import { Toast } from '@/components/Toast'
import { PlusSquare, Eye, Edit, Trash2, Calendar, Users } from 'lucide-react'

interface Poll {
  id: string
  title: string
  description: string
  deadline: string
  created_at: string
  vote_count: number
  status: 'active' | 'closed' | 'draft'
}

export default function AdminPolls() {
  const [polls, setPolls] = useState<Poll[]>([])
  const [loading, setLoading] = useState(true)
  const [deleteDialog, setDeleteDialog] = useState<{ isOpen: boolean; pollId: string; title: string }>({
    isOpen: false,
    pollId: '',
    title: ''
  })
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null)

  useEffect(() => {
    const fetchPolls = async () => {
      try {
        const response = await fetch('/api/polls')
        if (response.ok) {
          const data = await response.json()
          setPolls(data.polls || [])
        }
      } catch (error) {
        console.error('Failed to fetch polls:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchPolls()
  }, [])

  const handleDeletePoll = async () => {
    const pollToDelete = polls.find(poll => poll.id === deleteDialog.pollId)
    if (!pollToDelete) {
      setDeleteDialog({ isOpen: false, pollId: '', title: '' })
      return
    }

    // Optimistic update: remove from UI immediately
    setPolls(prev => prev.filter(poll => poll.id !== deleteDialog.pollId))
    setToast({ message: 'Deleting poll...', type: 'info' })

    try {
      const response = await fetch(`/api/polls/${deleteDialog.pollId}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        // Revert optimistic update on failure
        setPolls(prev => [...prev, pollToDelete])
        const errorData = await response.json()
        setToast({ message: errorData.error || 'Failed to delete poll', type: 'error' })
        return
      }

      setToast({ message: 'Poll deleted successfully', type: 'success' })
    } catch (error) {
      // Revert optimistic update on error
      setPolls(prev => [...prev, pollToDelete])
      console.error('Failed to delete poll:', error)
      setToast({ message: 'Failed to delete poll', type: 'error' })
    }

    setDeleteDialog({ isOpen: false, pollId: '', title: '' })
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
      case 'closed':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
      case 'draft':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
    }
  }

  const columns = [
    {
      key: 'title' as const,
      header: 'Title',
      render: (value: string, row: Poll) => (
        <div>
          <div className="font-medium text-gray-900 dark:text-white">{value}</div>
          {row.description && (
            <div className="text-sm text-gray-500 dark:text-gray-400 truncate max-w-xs">
              {row.description}
            </div>
          )}
        </div>
      )
    },
    {
      key: 'status' as const,
      header: 'Status',
      render: (value: string) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(value)}`}>
          {value.charAt(0).toUpperCase() + value.slice(1)}
        </span>
      )
    },
    {
      key: 'vote_count' as const,
      header: 'Votes',
      render: (value: number) => (
        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
          <Users className="w-4 h-4 mr-1" />
          {value}
        </div>
      )
    },
    {
      key: 'deadline' as const,
      header: 'Deadline',
      render: (value: string) => (
        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
          <Calendar className="w-4 h-4 mr-1" />
          {value ? new Date(value).toLocaleDateString() : 'No deadline'}
        </div>
      )
    },
    {
      key: 'created_at' as const,
      header: 'Created',
      render: (value: string) => new Date(value).toLocaleDateString()
    },
    {
      key: 'id' as const,
      header: 'Actions',
      render: (value: string, row: Poll) => (
        <div className="flex items-center space-x-2">
          <Link
            href={`/main/admin/polls/${value}`}
            className="p-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200"
          >
            <Eye className="w-4 h-4" />
          </Link>
          <button
            onClick={() => setDeleteDialog({ isOpen: true, pollId: value, title: row.title })}
            className="p-1 text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-200"
          >
            <Trash2 className="w-4 h-4" />
          </button>
        </div>
      )
    }
  ]

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            Manage Polls
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            Create and manage community polls
          </p>
        </div>
        <Link
          href="/main/admin/polls/create"
          className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
        >
          <PlusSquare className="w-4 h-4 mr-2" />
          Create Poll
        </Link>
      </div>

      {/* Polls Table */}
      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
        {polls.length === 0 && !loading ? (
          <EmptyState
            title="No polls yet"
            description="Create your first poll to engage with the community"
            icon={PlusSquare}
            actionLabel="Create Poll"
            // actionHref="/main/admin/polls/create"
          />
        ) : (
          <DataTable
            data={polls}
            columns={columns}
            loading={loading}
            emptyMessage="No polls found"
          />
        )}
      </div>

      {/* Delete Confirmation Dialog */}
      <ConfirmDialog
        isOpen={deleteDialog.isOpen}
        onClose={() => setDeleteDialog({ isOpen: false, pollId: '', title: '' })}
        onConfirm={handleDeletePoll}
        title="Delete Poll"
        description={`Are you sure you want to delete "${deleteDialog.title}"? This action cannot be undone.`}
        confirmLabel="Delete"
        variant="danger"
      />

      {/* Toast Notifications */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </div>
  )
}





// @/app/main/admin/polls/create/page.tsx - Google Forms style with live preview
'use client'

import { useState, useRef } from 'react'
import { useRouter } from 'next/navigation'
import { useTheme } from '@/components/ThemeContext'
import { Toast } from '@/components/Toast'
import { 
  Plus, X, Save, Eye, EyeOff, GripVertical, Copy, 
  ChevronUp, ChevronDown, Trash2, Type, RadioIcon, 
  CheckSquare, Settings, Smartphone, Monitor, MessageSquare
} from 'lucide-react'

interface PollQuestion {
  id: string
  type: 'radio' | 'checkbox' | 'text'
  question: string
  options?: string[]
  required: boolean
}

interface PollData {
  title: string
  description: string
  deadline: string
  is_anonymous: boolean
  questions: PollQuestion[]
  footer_note: string
  complaint_link: string
}

export default function CreatePoll() {
  const router = useRouter()
  const { isDark } = useTheme()
  const [loading, setLoading] = useState(false)
  const [showPreview, setShowPreview] = useState(false)
  const [previewMode, setPreviewMode] = useState<'desktop' | 'mobile'>('desktop')
  const [expandedQuestions, setExpandedQuestions] = useState<Set<string>>(new Set())
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null)

  const [formData, setFormData] = useState<PollData>({
    title: '',
    description: '',
    deadline: '',
    is_anonymous: false,
    questions: [],
    footer_note: 'If you have any concerns or complaints, please feel free to contact us.',
    complaint_link: '/main/complaints'
  })

  const addQuestion = (type: PollQuestion['type'] = 'radio') => {
    const newQuestion: PollQuestion = {
      id: Date.now().toString(),
      type,
      question: '',
      options: type === 'radio' ? ['Option 1', 'Option 2'] : undefined,
      required: true
    }
    
    setFormData(prev => ({
      ...prev,
      questions: [...prev.questions, newQuestion]
    }))
    
    setExpandedQuestions(prev => new Set([...prev, newQuestion.id]))
  }

  const updateQuestion = (questionId: string, updates: Partial<PollQuestion>) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.map(q => 
        q.id === questionId ? { ...q, ...updates } : q
      )
    }))
  }

  const removeQuestion = (questionId: string) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.filter(q => q.id !== questionId)
    }))
    setExpandedQuestions(prev => {
      const newSet = new Set(prev)
      newSet.delete(questionId)
      return newSet
    })
  }

  const duplicateQuestion = (questionId: string) => {
    const questionToDuplicate = formData.questions.find(q => q.id === questionId)
    if (!questionToDuplicate) return

    const duplicated: PollQuestion = {
      ...questionToDuplicate,
      id: Date.now().toString(),
      question: `${questionToDuplicate.question} (Copy)`
    }

    setFormData(prev => ({
      ...prev,
      questions: [...prev.questions, duplicated]
    }))
    setExpandedQuestions(prev => new Set([...prev, duplicated.id]))
  }

  const moveQuestion = (questionId: string, direction: 'up' | 'down') => {
    const currentIndex = formData.questions.findIndex(q => q.id === questionId)
    if (currentIndex === -1) return

    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1
    if (newIndex < 0 || newIndex >= formData.questions.length) return

    setFormData(prev => {
      const newQuestions = [...prev.questions]
      const [movedQuestion] = newQuestions.splice(currentIndex, 1)
      newQuestions.splice(newIndex, 0, movedQuestion)
      return { ...prev, questions: newQuestions }
    })
  }

  const updateQuestionOption = (questionId: string, optionIndex: number, value: string) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.map(q => {
        if (q.id === questionId && q.options) {
          const newOptions = [...q.options]
          newOptions[optionIndex] = value
          return { ...q, options: newOptions }
        }
        return q
      })
    }))
  }

  const addQuestionOption = (questionId: string) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.map(q => {
        if (q.id === questionId && q.options) {
          return { ...q, options: [...q.options, `Option ${q.options.length + 1}`] }
        }
        return q
      })
    }))
  }

  const removeQuestionOption = (questionId: string, optionIndex: number) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.map(q => {
        if (q.id === questionId && q.options && q.options.length > 2) {
          const newOptions = q.options.filter((_, i) => i !== optionIndex)
          return { ...q, options: newOptions }
        }
        return q
      })
    }))
  }

  const toggleQuestionExpansion = (questionId: string) => {
    setExpandedQuestions(prev => {
      const newSet = new Set(prev)
      if (newSet.has(questionId)) {
        newSet.delete(questionId)
      } else {
        newSet.add(questionId)
      }
      return newSet
    })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)

    // Validate form
    if (!formData.title.trim()) {
      setToast({ message: 'Poll title is required', type: 'error' })
      setLoading(false)
      return
    }

    if (formData.questions.length === 0) {
      setToast({ message: 'At least 1 question is required', type: 'error' })
      setLoading(false)
      return
    }

    // Validate questions
    const validationErrors: string[] = []
    formData.questions.forEach((question, index) => {
      if (!question.question.trim()) {
        validationErrors.push(`Question ${index + 1} is required`)
      }
      if (question.type === 'radio' && (!question.options || question.options.some(opt => !opt.trim()))) {
        validationErrors.push(`Question ${index + 1} must have valid options`)
      }
    })

    if (validationErrors.length > 0) {
      setToast({ message: validationErrors.join(', '), type: 'error' })
      setLoading(false)
      return
    }

    try {
      const response = await fetch('/api/polls', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      if (response.ok) {
        setToast({ message: 'Poll created successfully', type: 'success' })
        setTimeout(() => {
          router.push('/main/admin/polls')
        }, 1500)
      } else {
        const errorData = await response.json()
        setToast({ message: errorData.error || 'Failed to create poll', type: 'error' })
      }
    } catch (error) {
      console.error('Error creating poll:', error)
      setToast({ message: 'Failed to create poll', type: 'error' })
    } finally {
      setLoading(false)
    }
  }

  const getQuestionIcon = (type: PollQuestion['type']) => {
    switch (type) {
      case 'radio': return <RadioIcon className="w-4 h-4 text-blue-500" />
      case 'checkbox': return <CheckSquare className="w-4 h-4 text-green-500" />
      case 'text': return <Type className="w-4 h-4 text-purple-500" />
      default: return <Type className="w-4 h-4 text-gray-500" />
    }
  }

  const renderQuestionEditor = (question: PollQuestion, index: number) => {
    const isExpanded = expandedQuestions.has(question.id)

    return (
      <div
        key={question.id}
        className={`border rounded-xl transition-all duration-200 ${
          isDark ? 'border-slate-600 bg-slate-800/50' : 'border-slate-200 bg-white'
        } ${isExpanded ? 'ring-2 ring-blue-500/20' : 'hover:shadow-md'}`}
      >
        {/* Question Header */}
        <div
          className="flex items-center justify-between p-4 cursor-pointer"
          onClick={() => toggleQuestionExpansion(question.id)}
        >
          <div className="flex items-center space-x-3">
            <GripVertical className="w-4 h-4 text-slate-400 cursor-grab" />
            {getQuestionIcon(question.type)}
            <div>
              <h4 className="font-medium text-slate-900 dark:text-white">
                {question.question || `Question ${index + 1}`}
              </h4>
              <p className="text-sm text-slate-500 dark:text-slate-400">
                {question.type === 'radio' ? 'Multiple Choice' : question.type === 'text' ? 'Short Answer' : 'Checkboxes'}
              </p>
            </div>
            {question.required && (
              <span className="text-red-500 text-sm font-medium">*</span>
            )}
          </div>

          <div className="flex items-center space-x-2">
            <button
              onClick={(e) => {
                e.stopPropagation()
                duplicateQuestion(question.id)
              }}
              className="p-1 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 rounded"
              title="Duplicate question"
            >
              <Copy className="w-4 h-4" />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation()
                moveQuestion(question.id, 'up')
              }}
              disabled={index === 0}
              className="p-1 text-slate-400 hover:text-slate-600 disabled:opacity-50 rounded"
              title="Move up"
            >
              <ChevronUp className="w-4 h-4" />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation()
                moveQuestion(question.id, 'down')
              }}
              disabled={index === formData.questions.length - 1}
              className="p-1 text-slate-400 hover:text-slate-600 disabled:opacity-50 rounded"
              title="Move down"
            >
              <ChevronDown className="w-4 h-4" />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation()
                removeQuestion(question.id)
              }}
              className="p-1 text-red-400 hover:text-red-600 rounded"
              title="Delete question"
            >
              <Trash2 className="w-4 h-4" />
            </button>
            {isExpanded ? (
              <ChevronUp className="w-4 h-4 text-slate-400" />
            ) : (
              <ChevronDown className="w-4 h-4 text-slate-400" />
            )}
          </div>
        </div>

        {/* Question Configuration */}
        {isExpanded && (
          <div className="px-4 pb-4 border-t border-slate-200 dark:border-slate-700">
            <div className="space-y-4 pt-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                    Question
                  </label>
                  <input
                    type="text"
                    value={question.question}
                    onChange={(e) => updateQuestion(question.id, { question: e.target.value })}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    placeholder="Enter your question..."
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                    Question Type
                  </label>
                  <select
                    value={question.type}
                    onChange={(e) => updateQuestion(question.id, { 
                      type: e.target.value as PollQuestion['type'],
                      options: e.target.value === 'radio' ? ['Option 1', 'Option 2'] : undefined
                    })}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                  >
                    <option value="radio">📻 Multiple Choice</option>
                    <option value="text">📝 Short Answer</option>
                    <option value="checkbox">☑️ Checkboxes</option>
                  </select>
                </div>
              </div>

              <div className="flex items-center space-x-6">
                <label className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={question.required}
                    onChange={(e) => updateQuestion(question.id, { required: e.target.checked })}
                    className="w-4 h-4 text-blue-600 bg-slate-100 border-slate-300 rounded focus:ring-blue-500"
                  />
                  <span className="text-sm text-slate-700 dark:text-slate-300">
                    Required
                  </span>
                </label>
              </div>

              {/* Options for radio/checkbox questions */}
              {question.type === 'radio' && question.options && (
                <div className="space-y-3">
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                    Options
                  </label>
                  {question.options.map((option, optionIndex) => (
                    <div key={optionIndex} className="flex items-center space-x-2">
                      <div className="w-4 h-4 border-2 border-slate-400 rounded-full flex-shrink-0"></div>
                      <input
                        type="text"
                        value={option}
                        onChange={(e) => updateQuestionOption(question.id, optionIndex, e.target.value)}
                        className={`flex-1 px-3 py-2 border rounded-lg transition-colors ${
                          isDark
                            ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                            : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                        }`}
                        placeholder={`Option ${optionIndex + 1}`}
                      />
                      {question.options!.length > 2 && (
                        <button
                          onClick={() => removeQuestionOption(question.id, optionIndex)}
                          className="p-2 text-red-400 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                          title="Remove option"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  ))}
                  <button
                    onClick={() => addQuestionOption(question.id)}
                    className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
                  >
                    <Plus className="w-4 h-4" />
                    <span className="text-sm">Add Option</span>
                  </button>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    )
  }

  const renderPreview = () => (
    <div className={`rounded-xl border ${
      isDark ? 'border-slate-600 bg-slate-900' : 'border-slate-200 bg-white'
    }`}>
      <div className="p-6 border-b border-slate-200 dark:border-slate-700">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-slate-900 dark:text-white">
            Live Preview
          </h3>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setPreviewMode('desktop')}
              className={`p-2 rounded-lg transition-colors ${
                previewMode === 'desktop'
                  ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'
                  : 'text-slate-400 hover:text-slate-600 dark:hover:text-slate-300'
              }`}
              title="Desktop view"
            >
              <Monitor className="w-4 h-4" />
            </button>
            <button
              onClick={() => setPreviewMode('mobile')}
              className={`p-2 rounded-lg transition-colors ${
                previewMode === 'mobile'
                  ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'
                  : 'text-slate-400 hover:text-slate-600 dark:hover:text-slate-300'
              }`}
              title="Mobile view"
            >
              <Smartphone className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      <div className={`p-6 ${previewMode === 'mobile' ? 'max-w-sm mx-auto' : ''}`}>
        <div className="space-y-6">
          {/* Poll Header */}
          <div className="text-center">
            <h2 className="text-2xl font-bold text-slate-900 dark:text-white mb-2">
              {formData.title || 'Untitled Poll'}
            </h2>
            {formData.description && (
              <p className="text-slate-600 dark:text-slate-400">
                {formData.description}
              </p>
            )}
          </div>

          {/* Questions */}
          <form className="space-y-6">
            {formData.questions.map((question, index) => (
              <div key={question.id} className="space-y-3">
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                  {index + 1}. {question.question || `Question ${index + 1}`}
                  {question.required && <span className="text-red-500 ml-1">*</span>}
                </label>

                {question.type === 'radio' && question.options && (
                  <div className="space-y-2">
                    {question.options.map((option, optionIndex) => (
                      <label key={optionIndex} className="flex items-center space-x-3 cursor-pointer">
                        <input
                          type="radio"
                          name={`question-${question.id}`}
                          className="w-4 h-4 text-blue-600 border-slate-300 focus:ring-blue-500"
                          disabled
                        />
                        <span className="text-slate-700 dark:text-slate-300">{option}</span>
                      </label>
                    ))}
                  </div>
                )}

                {question.type === 'text' && (
                  <input
                    type="text"
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-800 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    placeholder="Your answer"
                    disabled
                  />
                )}

                {question.type === 'checkbox' && question.options && (
                  <div className="space-y-2">
                    {question.options.map((option, optionIndex) => (
                      <label key={optionIndex} className="flex items-center space-x-3 cursor-pointer">
                        <input
                          type="checkbox"
                          className="w-4 h-4 text-blue-600 border-slate-300 rounded focus:ring-blue-500"
                          disabled
                        />
                        <span className="text-slate-700 dark:text-slate-300">{option}</span>
                      </label>
                    ))}
                  </div>
                )}
              </div>
            ))}

            {formData.questions.length === 0 && (
              <div className="text-center py-8">
                <MessageSquare className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                <p className="text-slate-500 dark:text-slate-400">
                  Add questions to see the preview
                </p>
              </div>
            )}

            {/* Footer */}
            {formData.questions.length > 0 && (
              <>
                <button
                  type="button"
                  className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
                  disabled
                >
                  Submit
                </button>

                {formData.footer_note && (
                  <div className="text-center text-sm text-slate-500 dark:text-slate-400 border-t pt-4">
                    <p>{formData.footer_note}</p>
                    <a
                      href={formData.complaint_link}
                      className="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 underline"
                    >
                      Contact us or submit a complaint
                    </a>
                  </div>
                )}
              </>
            )}
          </form>
        </div>
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-slate-900 dark:text-white">Create Poll</h1>
            <p className="text-slate-600 dark:text-slate-400">Create a new poll for your community</p>
          </div>
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setShowPreview(!showPreview)}
              className="flex items-center space-x-2 px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors"
            >
              {showPreview ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
              <span>{showPreview ? 'Hide' : 'Show'} Preview</span>
            </button>
            <button
              onClick={handleSubmit}
              disabled={loading}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"
            >
              <Save className="w-4 h-4" />
              <span>{loading ? 'Saving...' : 'Save Poll'}</span>
            </button>
          </div>
        </div>

        <div className={`grid grid-cols-1 ${showPreview ? 'lg:grid-cols-2' : ''} gap-8`}>
          {/* Form Section */}
          <div className="space-y-6">
            {/* Poll Settings */}
            <div className={`rounded-xl border p-6 ${isDark ? 'border-slate-600 bg-slate-800/50' : 'border-slate-200 bg-white'}`}>
              <h2 className="text-xl font-semibold text-slate-900 dark:text-white mb-4">Poll Settings</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Title *</label>
                  <input
                    type="text"
                    value={formData.title}
                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    placeholder="Enter poll title"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Description</label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    rows={3}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    placeholder="Enter poll description"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Deadline</label>
                  <input
                    type="datetime-local"
                    value={formData.deadline}
                    onChange={(e) => setFormData(prev => ({ ...prev, deadline: e.target.value }))}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                  />
                </div>

                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="anonymous"
                    checked={formData.is_anonymous}
                    onChange={(e) => setFormData(prev => ({ ...prev, is_anonymous: e.target.checked }))}
                    className="w-4 h-4 text-blue-600 bg-slate-100 border-slate-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="anonymous" className="text-sm text-slate-700 dark:text-slate-300">
                    Anonymous poll
                  </label>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Footer Note</label>
                  <textarea
                    value={formData.footer_note}
                    onChange={(e) => setFormData(prev => ({ ...prev, footer_note: e.target.value }))}
                    rows={2}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    placeholder="Footer note for the poll"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Complaint Link</label>
                  <input
                    type="text"
                    value={formData.complaint_link}
                    onChange={(e) => setFormData(prev => ({ ...prev, complaint_link: e.target.value }))}
                    className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                      isDark
                        ? 'bg-slate-700 border-slate-600 text-white focus:border-blue-500'
                        : 'bg-white border-slate-300 text-slate-900 focus:border-blue-500'
                    }`}
                    placeholder="/main/complaints"
                  />
                </div>
              </div>
            </div>

            {/* Questions Section */}
            <div className={`rounded-xl border p-6 ${isDark ? 'border-slate-600 bg-slate-800/50' : 'border-slate-200 bg-white'}`}>
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-slate-900 dark:text-white">Questions</h2>
                <div className="flex space-x-2">
                  <button
                    onClick={() => addQuestion('radio')}
                    className="flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    <Plus className="w-4 h-4" />
                    <span>Add Question</span>
                  </button>
                </div>
              </div>

              <div className="space-y-4">
                {formData.questions.map((question, index) => renderQuestionEditor(question, index))}

                {formData.questions.length === 0 && (
                  <div className="text-center py-8">
                    <MessageSquare className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                    <p className="text-slate-500 dark:text-slate-400">No questions added yet. Click "Add Question" to get started.</p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Preview Section */}
          {showPreview && (
            <div className="lg:col-span-1">
              {renderPreview()}
            </div>
          )}
        </div>

        {/* Toast */}
        {toast && (
          <Toast
            message={toast.message}
            type={toast.type}
            onClose={() => setToast(null)}
          />
        )}
      </div>
    </div>
  )
}






THE MOST IMPORTANT PAGES USER PAGE WHICH THIS YOU WILL FOCUS ON:




// @/app/main/user/ask-ecomai/page.tsx
'use client'

import { useState } from 'react'
import { useTheme } from '@/components/ThemeContext'
import { Send, Bot, User } from 'lucide-react'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

export default function UserAskEComAI() {
  const { isDark } = useTheme()
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: 'Hello! I\'m EComAI, your community assistant. How can I help you today?',
      timestamp: new Date()
    }
  ])
  const [input, setInput] = useState('')
  const [loading, setLoading] = useState(false)

  const faqQuestions = [
    'How do I submit a complaint?',
    'When is the next community meeting?',
    'How do I vote on polls?',
    'Who are the community administrators?'
  ]

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || loading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim(),
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInput('')
    setLoading(true)

    try {
      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: input.trim(), history: messages })
      })

      if (response.ok) {
        const data = await response.json()
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: data.response,
          timestamp: new Date()
        }
        setMessages(prev => [...prev, assistantMessage])
      }
    } catch (error) {
      console.error('Chat error:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleFAQClick = (question: string) => {
    setInput(question)
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Ask EComAI</h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">Get help with community questions and information</p>
      </div>

      {/* FAQ Chips */}
      <div className="flex flex-wrap gap-2">
        {faqQuestions.map((question, index) => (
          <button
            key={index}
            onClick={() => handleFAQClick(question)}
            className={`px-3 py-1 text-sm rounded-full border transition-colors ${
              isDark 
                ? 'border-slate-600 text-slate-300 hover:bg-slate-700' 
                : 'border-slate-300 text-slate-600 hover:bg-slate-50'
            }`}
          >
            {question}
          </button>
        ))}
      </div>

      {/* Chat Messages */}
      <div className={`h-96 overflow-y-auto p-4 rounded-xl border ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'}`}>
        <div className="space-y-4">
          {messages.map((message) => (
            <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`flex items-start space-x-2 max-w-xs lg:max-w-md ${message.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  message.role === 'user' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-green-500 text-white'
                }`}>
                  {message.role === 'user' ? <User className="w-4 h-4" /> : <Bot className="w-4 h-4" />}
                </div>
                <div className={`px-4 py-2 rounded-lg ${
                  message.role === 'user'
                    ? 'bg-blue-500 text-white'
                    : isDark 
                      ? 'bg-slate-700 text-white' 
                      : 'bg-gray-100 text-gray-900'
                }`}>
                  <p className="text-sm">{message.content}</p>
                </div>
              </div>
            </div>
          ))}
          {loading && (
            <div className="flex justify-start">
              <div className="flex items-start space-x-2">
                <div className="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center">
                  <Bot className="w-4 h-4 text-white" />
                </div>
                <div className={`px-4 py-2 rounded-lg ${isDark ? 'bg-slate-700' : 'bg-gray-100'}`}>
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Chat Input */}
      <form onSubmit={handleSubmit} className="flex space-x-2">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          disabled={loading}
          placeholder="Ask me anything about the community..."
          className={`flex-1 px-4 py-2 rounded-lg border ${
            isDark 
              ? 'bg-slate-700 border-slate-600 text-white' 
              : 'bg-white border-slate-300 text-gray-900'
          } focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50`}
        />
        <button
          type="submit"
          disabled={loading || !input.trim()}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <Send className="w-4 h-4" />
        </button>
      </form>
    </div>
  )
}



// @/app/main/user/complaints/my/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { DataTable } from '@/components/mainapp/components'
import { MessageSquareWarning, Calendar } from 'lucide-react'

interface Complaint {
  id: string
  title: string
  category: string
  status: string
  created_at: string
}

export default function MyComplaints() {
  const [complaints, setComplaints] = useState<Complaint[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchComplaints = async () => {
      try {
        const response = await fetch('/api/complaints?my=true')
        if (response.ok) {
          const data = await response.json()
          setComplaints(data.complaints || [])
        }
      } catch (error) {
        console.error('Failed to fetch complaints:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchComplaints()
  }, [])

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
      case 'in-progress': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
      case 'resolved': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
    }
  }

  const columns = [
    {
      key: 'title' as const,
      header: 'Complaint',
      render: (value: string, row: Complaint) => (
        <div>
          <div className="font-medium text-gray-900 dark:text-white">{value}</div>
          <div className="text-sm text-gray-500 dark:text-gray-400 capitalize">{row.category}</div>
        </div>
      )
    },
    {
      key: 'status' as const,
      header: 'Status',
      render: (value: string) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(value)}`}>
          {value.charAt(0).toUpperCase() + value.slice(1).replace('-', ' ')}
        </span>
      )
    },
    {
      key: 'created_at' as const,
      header: 'Submitted',
      render: (value: string) => (
        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
          <Calendar className="w-4 h-4 mr-1" />
          {new Date(value).toLocaleDateString()}
        </div>
      )
    }
  ]

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
          My Complaints
        </h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">
          Track the status of your submitted complaints
        </p>
      </div>

      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
        <DataTable
          data={complaints}
          columns={columns}
          loading={loading}
          emptyMessage="You haven't submitted any complaints yet"
        />
      </div>
    </div>
  )
}

// @/app/main/user/complaints/submit/page.tsx
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useTheme } from '@/components/ThemeContext'
import { Send, AlertTriangle } from 'lucide-react'

export default function SubmitComplaint() {
  const router = useRouter()
  const { isDark } = useTheme()
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category: 'other'
  })

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)

    try {
      const response = await fetch('/api/complaints', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      })

      if (response.ok) {
        router.push('/main/user/complaints/my')
      }
    } catch (error) {
      console.error('Error submitting complaint:', error)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="max-w-2xl mx-auto space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
          Submit Complaint
        </h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">
          Report issues or concerns to the community administrators
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className={`p-6 rounded-xl border ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'}`}>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Title *
              </label>
              <input
                type="text"
                required
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                className={`w-full px-3 py-2 rounded-lg border ${isDark ? 'bg-slate-700 border-slate-600' : 'bg-white border-slate-300'}`}
                placeholder="Brief description of the issue"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Category
              </label>
              <select
                value={formData.category}
                onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                className={`w-full px-3 py-2 rounded-lg border ${isDark ? 'bg-slate-700 border-slate-600' : 'bg-white border-slate-300'}`}
              >
                <option value="maintenance">Maintenance</option>
                <option value="governance">Governance</option>
                <option value="other">Other</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Description *
              </label>
              <textarea
                required
                rows={6}
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                className={`w-full px-3 py-2 rounded-lg border ${isDark ? 'bg-slate-700 border-slate-600' : 'bg-white border-slate-300'}`}
                placeholder="Provide detailed information about your complaint..."
              />
            </div>
          </div>
        </div>

        <div className="flex items-center justify-between">
          <button
            type="button"
            onClick={() => router.back()}
            className={`px-4 py-2 border rounded-lg ${isDark ? 'border-slate-600 hover:bg-slate-700' : 'border-slate-300 hover:bg-gray-50'}`}
          >
            Cancel
          </button>
          
          <button
            type="submit"
            disabled={loading}
            className="inline-flex items-center px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
            ) : (
              <Send className="w-4 h-4 mr-2" />
            )}
            {loading ? 'Submitting...' : 'Submit Complaint'}
          </button>
        </div>
      </form>
    </div>
  )
}


// @/app/main/user/feedback/my/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { DataTable } from '@/components/mainapp/components'
import { Star, Calendar } from 'lucide-react'

interface Feedback {
  id: string
  rating: number
  comment: string
  created_at: string
}

export default function MyFeedback() {
  const [feedback, setFeedback] = useState<Feedback[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchFeedback = async () => {
      try {
        const response = await fetch('/api/feedback?my=true')
        if (response.ok) {
          const data = await response.json()
          setFeedback(data.feedback || [])
        }
      } finally {
        setLoading(false)
      }
    }
    fetchFeedback()
  }, [])

  const renderStars = (rating: number) => (
    <div className="flex items-center">
      {[1, 2, 3, 4, 5].map((star) => (
        <Star
          key={star}
          className={`w-4 h-4 ${star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
        />
      ))}
    </div>
  )

  const columns = [
    {
      key: 'rating' as const,
      header: 'Rating',
      render: (value: number) => renderStars(value)
    },
    {
      key: 'comment' as const,
      header: 'Comment',
      render: (value: string) => value || <span className="italic text-gray-400">No comment</span>
    },
    {
      key: 'created_at' as const,
      header: 'Date',
      render: (value: string) => (
        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
          <Calendar className="w-4 h-4 mr-1" />
          {new Date(value).toLocaleDateString()}
        </div>
      )
    }
  ]

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">My Feedback</h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">View your submitted feedback history</p>
      </div>

      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
        <DataTable
          data={feedback}
          columns={columns}
          loading={loading}
          emptyMessage="You haven't submitted any feedback yet"
        />
      </div>
    </div>
  )
}
// @/app/main/user/feedback/submit/page.tsx
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useTheme } from '@/components/ThemeContext'
import { Star, Send } from 'lucide-react'

export default function SubmitFeedback() {
  const router = useRouter()
  const { isDark } = useTheme()
  const [loading, setLoading] = useState(false)
  const [rating, setRating] = useState(0)
  const [hoveredRating, setHoveredRating] = useState(0)
  const [comment, setComment] = useState('')

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (rating === 0) return

    setLoading(true)
    try {
      const response = await fetch('/api/feedback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ rating, comment: comment.trim() || undefined }),
      })

      if (response.ok) {
        router.push('/main/user/feedback/my')
      }
    } catch (error) {
      console.error('Error submitting feedback:', error)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="max-w-2xl mx-auto space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
          Submit Feedback
        </h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">
          Share your thoughts about the community
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className={`p-6 rounded-xl border ${isDark ? 'bg-slate-800 border-slate-700' : 'bg-white border-slate-200'}`}>
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-4">
                How would you rate your overall experience? *
              </label>
              <div className="flex items-center space-x-2">
                {[1, 2, 3, 4, 5].map((star) => (
                  <button
                    key={star}
                    type="button"
                    onClick={() => setRating(star)}
                    onMouseEnter={() => setHoveredRating(star)}
                    onMouseLeave={() => setHoveredRating(0)}
                    className="p-1 transition-colors"
                  >
                    <Star
                      className={`w-8 h-8 ${
                        star <= (hoveredRating || rating)
                          ? 'text-yellow-400 fill-current'
                          : 'text-gray-300 dark:text-gray-600'
                      }`}
                    />
                  </button>
                ))}
                {rating > 0 && (
                  <span className="ml-4 text-sm text-gray-600 dark:text-gray-400">
                    {rating === 1 && "Poor"}
                    {rating === 2 && "Fair"}
                    {rating === 3 && "Good"}
                    {rating === 4 && "Very Good"}
                    {rating === 5 && "Excellent"}
                  </span>
                )}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Comments (Optional)
              </label>
              <textarea
                rows={4}
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                className={`w-full px-3 py-2 rounded-lg border ${isDark ? 'bg-slate-700 border-slate-600' : 'bg-white border-slate-300'}`}
                placeholder="Tell us more about your experience..."
              />
            </div>
          </div>
        </div>

        <div className="flex items-center justify-between">
          <button
            type="button"
            onClick={() => router.back()}
            className={`px-4 py-2 border rounded-lg ${isDark ? 'border-slate-600 hover:bg-slate-700' : 'border-slate-300 hover:bg-gray-50'}`}
          >
            Cancel
          </button>

          <button
            type="submit"
            disabled={loading || rating === 0}
            className="inline-flex items-center px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
            ) : (
              <Send className="w-4 h-4 mr-2" />
            )}
            {loading ? 'Submitting...' : 'Submit Feedback'}
          </button>
        </div>
      </form>
    </div>
  )
}



// @/app/main/user/notifications/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { DataTable } from '@/components/mainapp/components'
import { Bell, Check, AlertTriangle, Info } from 'lucide-react'

interface Notification {
  id: string
  type: 'info' | 'warning' | 'success'
  title: string
  message: string
  created_at: string
  is_read: boolean
}

export default function UserNotifications() {
  const [notifications, setNotifications] = useState<Notification[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const mockNotifications: Notification[] = [
      {
        id: '1',
        type: 'info',
        title: 'New Poll Available',
        message: 'Community Garden Proposal is now open for voting',
        created_at: new Date().toISOString(),
        is_read: false
      }
    ]
    setNotifications(mockNotifications)
    setLoading(false)
  }, [])

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'warning': return <AlertTriangle className="w-4 h-4 text-yellow-500" />
      case 'success': return <Check className="w-4 h-4 text-green-500" />
      default: return <Info className="w-4 h-4 text-blue-500" />
    }
  }

  const columns = [
    {
      key: 'type' as const,
      header: 'Type',
      render: (value: string) => getTypeIcon(value)
    },
    {
      key: 'title' as const,
      header: 'Notification',
      render: (value: string, row: Notification) => (
        <div>
          <div className={`font-medium ${row.is_read ? 'text-gray-600 dark:text-gray-400' : 'text-gray-900 dark:text-white'}`}>
            {value}
          </div>
          <div className="text-sm text-gray-500 dark:text-gray-400">{row.message}</div>
        </div>
      )
    },
    {
      key: 'created_at' as const,
      header: 'Time',
      render: (value: string) => new Date(value).toLocaleString()
    }
  ]

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Notifications</h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">Stay updated with community activity</p>
      </div>

      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
        <DataTable
          data={notifications}
          columns={columns}
          loading={loading}
          emptyMessage="No notifications"
        />
      </div>
    </div>
  )
}

//  app/main/user/polls/page.tsx

'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { DataTable, EmptyState } from '@/components/mainapp/components'
import { PieChart, Eye, Calendar, Users, Clock } from 'lucide-react'

interface Poll {
  id: string
  title: string
  description: string
  deadline: string
  created_at: string
  vote_count: number
  status: 'active' | 'closed' | 'draft'
  user_voted: boolean
}

export default function UserPolls() {
  const [polls, setPolls] = useState<Poll[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchPolls = async () => {
      try {
        const response = await fetch('/api/polls')
        if (response.ok) {
          const data = await response.json()
          setPolls(data.polls || [])
        }
      } catch (error) {
        console.error('Failed to fetch polls:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchPolls()
  }, [])

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
      case 'closed':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
    }
  }

  const columns = [
    {
      key: 'title' as const,
      header: 'Poll',
      render: (value: string, row: Poll) => (
        <div>
          <div className="font-medium text-gray-900 dark:text-white">{value}</div>
          {row.description && (
            <div className="text-sm text-gray-500 dark:text-gray-400 truncate max-w-xs">
              {row.description}
            </div>
          )}
        </div>
      )
    },
    {
      key: 'status' as const,
      header: 'Status',
      render: (value: string, row: Poll) => (
        <div className="flex items-center space-x-2">
          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(value)}`}>
            {value.charAt(0).toUpperCase() + value.slice(1)}
          </span>
          {row.user_voted && (
            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
              Voted
            </span>
          )}
        </div>
      )
    },
    {
      key: 'vote_count' as const,
      header: 'Participation',
      render: (value: number) => (
        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
          <Users className="w-4 h-4 mr-1" />
          {value} votes
        </div>
      )
    },
    {
      key: 'deadline' as const,
      header: 'Deadline',
      render: (value: string) => {
        const isExpired = value && new Date(value) < new Date()
        return (
          <div className={`flex items-center text-sm ${
            isExpired ? 'text-red-600 dark:text-red-400' : 'text-gray-600 dark:text-gray-400'
          }`}>
            {isExpired ? <Clock className="w-4 h-4 mr-1" /> : <Calendar className="w-4 h-4 mr-1" />}
            {value ? new Date(value).toLocaleDateString() : 'No deadline'}
          </div>
        )
      }
    },
    {
      key: 'created_at' as const,
      header: 'Created',
      render: (value: string) => new Date(value).toLocaleDateString()
    },
    {
      key: 'id' as const,
      header: 'Action',
      render: (value: string, row: Poll) => {
        const canVote = row.status === 'active' && (!row.deadline || new Date(row.deadline) > new Date())
        
        return (
          <Link
            href={`/main/user/polls/${value}`}
            className={`inline-flex items-center px-3 py-1 text-sm rounded-lg transition-colors duration-200 ${
              canVote 
                ? 'bg-blue-600 text-white hover:bg-blue-700' 
                : 'bg-gray-600 text-white hover:bg-gray-700'
            }`}
          >
            <Eye className="w-4 h-4 mr-1" />
            {canVote ? 'Vote' : 'View'}
          </Link>
        )
      }
    }
  ]

  const activePolls = polls.filter(poll => poll.status === 'active')
  const closedPolls = polls.filter(poll => poll.status === 'closed')

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
          Community Polls
        </h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">
          Participate in community decision making
        </p>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
          <div className="flex items-center">
            <PieChart className="w-8 h-8 text-green-500 mr-3" />
            <div>
              <p className="text-sm text-gray-600 dark:text-gray-400">Active Polls</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">{activePolls.length}</p>
            </div>
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
          <div className="flex items-center">
            <Users className="w-8 h-8 text-blue-500 mr-3" />
            <div>
              <p className="text-sm text-gray-600 dark:text-gray-400">My Votes</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">
                {polls.filter(poll => poll.user_voted).length}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
          <div className="flex items-center">
            <Clock className="w-8 h-8 text-orange-500 mr-3" />
            <div>
              <p className="text-sm text-gray-600 dark:text-gray-400">Closing Soon</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">
                {activePolls.filter(poll => 
                  poll.deadline && 
                  new Date(poll.deadline).getTime() - new Date().getTime() < 7 * 24 * 60 * 60 * 1000
                ).length}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Active Polls */}
      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
        <div className="px-6 py-4 border-b border-slate-200 dark:border-slate-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Active Polls
          </h2>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Polls you can currently vote on
          </p>
        </div>
        
        {activePolls.length === 0 && !loading ? (
          <EmptyState
            title="No active polls"
            description="There are no polls available for voting at the moment"
            icon={PieChart}
          />
        ) : (
          <DataTable
            data={activePolls}
            columns={columns}
            loading={loading}
            emptyMessage="No active polls"
          />
        )}
      </div>

      {/* Closed Polls */}
      {closedPolls.length > 0 && (
        <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 overflow-hidden">
          <div className="px-6 py-4 border-b border-slate-200 dark:border-slate-700">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
              Past Polls
            </h2>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              View results from closed polls
            </p>
          </div>
          
          <DataTable
            data={closedPolls}
            columns={columns}
            emptyMessage="No past polls"
          />
        </div>
      )}
    </div>
  )
}


import { RoleGuard } from '@/components/mainapp/components'

export default function UserLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <RoleGuard allowedRoles={['Resident', 'Admin']}>
      <div className="min-h-screen bg-slate-50 dark:bg-slate-950">
        {children}
      </div>
    </RoleGuard>
  )
}



import { RoleGuard } from '@/components/mainapp/components'

export default function UserLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <RoleGuard allowedRoles={['Resident', 'Admin']}>
      {children}
    </RoleGuard>
  )
}

'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import Link from 'next/link'
import { 
  KPIStatCard, 
  ChartCard, 
  DataTable, 
  EmptyState 
} from '@/components/mainapp/components'
import { 
  MessageSquareWarning, 
  PieChart, 
  Smile, 
  TrendingUp,
  Plus,
  Eye,
  Calendar
} from 'lucide-react'

interface UserDashboardData {
  myComplaints: number
  myVotes: number
  myFeedback: number
  satisfactionIndex: number
  recentPolls: any[]
  recentComplaints: any[]
}

export default function UserDashboard() {
  const { data: session } = useSession()
  const [data, setData] = useState<UserDashboardData | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        setLoading(true)
        
        // Fetch dashboard summary
        const response = await fetch('/api/me/summary')
        if (response.ok) {
          const summaryData = await response.json()
          
          // Fetch recent polls
          const pollsResponse = await fetch('/api/polls?limit=5')
          const pollsData = pollsResponse.ok ? await pollsResponse.json() : { polls: [] }
          
          // Fetch my complaints
          const complaintsResponse = await fetch('/api/complaints?my=true&limit=5')
          const complaintsData = complaintsResponse.ok ? await complaintsResponse.json() : { complaints: [] }
          
          setData({
            myComplaints: summaryData.stats.myComplaints || 0,
            myVotes: summaryData.stats.myVotes || 0,
            myFeedback: summaryData.stats.totalFeedback || 0,
            satisfactionIndex: summaryData.stats.satisfactionIndex || 0,
            recentPolls: pollsData.polls.slice(0, 5) || [],
            recentComplaints: complaintsData.complaints.slice(0, 3) || []
          })
        }
      } catch (error) {
        console.error('Failed to fetch dashboard data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchDashboardData()
  }, [])

  const pollColumns = [
    {
      key: 'title' as const,
      header: 'Poll Title',
      render: (value: string, row: any) => (
        <div>
          <div className="font-medium text-gray-900 dark:text-white">{value}</div>
          <div className="text-sm text-gray-500 dark:text-gray-400">
            {row.vote_count} votes
          </div>
        </div>
      )
    },
    {
      key: 'deadline' as const,
      header: 'Deadline',
      render: (value: string) => (
        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
          <Calendar className="w-4 h-4 mr-1" />
          {value ? new Date(value).toLocaleDateString() : 'No deadline'}
        </div>
      )
    },
    {
      key: 'id' as const,
      header: 'Action',
      render: (value: string) => (
        <Link
          href={`/main/user/polls/${value}`}
          className="inline-flex items-center px-3 py-1 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
        >
          <Eye className="w-4 h-4 mr-1" />
          View
        </Link>
      )
    }
  ]

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 dark:bg-slate-700 rounded w-1/4 mb-6"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="h-32 bg-gray-200 dark:bg-slate-700 rounded-xl"></div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  if (!data) {
    return (
      <EmptyState
        title="Unable to load dashboard"
        description="Please try refreshing the page"
        icon={TrendingUp}
      />
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            My Dashboard
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            Welcome back, {session?.user?.name}
          </p>
        </div>
      </div>

      {/* KPI Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <KPIStatCard
          title="My Complaints"
          value={data.myComplaints}
          icon={MessageSquareWarning}
        />
        <KPIStatCard
          title="My Votes"
          value={data.myVotes}
          icon={PieChart}
        />
        <KPIStatCard
          title="Community Rating"
          value={`${data.satisfactionIndex}/5`}
          icon={Smile}
        />
        <KPIStatCard
          title="My Feedback"
          value={data.myFeedback}
          icon={TrendingUp}
        />
      </div>

      {/* Quick Actions */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Link
          href="/main/user/complaints/submit"
          className="p-6 bg-gradient-to-br from-red-500 to-red-600 text-white rounded-xl hover:from-red-600 hover:to-red-700 transition-all duration-200 group"
        >
          <MessageSquareWarning className="w-8 h-8 mb-3 group-hover:scale-110 transition-transform" />
          <h3 className="font-semibold mb-2">Submit Complaint</h3>
          <p className="text-red-100 text-sm">Report issues or concerns</p>
        </Link>

        <Link
          href="/main/user/polls"
          className="p-6 bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-xl hover:from-blue-600 hover:to-blue-700 transition-all duration-200 group"
        >
          <PieChart className="w-8 h-8 mb-3 group-hover:scale-110 transition-transform" />
          <h3 className="font-semibold mb-2">Vote on Polls</h3>
          <p className="text-blue-100 text-sm">Participate in community decisions</p>
        </Link>

        <Link
          href="/main/user/feedback/submit"
          className="p-6 bg-gradient-to-br from-green-500 to-green-600 text-white rounded-xl hover:from-green-600 hover:to-green-700 transition-all duration-200 group"
        >
          <Smile className="w-8 h-8 mb-3 group-hover:scale-110 transition-transform" />
          <h3 className="font-semibold mb-2">Give Feedback</h3>
          <p className="text-green-100 text-sm">Share your thoughts and suggestions</p>
        </Link>
      </div>

      {/* Recent Polls */}
      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Recent Polls
          </h2>
          <Link 
            href="/main/user/polls" 
            className="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
          >
            View all
          </Link>
        </div>
        
        {data.recentPolls.length > 0 ? (
          <DataTable
            data={data.recentPolls}
            columns={pollColumns}
            emptyMessage="No polls available"
          />
        ) : (
          <EmptyState
            title="No active polls"
            description="Check back later for new community polls"
            icon={PieChart}
          />
        )}
      </div>

      {/* My Recent Complaints */}
      <div className="bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            My Recent Complaints
          </h2>
          <Link 
            href="/main/user/complaints/my" 
            className="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
          >
            View all
          </Link>
        </div>
        
        {data.recentComplaints.length > 0 ? (
          <div className="space-y-3">
            {data.recentComplaints.map((complaint: any) => (
              <div key={complaint.id} className="border-l-4 border-blue-500 pl-4">
                <h3 className="font-medium text-gray-900 dark:text-white">
                  {complaint.title}
                </h3>
                <div className="flex items-center space-x-4 mt-1">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                    ${complaint.status === 'pending' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
                      complaint.status === 'in-progress' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' :
                      'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                    }`}>
                    {complaint.status}
                  </span>
                  <span className="text-sm text-gray-500 dark:text-gray-400">
                    {new Date(complaint.created_at).toLocaleDateString()}
                  </span>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <EmptyState
            title="No complaints yet"
            description="Submit your first complaint to get started"
            icon={MessageSquareWarning}
            actionLabel="Submit Complaint"
            actionHref="/main/user/complaints/submit"
          />
        )}
      </div>
    </div>
  )
}




@import "tailwindcss";

/* Design tokens with @theme */
@theme {
  --color-background: hsl(0 0% 100%);
  --color-foreground: hsl(222.2 47.4% 11.2%);
  --color-border: hsl(214.3 31.8% 91.4%);
  
  /* Neutral colors */
  --color-slate-50: #f8fafc;
  --color-slate-100: #f1f5f9;
  --color-slate-200: #e2e8f0;
  --color-slate-300: #cbd5e1;
  --color-slate-400: #94a3b8;
  --color-slate-500: #64748b;
  --color-slate-600: #475569;
  --color-slate-700: #334155;
  --color-slate-800: #1e293b;
  --color-slate-900: #0f172a;
}

:root {
  --motion-quick: 0.15s;
  --motion-soft: 0.45s;
  --ease-quick: cubic-bezier(0.2, 0.8, 0.2, 1);
  --ease-soft: cubic-bezier(0.22, 0.8, 0.32, 1);
}

@layer base {
  html {
    scroll-behavior: smooth;
  }

  body {
    @apply antialiased bg-background text-foreground overflow-x-hidden;
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  * {
    @apply border-border;
  }
  
  /* Dark mode styles */
  html.dark {
    --color-background: #000000;
    --color-foreground: #ffffff;
    --color-border: #1e293b;
    color-scheme: dark;
  }
}

@layer utilities {
  .text-gradient {
    @apply bg-gradient-to-r from-slate-600 to-slate-800 dark:from-slate-300 dark:to-slate-100 bg-clip-text text-transparent;
  }
  
  .glass-bg {
    @apply bg-white/80 dark:bg-black/80 backdrop-blur-xl border-b border-slate-200/50 dark:border-slate-700/50;
  }
  
  .gradient-primary {
    @apply bg-gradient-to-r from-slate-700 to-slate-900 dark:from-slate-800 dark:to-slate-900 hover:from-slate-800 hover:to-slate-950 dark:hover:from-slate-700 dark:hover:to-slate-950;
  }
  
  .input {
    @apply w-full px-4 py-3 bg-white dark:bg-slate-900 border border-slate-300 dark:border-slate-700 rounded-xl text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:border-transparent transition-all duration-200;
  }
  
  /* Smooth theme transitions */
  .theme-transition {
    @apply transition-all duration-300 ease-in-out;
  }
}


// @/app/layout.tsx
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { CustomThemeProvider } from '@/components/ThemeContext'
import { Providers } from '@/components/Providers'
import { LayoutWrapper } from '@/components/LayoutWrapper'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  metadataBase: new URL('https://e-community.vercel.app'),
  title: 'E-Community — Connect · Engage · Decide',
  description: 'Transparent, secure community engagement platform for barangays, condos, schools and businesses.',
  keywords: ['community', 'engagement', 'voting', 'democracy', 'barangay', 'condo', 'school', 'business'],
  authors: [{ name: 'E-Community Team' }],
  creator: 'E-Community',
  publisher: 'E-Community',
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
  alternates: {
    canonical: '/',
  },
  openGraph: {
    title: 'E-Community — Connect · Engage · Decide',
    description: 'Transparent, secure community engagement platform for barangays, condos, schools and businesses.',
    type: 'website',
    url: 'https://e-community.vercel.app',
    siteName: 'E-Community',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'E-Community — Connect · Engage · Decide',
    description: 'Transparent, secure community engagement platform for barangays, condos, schools and businesses.',
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <CustomThemeProvider>
          <Providers>
            <LayoutWrapper>
              {children}
            </LayoutWrapper>
          </Providers>
        </CustomThemeProvider>
      </body>
    </html>
  )
}


import { Metadata } from 'next'
import Hero from '@/components/Hero'
import FeatureGrid from '@/components/FeatureGrid'
import FAQAccordion from '@/components/FAQAccordion'
import Contact from '@/components/Contact'
// Add this to your main layout temporarily
import { RoleDebug } from '@/components/RoleDebug'

// Then add <RoleDebug /> somewhere in your JSX
export const metadata: Metadata = {
  title: 'E-Community — Connect · Engage · Decide',
  description: 'Transparent, secure community engagement platform for barangays, condos, schools and businesses.',
}

export default function HomePage() {
  return (
    <>
      <RoleDebug />
      <Hero />
      <FeatureGrid />
      <FAQAccordion />
      <Contact />
    </>
  )
}































































































































